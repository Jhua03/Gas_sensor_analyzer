/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

//ADC definitions
#define ADC_BUF_LEN 10000
#define ADC_RESOLUTION 65535
#define Half_ADC_RESOLUTION 30060//28655
#define ADC_VREF 2.2

//DAC definitions
#define VREF 2.5 				// Reference voltage for DAC
#define M 2.4
#define C 1.2
#define VOUT 2
#define SINE_RESOLUTION 10	// Number of points in the sine wave
//#define V_OUT_RANGE 2   		// Desired voltage range for sine wave output
//#define RX_BUF_SIZE 100

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

SPI_HandleTypeDef hspi3;

TIM_HandleTypeDef htim1;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* USER CODE BEGIN PV */

//ADC PARAMETERS
uint16_t adc_buf[ADC_BUF_LEN];
float voltage;
float voltage_output;
float vDAC;
float vout;
uint32_t time_interval = 2000;




//DAC parameters
const uint8_t CRaddress = 0x04; 			//Control register address
const uint16_t CRconfig = 0x22D; 			//Control register configuration
const uint8_t Read = 0x0C;  				//Control register read
const uint8_t Reset = 0x0F;  				//Reset address
const uint8_t DAC_update_address = 0x03;	//DAC Write_Update address
const uint8_t DAC_Read = 0xB;				//DAC read address
uint8_t rxData[3];
uint16_t sine_wave[SINE_RESOLUTION];
int sine_index = 0;
//double V_OUT_RANGE = 2.0;
//double new_V_OUT_RANGE = 2.0;

//Serial Port
char uart_buf[30];
int uart_len;
char rx_buf[5];
float n_lim = -2.0;
float p_lim = 2.0;
float step_size = 0.5;
//uint16_t linear[1000];
char c;
int state = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_SPI3_Init(void);
static void MX_TIM1_Init(void);
static void MX_ADC1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//ADC FUNCTIONS
float ADC_to_Voltage(uint32_t adc_value)
{
	int16_t differential_value = (int16_t)adc_value -Half_ADC_RESOLUTION;//28790.5  ; //29015;
	return (((float)differential_value / Half_ADC_RESOLUTION ) * ADC_VREF +0.02);
//	float shifted_voltage = (adc_value * ADC_VREF) / (ADC_RESOLUTION);
//
//	    // Convert shifted voltage back to original voltage range (-3V to 3V)
//	float original_voltage = (shifted_voltage - 1.5) * 2.0;
//	 return original_voltage;
}

void generate_linear(float n_lim, float p_lim, float step_size) {
    float range = p_lim - n_lim;
    int steps = (int)(range / step_size);
	for (int i = 0; i < steps; i++) {
        // Convert to DAC value using the transfer function
        float v_out = n_lim + i*step_size;
        uint16_t dac_value = (uint16_t)((((v_out/VREF)+C)/M)*(65535));
        //linear[i] = dac_value;
        AD5761_Write((uint8_t)DAC_update_address, dac_value);
        HAL_Delay(time_interval-1);
    }
	if (n_lim + steps * step_size-0.1 <= p_lim) {
	        float v_out = p_lim;
	        uint16_t dac_value = (uint16_t)((((v_out/VREF) + C) / M) * 65535);
	        //linear[steps + 1] = dac_value;
	        AD5761_Write((uint8_t)DAC_update_address, dac_value);
	 }

}
//void generate_sine_wave(void) {
//    for (int i = 0; i < SINE_RESOLUTION; i++) {
//        double angle = 2 * M_PI * i / SINE_RESOLUTION;
//        double sine_value = sin(angle);
//
//        // Convert to DAC value using the transfer function
//        double v_out = sine_value * V_OUT_RANGE; // Scale sine wave to desired voltage range
//        uint16_t dac_value = (uint16_t)((((v_out/VREF)+C)/M)*(65535));
//        sine_wave[i] = dac_value;
//    }
//}
void AD5761_Read(uint8_t reg, uint16_t value) {

    uint8_t nop[3]= {(uint8_t)0x0,(uint8_t)0x0,(uint8_t)0x0};

	uint8_t txData[3];
    txData[0] = reg;
    txData[1] = (value & 0xFF00) >> 8;
    txData[2] = (value & 0x00FF) >> 0;

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);				 // CS Low
    HAL_SPI_Transmit(&hspi3, txData, 3, HAL_MAX_DELAY);  				 // Transmit data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   					// CS High

    HAL_Delay(10);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 				// CS Low
    HAL_SPI_TransmitReceive(&hspi3, nop, rxData, 3,HAL_MAX_DELAY);   	// Transmit_Receive data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);					 // CS High


}

void AD5761_Write(uint8_t reg, uint16_t value) {
    uint8_t txData[3];
    txData[0] = reg;
    txData[1] = (value & 0xFF00) >> 8;
    txData[2] = (value & 0x00FF) >> 0;


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low
    HAL_SPI_Transmit(&hspi3, txData, 3, HAL_MAX_DELAY);   // Transmit data
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS High


}

void AD5761_Init(void) {

	AD5761_Write(0x0,0x0);
	AD5761_Write(Reset,(uint16_t)0x0);		// Software Data Reset
	HAL_Delay(10);
    AD5761_Write(CRaddress, CRconfig);		// Set to Bipolar mode, +/- 3V range
}
void HandleAlertCondition(void)
{


	AD5761_Read(Read, (uint16_t)0x000);

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){

	 if (GPIO_Pin == GPIO_PIN_11)
	 	    {
	 	        // Handle the ALERT condition
	 	        HandleAlertCondition();
	 	    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_SPI3_Init();
  MX_TIM1_Init();
  MX_ADC1_Init();
  /* USER CODE BEGIN 2 */
  AD5761_Init();    						//AD5761 Initiallize (Software Data Reset and Control register write)
  AD5761_Read(Read,(uint16_t)0x0);			//Read from control register (0x4)
  HAL_UART_Receive_DMA(&huart2, rx_buf,5);


//  uint16_t dac_value = (uint16_t)((((VOUT/VREF)+C)/M)*(ADC_RESOLUTION));
//  AD5761_Write((uint8_t)DAC_update_address, dac_value);  	//Write and update DAC register (0x3)
//  //  AD5761_Read((uint8_t)0x0B,(uint16_t)0x0);				//Read DAC register (0x3)


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  HAL_TIM_Base_Start(&htim1);				 // Timer for ADC updates
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, time_interval);





  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      while (1)
  {
    	  while(state == 1){
    	    float range = p_lim - n_lim;
    	    int steps = (int)(range / step_size);
    	    for (int i = 0; i < steps; i++) {
    	    	if(state == 0)
    	    		break;
    	    	float v_out = n_lim + i*step_size;
    	      	uint16_t dac_value = (uint16_t)((((v_out/VREF)+C)/M)*(ADC_RESOLUTION));
    	      	AD5761_Write((uint8_t)DAC_update_address, dac_value);
    	      	HAL_Delay(time_interval+1);
    	    }
    	    if (n_lim + steps * step_size-0.1 <= p_lim && state == 1) {
    	      	float v_out = p_lim;
    	      	uint16_t dac_value = (uint16_t)((((v_out/VREF) + C) / M) * ADC_RESOLUTION);
    	      	AD5761_Write((uint8_t)DAC_update_address, dac_value);
    	    }
    	    state = 0;
    	 }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 2;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.OversamplingMode = ENABLE;
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
  sConfig.Rank = ADC_REGULAR_RANK_2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 80-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	c = rx_buf[0];
//	int filled = 1;
//	for(int i = 0; i< 5; i++)
//	{
//		if(rx_buf[i] == '\0' && i <(5-1))
//			filled = 0;
//		if(filled == 0)
//			rx_buf[i] = '0';
//	}
//	rx_buf[5] = '\0';
	char *endptr;
	if(c == 'S')
		state = 1;
	else if (c == 's'){
		char temp [5];
		for (int i = 1 ; i <6; i++)
			temp[i-1] = rx_buf[i];
		step_size = strtof(temp,&endptr);
	}
	else if (c == 't'){
		char temp [5];
		for (int i = 1 ; i <6; i++)
			temp[i-1] = rx_buf[i];
		time_interval = (uint32_t)strtoul(temp, &endptr, 10) *2;
		HAL_ADC_Stop_DMA(&hadc1);
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, time_interval);
	}
	else if(c == '-')
		n_lim = strtof(rx_buf,&endptr);
	else if(c == 'p')
		state = 0;
	else
		p_lim = strtof(rx_buf,&endptr);
	//new_V_OUT_RANGE = atof(rx_buf);
	memset(rx_buf, 0, sizeof(rx_buf));
	c= '\0';
	//HAL_UART_Receive_DMA(&huart2, rx_buf,5);
}
//Getting ADC values
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){

	for(int i =time_interval/2 - 20; i<time_interval/2; i++){
		if(i%2 == 0){
			voltage_output += ADC_to_Voltage(adc_buf[i]);
		}
		else{
			voltage += ADC_to_Voltage(adc_buf[i]);
		}
	}
	vDAC = voltage/10;
	vout = voltage_output/10;
	voltage =0;
	voltage_output = 0;
	uart_len = sprintf(uart_buf,"vDAC %.4f vout %.4f\r\n", vDAC, vout);
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_len,HAL_MAX_DELAY);
}

//End of ADC - Start another one
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
//	for(int i =ADC_BUF_LEN/2; i<ADC_BUF_LEN; i++){
//		if(voltage != previous_voltage){
//			voltage = ADC_to_Voltage(adc_buf[i]);
//	//		char buffer[50];
//	//		sprintf(buffer, "%.5f V\r\n", voltage);
//	//		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
//		}
//	}

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, time_interval);

}


/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
