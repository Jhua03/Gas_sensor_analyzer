
SPI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003820  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080039ac  080039ac  000049ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039f8  080039f8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080039f8  080039f8  000049f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a00  08003a00  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a00  08003a00  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a04  08003a04  00004a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a08  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08003a14  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003a14  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be15  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a3b  00000000  00000000  00010e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  00012890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082f  00000000  00000000  00013328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fe0e  00000000  00000000  00013b57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7fc  00000000  00000000  00033965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c13e3  00000000  00000000  00040161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101544  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b44  00000000  00000000  00101588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001040cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003994 	.word	0x08003994

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003994 	.word	0x08003994

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96a 	b.w	80004b8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	460c      	mov	r4, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14e      	bne.n	80002a6 <__udivmoddi4+0xaa>
 8000208:	4694      	mov	ip, r2
 800020a:	458c      	cmp	ip, r1
 800020c:	4686      	mov	lr, r0
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	d962      	bls.n	80002da <__udivmoddi4+0xde>
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0320 	rsb	r3, r2, #32
 800021a:	4091      	lsls	r1, r2
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	fa0c fc02 	lsl.w	ip, ip, r2
 8000224:	4319      	orrs	r1, r3
 8000226:	fa00 fe02 	lsl.w	lr, r0, r2
 800022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	fbb1 f4f7 	udiv	r4, r1, r7
 8000236:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023a:	fb07 1114 	mls	r1, r7, r4, r1
 800023e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000242:	fb04 f106 	mul.w	r1, r4, r6
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000252:	f080 8112 	bcs.w	800047a <__udivmoddi4+0x27e>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 810f 	bls.w	800047a <__udivmoddi4+0x27e>
 800025c:	3c02      	subs	r4, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a59      	subs	r1, r3, r1
 8000262:	fa1f f38e 	uxth.w	r3, lr
 8000266:	fbb1 f0f7 	udiv	r0, r1, r7
 800026a:	fb07 1110 	mls	r1, r7, r0, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb00 f606 	mul.w	r6, r0, r6
 8000276:	429e      	cmp	r6, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x94>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000282:	f080 80fc 	bcs.w	800047e <__udivmoddi4+0x282>
 8000286:	429e      	cmp	r6, r3
 8000288:	f240 80f9 	bls.w	800047e <__udivmoddi4+0x282>
 800028c:	4463      	add	r3, ip
 800028e:	3802      	subs	r0, #2
 8000290:	1b9b      	subs	r3, r3, r6
 8000292:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa6>
 800029a:	40d3      	lsrs	r3, r2
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xba>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb4>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x150>
 80002be:	42a3      	cmp	r3, r4
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xcc>
 80002c2:	4290      	cmp	r0, r2
 80002c4:	f0c0 80f0 	bcc.w	80004a8 <__udivmoddi4+0x2ac>
 80002c8:	1a86      	subs	r6, r0, r2
 80002ca:	eb64 0303 	sbc.w	r3, r4, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	d0e6      	beq.n	80002a2 <__udivmoddi4+0xa6>
 80002d4:	e9c5 6300 	strd	r6, r3, [r5]
 80002d8:	e7e3      	b.n	80002a2 <__udivmoddi4+0xa6>
 80002da:	2a00      	cmp	r2, #0
 80002dc:	f040 8090 	bne.w	8000400 <__udivmoddi4+0x204>
 80002e0:	eba1 040c 	sub.w	r4, r1, ip
 80002e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e8:	fa1f f78c 	uxth.w	r7, ip
 80002ec:	2101      	movs	r1, #1
 80002ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	fb08 4416 	mls	r4, r8, r6, r4
 80002fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fe:	fb07 f006 	mul.w	r0, r7, r6
 8000302:	4298      	cmp	r0, r3
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x11c>
 8000306:	eb1c 0303 	adds.w	r3, ip, r3
 800030a:	f106 34ff 	add.w	r4, r6, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x11a>
 8000310:	4298      	cmp	r0, r3
 8000312:	f200 80cd 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 8000316:	4626      	mov	r6, r4
 8000318:	1a1c      	subs	r4, r3, r0
 800031a:	fa1f f38e 	uxth.w	r3, lr
 800031e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000322:	fb08 4410 	mls	r4, r8, r0, r4
 8000326:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032a:	fb00 f707 	mul.w	r7, r0, r7
 800032e:	429f      	cmp	r7, r3
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x148>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f100 34ff 	add.w	r4, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x146>
 800033c:	429f      	cmp	r7, r3
 800033e:	f200 80b0 	bhi.w	80004a2 <__udivmoddi4+0x2a6>
 8000342:	4620      	mov	r0, r4
 8000344:	1bdb      	subs	r3, r3, r7
 8000346:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x9c>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa20 fc06 	lsr.w	ip, r0, r6
 800035c:	fa04 f301 	lsl.w	r3, r4, r1
 8000360:	ea43 030c 	orr.w	r3, r3, ip
 8000364:	40f4      	lsrs	r4, r6
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	0c38      	lsrs	r0, r7, #16
 800036c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000370:	fbb4 fef0 	udiv	lr, r4, r0
 8000374:	fa1f fc87 	uxth.w	ip, r7
 8000378:	fb00 441e 	mls	r4, r0, lr, r4
 800037c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000380:	fb0e f90c 	mul.w	r9, lr, ip
 8000384:	45a1      	cmp	r9, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x1a6>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000392:	f080 8084 	bcs.w	800049e <__udivmoddi4+0x2a2>
 8000396:	45a1      	cmp	r9, r4
 8000398:	f240 8081 	bls.w	800049e <__udivmoddi4+0x2a2>
 800039c:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a0:	443c      	add	r4, r7
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	fa1f f983 	uxth.w	r9, r3
 80003aa:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ae:	fb00 4413 	mls	r4, r0, r3, r4
 80003b2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ba:	45a4      	cmp	ip, r4
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x1d2>
 80003be:	193c      	adds	r4, r7, r4
 80003c0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c4:	d267      	bcs.n	8000496 <__udivmoddi4+0x29a>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d965      	bls.n	8000496 <__udivmoddi4+0x29a>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d2:	fba0 9302 	umull	r9, r3, r0, r2
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	429c      	cmp	r4, r3
 80003dc:	46ce      	mov	lr, r9
 80003de:	469c      	mov	ip, r3
 80003e0:	d351      	bcc.n	8000486 <__udivmoddi4+0x28a>
 80003e2:	d04e      	beq.n	8000482 <__udivmoddi4+0x286>
 80003e4:	b155      	cbz	r5, 80003fc <__udivmoddi4+0x200>
 80003e6:	ebb8 030e 	subs.w	r3, r8, lr
 80003ea:	eb64 040c 	sbc.w	r4, r4, ip
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	431e      	orrs	r6, r3
 80003f6:	40cc      	lsrs	r4, r1
 80003f8:	e9c5 6400 	strd	r6, r4, [r5]
 80003fc:	2100      	movs	r1, #0
 80003fe:	e750      	b.n	80002a2 <__udivmoddi4+0xa6>
 8000400:	f1c2 0320 	rsb	r3, r2, #32
 8000404:	fa20 f103 	lsr.w	r1, r0, r3
 8000408:	fa0c fc02 	lsl.w	ip, ip, r2
 800040c:	fa24 f303 	lsr.w	r3, r4, r3
 8000410:	4094      	lsls	r4, r2
 8000412:	430c      	orrs	r4, r1
 8000414:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000418:	fa00 fe02 	lsl.w	lr, r0, r2
 800041c:	fa1f f78c 	uxth.w	r7, ip
 8000420:	fbb3 f0f8 	udiv	r0, r3, r8
 8000424:	fb08 3110 	mls	r1, r8, r0, r3
 8000428:	0c23      	lsrs	r3, r4, #16
 800042a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042e:	fb00 f107 	mul.w	r1, r0, r7
 8000432:	4299      	cmp	r1, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x24c>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 36ff 	add.w	r6, r0, #4294967295
 800043e:	d22c      	bcs.n	800049a <__udivmoddi4+0x29e>
 8000440:	4299      	cmp	r1, r3
 8000442:	d92a      	bls.n	800049a <__udivmoddi4+0x29e>
 8000444:	3802      	subs	r0, #2
 8000446:	4463      	add	r3, ip
 8000448:	1a5b      	subs	r3, r3, r1
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000450:	fb08 3311 	mls	r3, r8, r1, r3
 8000454:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000458:	fb01 f307 	mul.w	r3, r1, r7
 800045c:	42a3      	cmp	r3, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x276>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f101 36ff 	add.w	r6, r1, #4294967295
 8000468:	d213      	bcs.n	8000492 <__udivmoddi4+0x296>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d911      	bls.n	8000492 <__udivmoddi4+0x296>
 800046e:	3902      	subs	r1, #2
 8000470:	4464      	add	r4, ip
 8000472:	1ae4      	subs	r4, r4, r3
 8000474:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000478:	e739      	b.n	80002ee <__udivmoddi4+0xf2>
 800047a:	4604      	mov	r4, r0
 800047c:	e6f0      	b.n	8000260 <__udivmoddi4+0x64>
 800047e:	4608      	mov	r0, r1
 8000480:	e706      	b.n	8000290 <__udivmoddi4+0x94>
 8000482:	45c8      	cmp	r8, r9
 8000484:	d2ae      	bcs.n	80003e4 <__udivmoddi4+0x1e8>
 8000486:	ebb9 0e02 	subs.w	lr, r9, r2
 800048a:	eb63 0c07 	sbc.w	ip, r3, r7
 800048e:	3801      	subs	r0, #1
 8000490:	e7a8      	b.n	80003e4 <__udivmoddi4+0x1e8>
 8000492:	4631      	mov	r1, r6
 8000494:	e7ed      	b.n	8000472 <__udivmoddi4+0x276>
 8000496:	4603      	mov	r3, r0
 8000498:	e799      	b.n	80003ce <__udivmoddi4+0x1d2>
 800049a:	4630      	mov	r0, r6
 800049c:	e7d4      	b.n	8000448 <__udivmoddi4+0x24c>
 800049e:	46d6      	mov	lr, sl
 80004a0:	e77f      	b.n	80003a2 <__udivmoddi4+0x1a6>
 80004a2:	4463      	add	r3, ip
 80004a4:	3802      	subs	r0, #2
 80004a6:	e74d      	b.n	8000344 <__udivmoddi4+0x148>
 80004a8:	4606      	mov	r6, r0
 80004aa:	4623      	mov	r3, r4
 80004ac:	4608      	mov	r0, r1
 80004ae:	e70f      	b.n	80002d0 <__udivmoddi4+0xd4>
 80004b0:	3e02      	subs	r6, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	e730      	b.n	8000318 <__udivmoddi4+0x11c>
 80004b6:	bf00      	nop

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <AD5761_Read>:
        double v_out = sine_value * V_OUT_RANGE; // Scale sine wave to desired voltage range
        uint16_t dac_value = (uint16_t)((((v_out/VREF)+C)/M)*(65535));
        sine_wave[i] = dac_value;
    }
}
void AD5761_Read(uint8_t reg, uint16_t value) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	4603      	mov	r3, r0
 80004c4:	460a      	mov	r2, r1
 80004c6:	71fb      	strb	r3, [r7, #7]
 80004c8:	4613      	mov	r3, r2
 80004ca:	80bb      	strh	r3, [r7, #4]
	//HAL_StatusTypeDef ret,re;
    uint8_t nop[3]= {(uint8_t)0x0,(uint8_t)0x0,(uint8_t)0x0};
 80004cc:	4a21      	ldr	r2, [pc, #132]	@ (8000554 <AD5761_Read+0x98>)
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	6812      	ldr	r2, [r2, #0]
 80004d4:	4611      	mov	r1, r2
 80004d6:	8019      	strh	r1, [r3, #0]
 80004d8:	3302      	adds	r3, #2
 80004da:	0c12      	lsrs	r2, r2, #16
 80004dc:	701a      	strb	r2, [r3, #0]

	uint8_t txData[3];
    txData[0] = reg;
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	723b      	strb	r3, [r7, #8]
    txData[1] = (value & 0xFF00) >> 8;
 80004e2:	88bb      	ldrh	r3, [r7, #4]
 80004e4:	0a1b      	lsrs	r3, r3, #8
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	727b      	strb	r3, [r7, #9]
    txData[2] = (value & 0x00FF) >> 0;
 80004ec:	88bb      	ldrh	r3, [r7, #4]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	72bb      	strb	r3, [r7, #10]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);				 // CS Low
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004fa:	f000 fe3d 	bl	8001178 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, txData, 3, HAL_MAX_DELAY);  				 // Transmit data
 80004fe:	f107 0108 	add.w	r1, r7, #8
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	2203      	movs	r2, #3
 8000508:	4813      	ldr	r0, [pc, #76]	@ (8000558 <AD5761_Read+0x9c>)
 800050a:	f002 f88c 	bl	8002626 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   					// CS High
 800050e:	2201      	movs	r2, #1
 8000510:	2110      	movs	r1, #16
 8000512:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000516:	f000 fe2f 	bl	8001178 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 800051a:	200a      	movs	r0, #10
 800051c:	f000 fb8c 	bl	8000c38 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 				// CS Low
 8000520:	2200      	movs	r2, #0
 8000522:	2110      	movs	r1, #16
 8000524:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000528:	f000 fe26 	bl	8001178 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, nop, rxData, 3,HAL_MAX_DELAY);   	// Transmit_Receive data
 800052c:	f107 010c 	add.w	r1, r7, #12
 8000530:	f04f 33ff 	mov.w	r3, #4294967295
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2303      	movs	r3, #3
 8000538:	4a08      	ldr	r2, [pc, #32]	@ (800055c <AD5761_Read+0xa0>)
 800053a:	4807      	ldr	r0, [pc, #28]	@ (8000558 <AD5761_Read+0x9c>)
 800053c:	f002 f9e8 	bl	8002910 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);					 // CS High
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f000 fe16 	bl	8001178 <HAL_GPIO_WritePin>
//    int uart_len;
//    uart_len = sprintf(uart_buf, "Status: 0x%02x 0x%02x 0x%02x \r\n", rxData[0], rxData[1], rxData[2]);
//    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_len,HAL_MAX_DELAY);
//    uint32_t controlRegisterData = (rxData[0] << 16) | (rxData[1] << 8) | rxData[2];

}
 800054c:	bf00      	nop
 800054e:	3710      	adds	r7, #16
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	080039ac 	.word	0x080039ac
 8000558:	20000028 	.word	0x20000028
 800055c:	20000114 	.word	0x20000114

08000560 <AD5761_Write>:

void AD5761_Write(uint8_t reg, uint16_t value) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	80bb      	strh	r3, [r7, #4]
    uint8_t txData[3];
    txData[0] = reg;
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	733b      	strb	r3, [r7, #12]
    txData[1] = (value & 0xFF00) >> 8;
 8000574:	88bb      	ldrh	r3, [r7, #4]
 8000576:	0a1b      	lsrs	r3, r3, #8
 8000578:	b29b      	uxth	r3, r3
 800057a:	b2db      	uxtb	r3, r3
 800057c:	737b      	strb	r3, [r7, #13]
    txData[2] = (value & 0x00FF) >> 0;
 800057e:	88bb      	ldrh	r3, [r7, #4]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	73bb      	strb	r3, [r7, #14]


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low
 8000584:	2200      	movs	r2, #0
 8000586:	2110      	movs	r1, #16
 8000588:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800058c:	f000 fdf4 	bl	8001178 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, txData, 3, HAL_MAX_DELAY);   // Transmit data
 8000590:	f107 010c 	add.w	r1, r7, #12
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	2203      	movs	r2, #3
 800059a:	4806      	ldr	r0, [pc, #24]	@ (80005b4 <AD5761_Write+0x54>)
 800059c:	f002 f843 	bl	8002626 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS High
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a8:	f000 fde6 	bl	8001178 <HAL_GPIO_WritePin>


}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000028 	.word	0x20000028

080005b8 <AD5761_Init>:

void AD5761_Init(void) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	AD5761_Write(0x0,0x0);
 80005bc:	2100      	movs	r1, #0
 80005be:	2000      	movs	r0, #0
 80005c0:	f7ff ffce 	bl	8000560 <AD5761_Write>
	AD5761_Write(Reset,(uint16_t)0x0);		// Software Data Reset
 80005c4:	230f      	movs	r3, #15
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff ffc9 	bl	8000560 <AD5761_Write>
	HAL_Delay(10);
 80005ce:	200a      	movs	r0, #10
 80005d0:	f000 fb32 	bl	8000c38 <HAL_Delay>
    AD5761_Write(CRaddress, CRconfig);		// Set to Bipolar mode, +/- 3V range
 80005d4:	2304      	movs	r3, #4
 80005d6:	f240 222d 	movw	r2, #557	@ 0x22d
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ffbf 	bl	8000560 <AD5761_Write>
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}

080005e6 <HandleAlertCondition>:
void HandleAlertCondition(void)
{
 80005e6:	b580      	push	{r7, lr}
 80005e8:	af00      	add	r7, sp, #0
    // Read the control register to determine the cause of the ALERT
    AD5761_Read(Read, (uint16_t)0x000);
 80005ea:	230c      	movs	r3, #12
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff64 	bl	80004bc <AD5761_Read>
    // Additional handling based on the specific condition
    // ...

    // Clear the ALERT condition by writing to the control register
    //AD5761_Write(CRaddress, CRconfig);
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	80fb      	strh	r3, [r7, #6]
//	 if (GPIO_Pin == GPIO_PIN_8)
//	    {
//	        // Handle the ALERT condition
//	        HandleAlertCondition();
//	    }
	 if (GPIO_Pin == GPIO_PIN_11)
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000608:	d101      	bne.n	800060e <HAL_GPIO_EXTI_Callback+0x16>
	 	    {
	 	        // Handle the ALERT condition
	 	        HandleAlertCondition();
 800060a:	f7ff ffec 	bl	80005e6 <HandleAlertCondition>
	 	    }
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061c:	f000 fa97 	bl	8000b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000620:	f000 f818 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000624:	f000 f8d6 	bl	80007d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000628:	f000 f8a4 	bl	8000774 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800062c:	f000 f864 	bl	80006f8 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  AD5761_Init();    						//AD5761 Initiallize (Software Data Reset and Control register write)
 8000630:	f7ff ffc2 	bl	80005b8 <AD5761_Init>
  AD5761_Read(Read,(uint16_t)0x0);			//Read from control register (0x4)
 8000634:	230c      	movs	r3, #12
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff3f 	bl	80004bc <AD5761_Read>

  uint16_t dac_value = (uint16_t)((((VOUT/VREF)+C)/M)*(65535));
 800063e:	f24d 5354 	movw	r3, #54612	@ 0xd554
 8000642:	80fb      	strh	r3, [r7, #6]

  AD5761_Write((uint8_t)DAC_update_address, dac_value);  //Write and update DAC register (0x3)
 8000644:	2203      	movs	r2, #3
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	4619      	mov	r1, r3
 800064a:	4610      	mov	r0, r2
 800064c:	f7ff ff88 	bl	8000560 <AD5761_Write>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

   while (1)
 8000650:	bf00      	nop
 8000652:	e7fd      	b.n	8000650 <main+0x3a>

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	@ 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	@ 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f969 	bl	800393a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800067a:	f000 fdbb 	bl	80011f4 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 f910 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a2:	230a      	movs	r3, #10
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fdf2 	bl	80012a0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f8f1 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f9f2 	bl	8001ac8 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f8dd 	bl	80008a8 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3758      	adds	r7, #88	@ 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_SPI3_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000770 <MX_SPI3_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000702:	4b1a      	ldr	r3, [pc, #104]	@ (800076c <MX_SPI3_Init+0x74>)
 8000704:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000708:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_SPI3_Init+0x74>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000710:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_SPI3_Init+0x74>)
 8000712:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000716:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000718:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_SPI3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800071e:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_SPI3_Init+0x74>)
 8000720:	2201      	movs	r2, #1
 8000722:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_SPI3_Init+0x74>)
 8000726:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800072c:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_SPI3_Init+0x74>)
 800072e:	2220      	movs	r2, #32
 8000730:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_SPI3_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_SPI3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_SPI3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_SPI3_Init+0x74>)
 8000746:	2207      	movs	r2, #7
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_SPI3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_SPI3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_SPI3_Init+0x74>)
 8000758:	f001 fec2 	bl	80024e0 <HAL_SPI_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f8a1 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000028 	.word	0x20000028
 8000770:	40003c00 	.word	0x40003c00

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 800077a:	4a15      	ldr	r2, [pc, #84]	@ (80007d0 <MX_USART2_UART_Init+0x5c>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_USART2_UART_Init+0x58>)
 80007b8:	f002 fc30 	bl	800301c <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c2:	f000 f871 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40004400 	.word	0x40004400

080007d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b088      	sub	sp, #32
 80007d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ee:	4a2d      	ldr	r2, [pc, #180]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0304 	orr.w	r3, r3, #4
 80007f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f6:	4b2b      	ldr	r3, [pc, #172]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fa:	f003 0304 	and.w	r3, r3, #4
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000806:	4a27      	ldr	r2, [pc, #156]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b22      	ldr	r3, [pc, #136]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800081e:	4a21      	ldr	r2, [pc, #132]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000826:	4b1f      	ldr	r3, [pc, #124]	@ (80008a4 <MX_GPIO_Init+0xd0>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2110      	movs	r1, #16
 8000836:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083a:	f000 fc9d 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800083e:	2310      	movs	r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f000 fb24 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 800085c:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000862:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000866:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f000 fb15 	bl	8000ea4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2102      	movs	r1, #2
 800087e:	2017      	movs	r0, #23
 8000880:	f000 fad9 	bl	8000e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000884:	2017      	movs	r0, #23
 8000886:	f000 faf2 	bl	8000e6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2102      	movs	r1, #2
 800088e:	2028      	movs	r0, #40	@ 0x28
 8000890:	f000 fad1 	bl	8000e36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000894:	2028      	movs	r0, #40	@ 0x28
 8000896:	f000 faea 	bl	8000e6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	3720      	adds	r7, #32
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40021000 	.word	0x40021000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <Error_Handler+0x8>

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	4a0e      	ldr	r2, [pc, #56]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	4a08      	ldr	r2, [pc, #32]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a17      	ldr	r2, [pc, #92]	@ (8000978 <HAL_SPI_MspInit+0x7c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d127      	bne.n	800096e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800091e:	4b17      	ldr	r3, [pc, #92]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000922:	4a16      	ldr	r2, [pc, #88]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000928:	6593      	str	r3, [r2, #88]	@ 0x58
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <HAL_SPI_MspInit+0x80>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a10      	ldr	r2, [pc, #64]	@ (800097c <HAL_SPI_MspInit+0x80>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <HAL_SPI_MspInit+0x80>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800094e:	2338      	movs	r3, #56	@ 0x38
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800095e:	2306      	movs	r3, #6
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <HAL_SPI_MspInit+0x84>)
 800096a:	f000 fa9b 	bl	8000ea4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800096e:	bf00      	nop
 8000970:	3728      	adds	r7, #40	@ 0x28
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40003c00 	.word	0x40003c00
 800097c:	40021000 	.word	0x40021000
 8000980:	48000400 	.word	0x48000400

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	@ 0x78
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	2254      	movs	r2, #84	@ 0x54
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f002 ffc8 	bl	800393a <memset>
  if(huart->Instance==USART2)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a28      	ldr	r2, [pc, #160]	@ (8000a50 <HAL_UART_MspInit+0xcc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d148      	bne.n	8000a46 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 faa5 	bl	8001f10 <HAL_RCCEx_PeriphCLKConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80009cc:	f7ff ff6c 	bl	80008a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d0:	4b20      	ldr	r3, [pc, #128]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009da:	6593      	str	r3, [r2, #88]	@ 0x58
 80009dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ec:	4a19      	ldr	r2, [pc, #100]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_UART_MspInit+0xd0>)
 80009f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a00:	2304      	movs	r3, #4
 8000a02:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a10:	2307      	movs	r3, #7
 8000a12:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a1e:	f000 fa41 	bl	8000ea4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a26:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a34:	2303      	movs	r3, #3
 8000a36:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a42:	f000 fa2f 	bl	8000ea4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	3778      	adds	r7, #120	@ 0x78
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <NMI_Handler+0x4>

08000a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <MemManage_Handler+0x4>

08000a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <BusFault_Handler+0x4>

08000a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <UsageFault_Handler+0x4>

08000a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr

08000aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aae:	f000 f8a3 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000aba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000abe:	f000 fb73 	bl	80011a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000aca:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ace:	f000 fb6b 	bl	80011a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <SystemInit+0x20>)
 8000ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ae2:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <SystemInit+0x20>)
 8000ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000afc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b00:	f7ff ffea 	bl	8000ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b04:	480c      	ldr	r0, [pc, #48]	@ (8000b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b06:	490d      	ldr	r1, [pc, #52]	@ (8000b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b08:	4a0d      	ldr	r2, [pc, #52]	@ (8000b40 <LoopForever+0xe>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b0c:	e002      	b.n	8000b14 <LoopCopyDataInit>

08000b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b12:	3304      	adds	r3, #4

08000b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b18:	d3f9      	bcc.n	8000b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b48 <LoopForever+0x16>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b20:	e001      	b.n	8000b26 <LoopFillZerobss>

08000b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b24:	3204      	adds	r2, #4

08000b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b28:	d3fb      	bcc.n	8000b22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b2a:	f002 ff0f 	bl	800394c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b2e:	f7ff fd72 	bl	8000616 <main>

08000b32 <LoopForever>:

LoopForever:
    b LoopForever
 8000b32:	e7fe      	b.n	8000b32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b40:	08003a08 	.word	0x08003a08
  ldr r2, =_sbss
 8000b44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b48:	2000011c 	.word	0x2000011c

08000b4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b4c:	e7fe      	b.n	8000b4c <ADC1_IRQHandler>

08000b4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f000 f961 	bl	8000e20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f80e 	bl	8000b80 <HAL_InitTick>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	e001      	b.n	8000b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b70:	f7ff fea0 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <HAL_InitTick+0x6c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d023      	beq.n	8000bdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_InitTick+0x70>)
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <HAL_InitTick+0x6c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f96d 	bl	8000e8a <HAL_SYSTICK_Config>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10f      	bne.n	8000bd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d809      	bhi.n	8000bd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f000 f937 	bl	8000e36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_InitTick+0x74>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]
 8000bce:	e007      	b.n	8000be0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	73fb      	strb	r3, [r7, #15]
 8000bd4:	e004      	b.n	8000be0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	73fb      	strb	r3, [r7, #15]
 8000bda:	e001      	b.n	8000be0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3710      	adds	r7, #16
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000008 	.word	0x20000008
 8000bf0:	20000000 	.word	0x20000000
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000118 	.word	0x20000118

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000118 	.word	0x20000118

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dec:	d301      	bcc.n	8000df2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dee:	2301      	movs	r3, #1
 8000df0:	e00f      	b.n	8000e12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <SysTick_Config+0x40>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfa:	210f      	movs	r1, #15
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	f7ff ff8e 	bl	8000d20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <SysTick_Config+0x40>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	@ (8000e1c <SysTick_Config+0x40>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff29 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b086      	sub	sp, #24
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
 8000e42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e48:	f7ff ff3e 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	6978      	ldr	r0, [r7, #20]
 8000e54:	f7ff ff8e 	bl	8000d74 <NVIC_EncodePriority>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff5d 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff31 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ffa2 	bl	8000ddc <SysTick_Config>
 8000e98:	4603      	mov	r3, r0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e148      	b.n	8001146 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 813a 	beq.w	8001140 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x40>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f003 0201 	and.w	r2, r3, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d017      	beq.n	8000f82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689a      	ldr	r2, [r3, #8]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d123      	bne.n	8000fd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	220f      	movs	r2, #15
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	691a      	ldr	r2, [r3, #16]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f003 0307 	and.w	r3, r3, #7
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	6939      	ldr	r1, [r7, #16]
 8000fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 0203 	and.w	r2, r3, #3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001012:	2b00      	cmp	r3, #0
 8001014:	f000 8094 	beq.w	8001140 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001018:	4b52      	ldr	r3, [pc, #328]	@ (8001164 <HAL_GPIO_Init+0x2c0>)
 800101a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101c:	4a51      	ldr	r2, [pc, #324]	@ (8001164 <HAL_GPIO_Init+0x2c0>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6613      	str	r3, [r2, #96]	@ 0x60
 8001024:	4b4f      	ldr	r3, [pc, #316]	@ (8001164 <HAL_GPIO_Init+0x2c0>)
 8001026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001030:	4a4d      	ldr	r2, [pc, #308]	@ (8001168 <HAL_GPIO_Init+0x2c4>)
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	220f      	movs	r2, #15
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1d4>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a43      	ldr	r2, [pc, #268]	@ (800116c <HAL_GPIO_Init+0x2c8>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1d0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a42      	ldr	r2, [pc, #264]	@ (8001170 <HAL_GPIO_Init+0x2cc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1cc>
 800106c:	2302      	movs	r3, #2
 800106e:	e004      	b.n	800107a <HAL_GPIO_Init+0x1d6>
 8001070:	2307      	movs	r3, #7
 8001072:	e002      	b.n	800107a <HAL_GPIO_Init+0x1d6>
 8001074:	2301      	movs	r3, #1
 8001076:	e000      	b.n	800107a <HAL_GPIO_Init+0x1d6>
 8001078:	2300      	movs	r3, #0
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	f002 0203 	and.w	r2, r2, #3
 8001080:	0092      	lsls	r2, r2, #2
 8001082:	4093      	lsls	r3, r2
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108a:	4937      	ldr	r1, [pc, #220]	@ (8001168 <HAL_GPIO_Init+0x2c4>)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001098:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010ec:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001110:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113a:	4a0e      	ldr	r2, [pc, #56]	@ (8001174 <HAL_GPIO_Init+0x2d0>)
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	fa22 f303 	lsr.w	r3, r2, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	f47f aeaf 	bne.w	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 8001156:	bf00      	nop
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	48000400 	.word	0x48000400
 8001170:	48000800 	.word	0x48000800
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001194:	e002      	b.n	800119c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011b2:	4b08      	ldr	r3, [pc, #32]	@ (80011d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b4:	695a      	ldr	r2, [r3, #20]
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d006      	beq.n	80011cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c0:	88fb      	ldrh	r3, [r7, #6]
 80011c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011c4:	88fb      	ldrh	r3, [r7, #6]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fa16 	bl	80005f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40010400 	.word	0x40010400

080011d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40007000 	.word	0x40007000

080011f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001202:	d130      	bne.n	8001266 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800120c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001210:	d038      	beq.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001212:	4b20      	ldr	r3, [pc, #128]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800121a:	4a1e      	ldr	r2, [pc, #120]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800121c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001220:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001222:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2232      	movs	r2, #50	@ 0x32
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4a1b      	ldr	r2, [pc, #108]	@ (800129c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9b      	lsrs	r3, r3, #18
 8001234:	3301      	adds	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001238:	e002      	b.n	8001240 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3b01      	subs	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800124c:	d102      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x60>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f2      	bne.n	800123a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001254:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001260:	d110      	bne.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e00f      	b.n	8001286 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800126e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001272:	d007      	beq.n	8001284 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001274:	4b07      	ldr	r3, [pc, #28]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800127c:	4a05      	ldr	r2, [pc, #20]	@ (8001294 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001282:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40007000 	.word	0x40007000
 8001298:	20000000 	.word	0x20000000
 800129c:	431bde83 	.word	0x431bde83

080012a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f000 bc02 	b.w	8001ab8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b4:	4b96      	ldr	r3, [pc, #600]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012be:	4b94      	ldr	r3, [pc, #592]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0310 	and.w	r3, r3, #16
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 80e4 	beq.w	800149e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <HAL_RCC_OscConfig+0x4c>
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b0c      	cmp	r3, #12
 80012e0:	f040 808b 	bne.w	80013fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	f040 8087 	bne.w	80013fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012ec:	4b88      	ldr	r3, [pc, #544]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d005      	beq.n	8001304 <HAL_RCC_OscConfig+0x64>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e3d9      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a1a      	ldr	r2, [r3, #32]
 8001308:	4b81      	ldr	r3, [pc, #516]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d004      	beq.n	800131e <HAL_RCC_OscConfig+0x7e>
 8001314:	4b7e      	ldr	r3, [pc, #504]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800131c:	e005      	b.n	800132a <HAL_RCC_OscConfig+0x8a>
 800131e:	4b7c      	ldr	r3, [pc, #496]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001324:	091b      	lsrs	r3, r3, #4
 8001326:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800132a:	4293      	cmp	r3, r2
 800132c:	d223      	bcs.n	8001376 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd8c 	bl	8001e50 <RCC_SetFlashLatencyFromMSIRange>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e3ba      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001342:	4b73      	ldr	r3, [pc, #460]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a72      	ldr	r2, [pc, #456]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b70      	ldr	r3, [pc, #448]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	496d      	ldr	r1, [pc, #436]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800135c:	4313      	orrs	r3, r2
 800135e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001360:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69db      	ldr	r3, [r3, #28]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	4968      	ldr	r1, [pc, #416]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001370:	4313      	orrs	r3, r2
 8001372:	604b      	str	r3, [r1, #4]
 8001374:	e025      	b.n	80013c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001376:	4b66      	ldr	r3, [pc, #408]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a65      	ldr	r2, [pc, #404]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800137c:	f043 0308 	orr.w	r3, r3, #8
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	4b63      	ldr	r3, [pc, #396]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4960      	ldr	r1, [pc, #384]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001390:	4313      	orrs	r3, r2
 8001392:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001394:	4b5e      	ldr	r3, [pc, #376]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69db      	ldr	r3, [r3, #28]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	495b      	ldr	r1, [pc, #364]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fd4c 	bl	8001e50 <RCC_SetFlashLatencyFromMSIRange>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e37a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013c2:	f000 fc81 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80013c6:	4602      	mov	r2, r0
 80013c8:	4b51      	ldr	r3, [pc, #324]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	4950      	ldr	r1, [pc, #320]	@ (8001514 <HAL_RCC_OscConfig+0x274>)
 80013d4:	5ccb      	ldrb	r3, [r1, r3]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	4a4e      	ldr	r2, [pc, #312]	@ (8001518 <HAL_RCC_OscConfig+0x278>)
 80013e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013e2:	4b4e      	ldr	r3, [pc, #312]	@ (800151c <HAL_RCC_OscConfig+0x27c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fbca 	bl	8000b80 <HAL_InitTick>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d052      	beq.n	800149c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	e35e      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d032      	beq.n	8001468 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001402:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a42      	ldr	r2, [pc, #264]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140e:	f7ff fc07 	bl	8000c20 <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001416:	f7ff fc03 	bl	8000c20 <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e347      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001428:	4b39      	ldr	r3, [pc, #228]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001434:	4b36      	ldr	r3, [pc, #216]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a35      	ldr	r2, [pc, #212]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4930      	ldr	r1, [pc, #192]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800144e:	4313      	orrs	r3, r2
 8001450:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001452:	4b2f      	ldr	r3, [pc, #188]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	492b      	ldr	r1, [pc, #172]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001462:	4313      	orrs	r3, r2
 8001464:	604b      	str	r3, [r1, #4]
 8001466:	e01a      	b.n	800149e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001468:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a28      	ldr	r2, [pc, #160]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001474:	f7ff fbd4 	bl	8000c20 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800147c:	f7ff fbd0 	bl	8000c20 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e314      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148e:	4b20      	ldr	r3, [pc, #128]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1dc>
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d073      	beq.n	8001592 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x21c>
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d10e      	bne.n	80014d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	2b03      	cmp	r3, #3
 80014ba:	d10b      	bne.n	80014d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d063      	beq.n	8001590 <HAL_RCC_OscConfig+0x2f0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d15f      	bne.n	8001590 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e2f1      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014dc:	d106      	bne.n	80014ec <HAL_RCC_OscConfig+0x24c>
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e025      	b.n	8001538 <HAL_RCC_OscConfig+0x298>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f4:	d114      	bne.n	8001520 <HAL_RCC_OscConfig+0x280>
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a05      	ldr	r2, [pc, #20]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b03      	ldr	r3, [pc, #12]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a02      	ldr	r2, [pc, #8]	@ (8001510 <HAL_RCC_OscConfig+0x270>)
 8001508:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	e013      	b.n	8001538 <HAL_RCC_OscConfig+0x298>
 8001510:	40021000 	.word	0x40021000
 8001514:	080039b0 	.word	0x080039b0
 8001518:	20000000 	.word	0x20000000
 800151c:	20000004 	.word	0x20000004
 8001520:	4ba0      	ldr	r3, [pc, #640]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a9f      	ldr	r2, [pc, #636]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152a:	6013      	str	r3, [r2, #0]
 800152c:	4b9d      	ldr	r3, [pc, #628]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a9c      	ldr	r2, [pc, #624]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001536:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d013      	beq.n	8001568 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb6e 	bl	8000c20 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fb6a 	bl	8000c20 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	@ 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e2ae      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155a:	4b92      	ldr	r3, [pc, #584]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x2a8>
 8001566:	e014      	b.n	8001592 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001568:	f7ff fb5a 	bl	8000c20 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001570:	f7ff fb56 	bl	8000c20 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b64      	cmp	r3, #100	@ 0x64
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e29a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001582:	4b88      	ldr	r3, [pc, #544]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x2d0>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d060      	beq.n	8001660 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x310>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d119      	bne.n	80015de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d116      	bne.n	80015de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b0:	4b7c      	ldr	r3, [pc, #496]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x328>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e277      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c8:	4b76      	ldr	r3, [pc, #472]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	061b      	lsls	r3, r3, #24
 80015d6:	4973      	ldr	r1, [pc, #460]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015dc:	e040      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d023      	beq.n	800162e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e6:	4b6f      	ldr	r3, [pc, #444]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a6e      	ldr	r2, [pc, #440]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f2:	f7ff fb15 	bl	8000c20 <HAL_GetTick>
 80015f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	e008      	b.n	800160c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fa:	f7ff fb11 	bl	8000c20 <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	2b02      	cmp	r3, #2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e255      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800160c:	4b65      	ldr	r3, [pc, #404]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b62      	ldr	r3, [pc, #392]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	495f      	ldr	r1, [pc, #380]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
 800162c:	e018      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162e:	4b5d      	ldr	r3, [pc, #372]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a5c      	ldr	r2, [pc, #368]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001634:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163a:	f7ff faf1 	bl	8000c20 <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001640:	e008      	b.n	8001654 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001642:	f7ff faed 	bl	8000c20 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b02      	cmp	r3, #2
 800164e:	d901      	bls.n	8001654 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e231      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001654:	4b53      	ldr	r3, [pc, #332]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f0      	bne.n	8001642 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d03c      	beq.n	80016e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d01c      	beq.n	80016ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001674:	4b4b      	ldr	r3, [pc, #300]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001676:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167a:	4a4a      	ldr	r2, [pc, #296]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff facc 	bl	8000c20 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff fac8 	bl	8000c20 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e20c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169e:	4b41      	ldr	r3, [pc, #260]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ef      	beq.n	800168c <HAL_RCC_OscConfig+0x3ec>
 80016ac:	e01b      	b.n	80016e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ae:	4b3d      	ldr	r3, [pc, #244]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b4:	4a3b      	ldr	r2, [pc, #236]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016b6:	f023 0301 	bic.w	r3, r3, #1
 80016ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff faaf 	bl	8000c20 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff faab 	bl	8000c20 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1ef      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d8:	4b32      	ldr	r3, [pc, #200]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ef      	bne.n	80016c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 80a6 	beq.w	8001840 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f8:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d10d      	bne.n	8001720 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	4b27      	ldr	r3, [pc, #156]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001708:	4a26      	ldr	r2, [pc, #152]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800170e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001710:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171c:	2301      	movs	r3, #1
 800171e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001720:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_RCC_OscConfig+0x508>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d118      	bne.n	800175e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800172c:	4b1e      	ldr	r3, [pc, #120]	@ (80017a8 <HAL_RCC_OscConfig+0x508>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <HAL_RCC_OscConfig+0x508>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001736:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001738:	f7ff fa72 	bl	8000c20 <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001740:	f7ff fa6e 	bl	8000c20 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1b2      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001752:	4b15      	ldr	r3, [pc, #84]	@ (80017a8 <HAL_RCC_OscConfig+0x508>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x4d8>
 8001766:	4b0f      	ldr	r3, [pc, #60]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176c:	4a0d      	ldr	r2, [pc, #52]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001776:	e029      	b.n	80017cc <HAL_RCC_OscConfig+0x52c>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d115      	bne.n	80017ac <HAL_RCC_OscConfig+0x50c>
 8001780:	4b08      	ldr	r3, [pc, #32]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001786:	4a07      	ldr	r2, [pc, #28]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001788:	f043 0304 	orr.w	r3, r3, #4
 800178c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001796:	4a03      	ldr	r2, [pc, #12]	@ (80017a4 <HAL_RCC_OscConfig+0x504>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a0:	e014      	b.n	80017cc <HAL_RCC_OscConfig+0x52c>
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000
 80017a8:	40007000 	.word	0x40007000
 80017ac:	4b9a      	ldr	r3, [pc, #616]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80017ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b2:	4a99      	ldr	r2, [pc, #612]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017bc:	4b96      	ldr	r3, [pc, #600]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c2:	4a95      	ldr	r2, [pc, #596]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d016      	beq.n	8001802 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fa24 	bl	8000c20 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017da:	e00a      	b.n	80017f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017dc:	f7ff fa20 	bl	8000c20 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e162      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f2:	4b89      	ldr	r3, [pc, #548]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80017f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ed      	beq.n	80017dc <HAL_RCC_OscConfig+0x53c>
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001802:	f7ff fa0d 	bl	8000c20 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7ff fa09 	bl	8000c20 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e14b      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001820:	4b7d      	ldr	r3, [pc, #500]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1ed      	bne.n	800180a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182e:	7ffb      	ldrb	r3, [r7, #31]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d105      	bne.n	8001840 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001834:	4b78      	ldr	r3, [pc, #480]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001838:	4a77      	ldr	r2, [pc, #476]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 800183a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800183e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b00      	cmp	r3, #0
 800184a:	d03c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01c      	beq.n	800188e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001854:	4b70      	ldr	r3, [pc, #448]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001856:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800185a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff f9dc 	bl	8000c20 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800186c:	f7ff f9d8 	bl	8000c20 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e11c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800187e:	4b66      	ldr	r3, [pc, #408]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001880:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ef      	beq.n	800186c <HAL_RCC_OscConfig+0x5cc>
 800188c:	e01b      	b.n	80018c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800188e:	4b62      	ldr	r3, [pc, #392]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001890:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001894:	4a60      	ldr	r2, [pc, #384]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff f9bf 	bl	8000c20 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a6:	f7ff f9bb 	bl	8000c20 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e0ff      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b8:	4b57      	ldr	r3, [pc, #348]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80018ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ef      	bne.n	80018a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 80f3 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	f040 80c9 	bne.w	8001a6c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018da:	4b4f      	ldr	r3, [pc, #316]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0203 	and.w	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d12c      	bne.n	8001948 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	3b01      	subs	r3, #1
 80018fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d123      	bne.n	8001948 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d11b      	bne.n	8001948 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d113      	bne.n	8001948 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800192a:	085b      	lsrs	r3, r3, #1
 800192c:	3b01      	subs	r3, #1
 800192e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001930:	429a      	cmp	r2, r3
 8001932:	d109      	bne.n	8001948 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	085b      	lsrs	r3, r3, #1
 8001940:	3b01      	subs	r3, #1
 8001942:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d06b      	beq.n	8001a20 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d062      	beq.n	8001a14 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800194e:	4b32      	ldr	r3, [pc, #200]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e0ac      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800195e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a2d      	ldr	r2, [pc, #180]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001964:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001968:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800196a:	f7ff f959 	bl	8000c20 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001972:	f7ff f955 	bl	8000c20 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e099      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001984:	4b24      	ldr	r3, [pc, #144]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1f0      	bne.n	8001972 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001990:	4b21      	ldr	r3, [pc, #132]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001992:	68da      	ldr	r2, [r3, #12]
 8001994:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <HAL_RCC_OscConfig+0x77c>)
 8001996:	4013      	ands	r3, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019a0:	3a01      	subs	r2, #1
 80019a2:	0112      	lsls	r2, r2, #4
 80019a4:	4311      	orrs	r1, r2
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019aa:	0212      	lsls	r2, r2, #8
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019b2:	0852      	lsrs	r2, r2, #1
 80019b4:	3a01      	subs	r2, #1
 80019b6:	0552      	lsls	r2, r2, #21
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019be:	0852      	lsrs	r2, r2, #1
 80019c0:	3a01      	subs	r2, #1
 80019c2:	0652      	lsls	r2, r2, #25
 80019c4:	4311      	orrs	r1, r2
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019ca:	06d2      	lsls	r2, r2, #27
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4912      	ldr	r1, [pc, #72]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019d4:	4b10      	ldr	r3, [pc, #64]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 80019e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ec:	f7ff f918 	bl	8000c20 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff f914 	bl	8000c20 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e058      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	4b04      	ldr	r3, [pc, #16]	@ (8001a18 <HAL_RCC_OscConfig+0x778>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a12:	e050      	b.n	8001ab6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e04f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d144      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a2c:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a23      	ldr	r2, [pc, #140]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a38:	4b21      	ldr	r3, [pc, #132]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a44:	f7ff f8ec 	bl	8000c20 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff f8e8 	bl	8000c20 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e02c      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5e:	4b18      	ldr	r3, [pc, #96]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0x7ac>
 8001a6a:	e024      	b.n	8001ab6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d01f      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b13      	ldr	r3, [pc, #76]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a12      	ldr	r2, [pc, #72]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f8cf 	bl	8000c20 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a86:	f7ff f8cb 	bl	8000c20 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a98:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	4905      	ldr	r1, [pc, #20]	@ (8001ac0 <HAL_RCC_OscConfig+0x820>)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_RCC_OscConfig+0x824>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	60cb      	str	r3, [r1, #12]
 8001ab0:	e001      	b.n	8001ab6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3720      	adds	r7, #32
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	feeefffc 	.word	0xfeeefffc

08001ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0e7      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b75      	ldr	r3, [pc, #468]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b72      	ldr	r3, [pc, #456]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4970      	ldr	r1, [pc, #448]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0cf      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b66      	ldr	r3, [pc, #408]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d908      	bls.n	8001b3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b28:	4b63      	ldr	r3, [pc, #396]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4960      	ldr	r1, [pc, #384]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d04c      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d121      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0a6      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d107      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b66:	4b54      	ldr	r3, [pc, #336]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d115      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e09a      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e08e      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e086      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9e:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f023 0203 	bic.w	r2, r3, #3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4943      	ldr	r1, [pc, #268]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb0:	f7ff f836 	bl	8000c20 <HAL_GetTick>
 8001bb4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb8:	f7ff f832 	bl	8000c20 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e06e      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	4b3a      	ldr	r3, [pc, #232]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 020c 	and.w	r2, r3, #12
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d1eb      	bne.n	8001bb8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4b31      	ldr	r3, [pc, #196]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d208      	bcs.n	8001c0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	492b      	ldr	r1, [pc, #172]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d210      	bcs.n	8001c3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1c:	4b25      	ldr	r3, [pc, #148]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 0207 	bic.w	r2, r3, #7
 8001c24:	4923      	ldr	r1, [pc, #140]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2c:	4b21      	ldr	r3, [pc, #132]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e036      	b.n	8001cac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d008      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	4918      	ldr	r1, [pc, #96]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d009      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c68:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4910      	ldr	r1, [pc, #64]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c7c:	f000 f824 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 8001c80:	4602      	mov	r2, r0
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	490b      	ldr	r1, [pc, #44]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f4>)
 8001c8e:	5ccb      	ldrb	r3, [r1, r3]
 8001c90:	f003 031f 	and.w	r3, r3, #31
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
 8001c98:	4a09      	ldr	r2, [pc, #36]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1fc>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe ff6d 	bl	8000b80 <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001caa:	7afb      	ldrb	r3, [r7, #11]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080039b0 	.word	0x080039b0
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b089      	sub	sp, #36	@ 0x24
 8001ccc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce0:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x34>
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b0c      	cmp	r3, #12
 8001cf4:	d121      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d11e      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cfc:	4b34      	ldr	r3, [pc, #208]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d107      	bne.n	8001d18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d08:	4b31      	ldr	r3, [pc, #196]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d0e:	0a1b      	lsrs	r3, r3, #8
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	e005      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d24:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	e004      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	2b0c      	cmp	r3, #12
 8001d54:	d134      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d56:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_GetSysClockFreq+0xa6>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d003      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0xac>
 8001d6c:	e005      	b.n	8001d7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d70:	617b      	str	r3, [r7, #20]
      break;
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x114>)
 8001d76:	617b      	str	r3, [r7, #20]
      break;
 8001d78:	e002      	b.n	8001d80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	617b      	str	r3, [r7, #20]
      break;
 8001d7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d80:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	091b      	lsrs	r3, r3, #4
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8e:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	0a1b      	lsrs	r3, r3, #8
 8001d94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	0e5b      	lsrs	r3, r3, #25
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	3301      	adds	r3, #1
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dc0:	69bb      	ldr	r3, [r7, #24]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	@ 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	080039c8 	.word	0x080039c8
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de4:	4b03      	ldr	r3, [pc, #12]	@ (8001df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de6:	681b      	ldr	r3, [r3, #0]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	20000000 	.word	0x20000000

08001df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001dfc:	f7ff fff0 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	0a1b      	lsrs	r3, r3, #8
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4904      	ldr	r1, [pc, #16]	@ (8001e20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	f003 031f 	and.w	r3, r3, #31
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	080039c0 	.word	0x080039c0

08001e24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e28:	f7ff ffda 	bl	8001de0 <HAL_RCC_GetHCLKFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	0adb      	lsrs	r3, r3, #11
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	4904      	ldr	r1, [pc, #16]	@ (8001e4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	080039c0 	.word	0x080039c0

08001e50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e68:	f7ff f9b6 	bl	80011d8 <HAL_PWREx_GetVoltageRange>
 8001e6c:	6178      	str	r0, [r7, #20]
 8001e6e:	e014      	b.n	8001e9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e70:	4b25      	ldr	r3, [pc, #148]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	4a24      	ldr	r2, [pc, #144]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7c:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e88:	f7ff f9a6 	bl	80011d8 <HAL_PWREx_GetVoltageRange>
 8001e8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e92:	4a1d      	ldr	r2, [pc, #116]	@ (8001f08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea0:	d10b      	bne.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	@ 0x80
 8001ea6:	d919      	bls.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eac:	d902      	bls.n	8001eb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eae:	2302      	movs	r3, #2
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e013      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	e010      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b80      	cmp	r3, #128	@ 0x80
 8001ebe:	d902      	bls.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e00a      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b80      	cmp	r3, #128	@ 0x80
 8001eca:	d102      	bne.n	8001ed2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ecc:	2302      	movs	r3, #2
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	e004      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b70      	cmp	r3, #112	@ 0x70
 8001ed6:	d101      	bne.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f023 0207 	bic.w	r2, r3, #7
 8001ee4:	4909      	ldr	r1, [pc, #36]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0307 	and.w	r3, r3, #7
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d001      	beq.n	8001efe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f18:	2300      	movs	r3, #0
 8001f1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d031      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f34:	d01a      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f36:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f3a:	d814      	bhi.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f44:	d10f      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f46:	4b5d      	ldr	r3, [pc, #372]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	4a5c      	ldr	r2, [pc, #368]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f50:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f52:	e00c      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3304      	adds	r3, #4
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f9ce 	bl	80022fc <RCCEx_PLLSAI1_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f64:	e003      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	74fb      	strb	r3, [r7, #19]
      break;
 8001f6a:	e000      	b.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f6e:	7cfb      	ldrb	r3, [r7, #19]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10b      	bne.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f74:	4b51      	ldr	r3, [pc, #324]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f82:	494e      	ldr	r1, [pc, #312]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f8a:	e001      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f8c:	7cfb      	ldrb	r3, [r7, #19]
 8001f8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 809e 	beq.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fa2:	4b46      	ldr	r3, [pc, #280]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e000      	b.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	4b40      	ldr	r3, [pc, #256]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b3a      	ldr	r3, [pc, #232]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a39      	ldr	r2, [pc, #228]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe fe1e 	bl	8000c20 <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7fe fe1a 	bl	8000c20 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d902      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	74fb      	strb	r3, [r7, #19]
        break;
 8001ffa:	e005      	b.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ffc:	4b30      	ldr	r3, [pc, #192]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ef      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d15a      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800200e:	4b2b      	ldr	r3, [pc, #172]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002014:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002018:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d01e      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	429a      	cmp	r2, r3
 8002028:	d019      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800202a:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800202c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002034:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002036:	4b21      	ldr	r3, [pc, #132]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203c:	4a1f      	ldr	r2, [pc, #124]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002056:	4a19      	ldr	r2, [pc, #100]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d016      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002068:	f7fe fdda 	bl	8000c20 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800206e:	e00b      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7fe fdd6 	bl	8000c20 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d902      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	74fb      	strb	r3, [r7, #19]
            break;
 8002086:	e006      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002088:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0ec      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002096:	7cfb      	ldrb	r3, [r7, #19]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10b      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800209c:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020aa:	4904      	ldr	r1, [pc, #16]	@ (80020bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020b2:	e009      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b4:	7cfb      	ldrb	r3, [r7, #19]
 80020b6:	74bb      	strb	r3, [r7, #18]
 80020b8:	e006      	b.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c4:	7cfb      	ldrb	r3, [r7, #19]
 80020c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020c8:	7c7b      	ldrb	r3, [r7, #17]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b8a      	ldr	r3, [pc, #552]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d2:	4a89      	ldr	r2, [pc, #548]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020e6:	4b84      	ldr	r3, [pc, #528]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ec:	f023 0203 	bic.w	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4980      	ldr	r1, [pc, #512]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00a      	beq.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002108:	4b7b      	ldr	r3, [pc, #492]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210e:	f023 020c 	bic.w	r2, r3, #12
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002116:	4978      	ldr	r1, [pc, #480]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212a:	4b73      	ldr	r3, [pc, #460]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002130:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	496f      	ldr	r1, [pc, #444]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800213a:	4313      	orrs	r3, r2
 800213c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00a      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800214c:	4b6a      	ldr	r3, [pc, #424]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800214e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002152:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215a:	4967      	ldr	r1, [pc, #412]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800216e:	4b62      	ldr	r3, [pc, #392]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002174:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217c:	495e      	ldr	r1, [pc, #376]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002190:	4b59      	ldr	r3, [pc, #356]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800219e:	4956      	ldr	r1, [pc, #344]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00a      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b2:	4b51      	ldr	r3, [pc, #324]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	494d      	ldr	r1, [pc, #308]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d028      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d4:	4b48      	ldr	r3, [pc, #288]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	4945      	ldr	r1, [pc, #276]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021f2:	d106      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f4:	4b40      	ldr	r3, [pc, #256]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	4a3f      	ldr	r2, [pc, #252]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fe:	60d3      	str	r3, [r2, #12]
 8002200:	e011      	b.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002206:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800220a:	d10c      	bne.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3304      	adds	r3, #4
 8002210:	2101      	movs	r1, #1
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f872 	bl	80022fc <RCCEx_PLLSAI1_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002222:	7cfb      	ldrb	r3, [r7, #19]
 8002224:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002238:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002240:	492d      	ldr	r1, [pc, #180]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002242:	4313      	orrs	r3, r2
 8002244:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002250:	d106      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002252:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002258:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800225c:	60d3      	str	r3, [r2, #12]
 800225e:	e011      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002268:	d10c      	bne.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	2101      	movs	r1, #1
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f843 	bl	80022fc <RCCEx_PLLSAI1_Config>
 8002276:	4603      	mov	r3, r0
 8002278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01c      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002290:	4b19      	ldr	r3, [pc, #100]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002296:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800229e:	4916      	ldr	r1, [pc, #88]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022ae:	d10c      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	2102      	movs	r1, #2
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f820 	bl	80022fc <RCCEx_PLLSAI1_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c0:	7cfb      	ldrb	r3, [r7, #19]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022dc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e4:	4904      	ldr	r1, [pc, #16]	@ (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40021000 	.word	0x40021000

080022fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800230a:	4b74      	ldr	r3, [pc, #464]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d018      	beq.n	8002348 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002316:	4b71      	ldr	r3, [pc, #452]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	f003 0203 	and.w	r2, r3, #3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d10d      	bne.n	8002342 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
       ||
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800232e:	4b6b      	ldr	r3, [pc, #428]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
       ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d047      	beq.n	80023d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e044      	b.n	80023d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d018      	beq.n	8002382 <RCCEx_PLLSAI1_Config+0x86>
 8002350:	2b03      	cmp	r3, #3
 8002352:	d825      	bhi.n	80023a0 <RCCEx_PLLSAI1_Config+0xa4>
 8002354:	2b01      	cmp	r3, #1
 8002356:	d002      	beq.n	800235e <RCCEx_PLLSAI1_Config+0x62>
 8002358:	2b02      	cmp	r3, #2
 800235a:	d009      	beq.n	8002370 <RCCEx_PLLSAI1_Config+0x74>
 800235c:	e020      	b.n	80023a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800235e:	4b5f      	ldr	r3, [pc, #380]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11d      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236e:	e01a      	b.n	80023a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002370:	4b5a      	ldr	r3, [pc, #360]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d116      	bne.n	80023aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002380:	e013      	b.n	80023aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002382:	4b56      	ldr	r3, [pc, #344]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800238e:	4b53      	ldr	r3, [pc, #332]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800239e:	e006      	b.n	80023ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      break;
 80023a4:	e004      	b.n	80023b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023a6:	bf00      	nop
 80023a8:	e002      	b.n	80023b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023aa:	bf00      	nop
 80023ac:	e000      	b.n	80023b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10d      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023b6:	4b49      	ldr	r3, [pc, #292]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	430b      	orrs	r3, r1
 80023cc:	4943      	ldr	r1, [pc, #268]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d17c      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023d8:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a3f      	ldr	r2, [pc, #252]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80023de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80023e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e4:	f7fe fc1c 	bl	8000c20 <HAL_GetTick>
 80023e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023ea:	e009      	b.n	8002400 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023ec:	f7fe fc18 	bl	8000c20 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d902      	bls.n	8002400 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	73fb      	strb	r3, [r7, #15]
        break;
 80023fe:	e005      	b.n	800240c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002400:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ef      	bne.n	80023ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d15f      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d110      	bne.n	800243a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002418:	4b30      	ldr	r3, [pc, #192]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002420:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6892      	ldr	r2, [r2, #8]
 8002428:	0211      	lsls	r1, r2, #8
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	06d2      	lsls	r2, r2, #27
 8002430:	430a      	orrs	r2, r1
 8002432:	492a      	ldr	r1, [pc, #168]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002434:	4313      	orrs	r3, r2
 8002436:	610b      	str	r3, [r1, #16]
 8002438:	e027      	b.n	800248a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d112      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002440:	4b26      	ldr	r3, [pc, #152]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002448:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	0211      	lsls	r1, r2, #8
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6912      	ldr	r2, [r2, #16]
 8002456:	0852      	lsrs	r2, r2, #1
 8002458:	3a01      	subs	r2, #1
 800245a:	0552      	lsls	r2, r2, #21
 800245c:	430a      	orrs	r2, r1
 800245e:	491f      	ldr	r1, [pc, #124]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002460:	4313      	orrs	r3, r2
 8002462:	610b      	str	r3, [r1, #16]
 8002464:	e011      	b.n	800248a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800246e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	6892      	ldr	r2, [r2, #8]
 8002476:	0211      	lsls	r1, r2, #8
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	6952      	ldr	r2, [r2, #20]
 800247c:	0852      	lsrs	r2, r2, #1
 800247e:	3a01      	subs	r2, #1
 8002480:	0652      	lsls	r2, r2, #25
 8002482:	430a      	orrs	r2, r1
 8002484:	4915      	ldr	r1, [pc, #84]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002486:	4313      	orrs	r3, r2
 8002488:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800248a:	4b14      	ldr	r3, [pc, #80]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a13      	ldr	r2, [pc, #76]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8002490:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002494:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002496:	f7fe fbc3 	bl	8000c20 <HAL_GetTick>
 800249a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800249c:	e009      	b.n	80024b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800249e:	f7fe fbbf 	bl	8000c20 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d902      	bls.n	80024b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	73fb      	strb	r3, [r7, #15]
          break;
 80024b0:	e005      	b.n	80024be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024b2:	4b0a      	ldr	r3, [pc, #40]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0ef      	beq.n	800249e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d106      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	4903      	ldr	r1, [pc, #12]	@ (80024dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000

080024e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e095      	b.n	800261e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d108      	bne.n	800250c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002502:	d009      	beq.n	8002518 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	61da      	str	r2, [r3, #28]
 800250a:	e005      	b.n	8002518 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe f9e2 	bl	80008fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800254e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002558:	d902      	bls.n	8002560 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	e002      	b.n	8002566 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002560:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002564:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800256e:	d007      	beq.n	8002580 <HAL_SPI_Init+0xa0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002578:	d002      	beq.n	8002580 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c2:	ea42 0103 	orr.w	r1, r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	f003 0204 	and.w	r2, r3, #4
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80025fc:	ea42 0103 	orr.w	r1, r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b088      	sub	sp, #32
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002636:	2300      	movs	r3, #0
 8002638:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_SPI_Transmit+0x22>
 8002644:	2302      	movs	r3, #2
 8002646:	e15f      	b.n	8002908 <HAL_SPI_Transmit+0x2e2>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002650:	f7fe fae6 	bl	8000c20 <HAL_GetTick>
 8002654:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b01      	cmp	r3, #1
 8002664:	d002      	beq.n	800266c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002666:	2302      	movs	r3, #2
 8002668:	77fb      	strb	r3, [r7, #31]
    goto error;
 800266a:	e148      	b.n	80028fe <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_SPI_Transmit+0x52>
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d102      	bne.n	800267e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800267c:	e13f      	b.n	80028fe <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2203      	movs	r2, #3
 8002682:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	88fa      	ldrh	r2, [r7, #6]
 800269c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026c8:	d10f      	bne.n	80026ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f4:	2b40      	cmp	r3, #64	@ 0x40
 80026f6:	d007      	beq.n	8002708 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002706:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002710:	d94f      	bls.n	80027b2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <HAL_SPI_Transmit+0xfa>
 800271a:	8afb      	ldrh	r3, [r7, #22]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d142      	bne.n	80027a6 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002724:	881a      	ldrh	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002730:	1c9a      	adds	r2, r3, #2
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800273a:	b29b      	uxth	r3, r3
 800273c:	3b01      	subs	r3, #1
 800273e:	b29a      	uxth	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002744:	e02f      	b.n	80027a6 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b02      	cmp	r3, #2
 8002752:	d112      	bne.n	800277a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002764:	1c9a      	adds	r2, r3, #2
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002778:	e015      	b.n	80027a6 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277a:	f7fe fa51 	bl	8000c20 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d803      	bhi.n	8002792 <HAL_SPI_Transmit+0x16c>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d102      	bne.n	8002798 <HAL_SPI_Transmit+0x172>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80027a4:	e0ab      	b.n	80028fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ca      	bne.n	8002746 <HAL_SPI_Transmit+0x120>
 80027b0:	e080      	b.n	80028b4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Transmit+0x19a>
 80027ba:	8afb      	ldrh	r3, [r7, #22]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d174      	bne.n	80028aa <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d912      	bls.n	80027f0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	1c9a      	adds	r2, r3, #2
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b02      	subs	r3, #2
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80027ee:	e05c      	b.n	80028aa <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002816:	e048      	b.n	80028aa <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d12b      	bne.n	800287e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d912      	bls.n	8002856 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002834:	881a      	ldrh	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002840:	1c9a      	adds	r2, r3, #2
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b02      	subs	r3, #2
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002854:	e029      	b.n	80028aa <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	330c      	adds	r3, #12
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	1c5a      	adds	r2, r3, #1
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800287c:	e015      	b.n	80028aa <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800287e:	f7fe f9cf 	bl	8000c20 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	429a      	cmp	r2, r3
 800288c:	d803      	bhi.n	8002896 <HAL_SPI_Transmit+0x270>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002894:	d102      	bne.n	800289c <HAL_SPI_Transmit+0x276>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d106      	bne.n	80028aa <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80028a8:	e029      	b.n	80028fe <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1b1      	bne.n	8002818 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fb69 	bl	8002f90 <SPI_EndRxTxTransaction>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10a      	bne.n	80028e8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e003      	b.n	80028fe <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002906:	7ffb      	ldrb	r3, [r7, #31]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3720      	adds	r7, #32
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	@ 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800291e:	2301      	movs	r3, #1
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_SPI_TransmitReceive+0x26>
 8002932:	2302      	movs	r3, #2
 8002934:	e20a      	b.n	8002d4c <HAL_SPI_TransmitReceive+0x43c>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800293e:	f7fe f96f 	bl	8000c20 <HAL_GetTick>
 8002942:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800294a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002952:	887b      	ldrh	r3, [r7, #2]
 8002954:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800295a:	7efb      	ldrb	r3, [r7, #27]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d00e      	beq.n	800297e <HAL_SPI_TransmitReceive+0x6e>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002966:	d106      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x66>
 8002970:	7efb      	ldrb	r3, [r7, #27]
 8002972:	2b04      	cmp	r3, #4
 8002974:	d003      	beq.n	800297e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002976:	2302      	movs	r3, #2
 8002978:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800297c:	e1e0      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x80>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x80>
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8002996:	e1d3      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d003      	beq.n	80029ac <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2205      	movs	r2, #5
 80029a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	887a      	ldrh	r2, [r7, #2]
 80029d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	887a      	ldrh	r2, [r7, #2]
 80029d8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2200      	movs	r2, #0
 80029e4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029ee:	d802      	bhi.n	80029f6 <HAL_SPI_TransmitReceive+0xe6>
 80029f0:	8a3b      	ldrh	r3, [r7, #16]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d908      	bls.n	8002a08 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a04:	605a      	str	r2, [r3, #4]
 8002a06:	e007      	b.n	8002a18 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b40      	cmp	r3, #64	@ 0x40
 8002a24:	d007      	beq.n	8002a36 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002a3e:	f240 8081 	bls.w	8002b44 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d002      	beq.n	8002a50 <HAL_SPI_TransmitReceive+0x140>
 8002a4a:	8a7b      	ldrh	r3, [r7, #18]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d16d      	bne.n	8002b2c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	1c9a      	adds	r2, r3, #2
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a74:	e05a      	b.n	8002b2c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d11b      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x1ac>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d016      	beq.n	8002abc <HAL_SPI_TransmitReceive+0x1ac>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d113      	bne.n	8002abc <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a98:	881a      	ldrh	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	1c9a      	adds	r2, r3, #2
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d11c      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x1f4>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	b292      	uxth	r2, r2
 8002ae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	1c9a      	adds	r2, r3, #2
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	3b01      	subs	r3, #1
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b00:	2301      	movs	r3, #1
 8002b02:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b04:	f7fe f88c 	bl	8000c20 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d80b      	bhi.n	8002b2c <HAL_SPI_TransmitReceive+0x21c>
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1a:	d007      	beq.n	8002b2c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002b2a:	e109      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d19f      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x166>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d199      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x166>
 8002b42:	e0e3      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_SPI_TransmitReceive+0x244>
 8002b4c:	8a7b      	ldrh	r3, [r7, #18]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	f040 80cf 	bne.w	8002cf2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d912      	bls.n	8002b84 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b62:	881a      	ldrh	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	1c9a      	adds	r2, r3, #2
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3b02      	subs	r3, #2
 8002b7c:	b29a      	uxth	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b82:	e0b6      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	330c      	adds	r3, #12
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002baa:	e0a2      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d134      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x314>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d02f      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x314>
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d12c      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d912      	bls.n	8002bfa <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	1c9a      	adds	r2, r3, #2
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b02      	subs	r3, #2
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002bf8:	e012      	b.n	8002c20 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d148      	bne.n	8002cc4 <HAL_SPI_TransmitReceive+0x3b4>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d042      	beq.n	8002cc4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d923      	bls.n	8002c92 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	b292      	uxth	r2, r2
 8002c56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	1c9a      	adds	r2, r3, #2
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b02      	subs	r3, #2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d81f      	bhi.n	8002cc0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c8e:	605a      	str	r2, [r3, #4]
 8002c90:	e016      	b.n	8002cc0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f103 020c 	add.w	r2, r3, #12
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	7812      	ldrb	r2, [r2, #0]
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cc4:	f7fd ffac 	bl	8000c20 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d803      	bhi.n	8002cdc <HAL_SPI_TransmitReceive+0x3cc>
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d102      	bne.n	8002ce2 <HAL_SPI_TransmitReceive+0x3d2>
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d107      	bne.n	8002cf2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8002cf0:	e026      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af57 	bne.w	8002bac <HAL_SPI_TransmitReceive+0x29c>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f47f af50 	bne.w	8002bac <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f93d 	bl	8002f90 <SPI_EndRxTxTransaction>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d36:	e003      	b.n	8002d40 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	@ 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d64:	f7fd ff5c 	bl	8000c20 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d74:	f7fd ff54 	bl	8000c20 <HAL_GetTick>
 8002d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d7a:	4b39      	ldr	r3, [pc, #228]	@ (8002e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	015b      	lsls	r3, r3, #5
 8002d80:	0d1b      	lsrs	r3, r3, #20
 8002d82:	69fa      	ldr	r2, [r7, #28]
 8002d84:	fb02 f303 	mul.w	r3, r2, r3
 8002d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d8a:	e054      	b.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d050      	beq.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d94:	f7fd ff44 	bl	8000c20 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d902      	bls.n	8002daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d13d      	bne.n	8002e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dc2:	d111      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dcc:	d004      	beq.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dd6:	d107      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002df0:	d10f      	bne.n	8002e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e017      	b.n	8002e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689a      	ldr	r2, [r3, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	bf0c      	ite	eq
 8002e46:	2301      	moveq	r3, #1
 8002e48:	2300      	movne	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	79fb      	ldrb	r3, [r7, #7]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d19b      	bne.n	8002d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000000 	.word	0x20000000

08002e64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	@ 0x28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e76:	f7fd fed3 	bl	8000c20 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8002e86:	f7fd fecb 	bl	8000c20 <HAL_GetTick>
 8002e8a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e94:	4b3d      	ldr	r3, [pc, #244]	@ (8002f8c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00da      	lsls	r2, r3, #3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	0d1b      	lsrs	r3, r3, #20
 8002ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002eac:	e060      	b.n	8002f70 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002eb4:	d107      	bne.n	8002ec6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d104      	bne.n	8002ec6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d050      	beq.n	8002f70 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ece:	f7fd fea7 	bl	8000c20 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	6a3b      	ldr	r3, [r7, #32]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d902      	bls.n	8002ee4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d13d      	bne.n	8002f60 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002ef2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002efc:	d111      	bne.n	8002f22 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f06:	d004      	beq.n	8002f12 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f10:	d107      	bne.n	8002f22 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f2a:	d10f      	bne.n	8002f4c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e010      	b.n	8002f82 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689a      	ldr	r2, [r3, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d196      	bne.n	8002eae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3728      	adds	r7, #40	@ 0x28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000000 	.word	0x20000000

08002f90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f7ff ff5b 	bl	8002e64 <SPI_WaitFifoStateUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fb8:	f043 0220 	orr.w	r2, r3, #32
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e027      	b.n	8003014 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	2180      	movs	r1, #128	@ 0x80
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f7ff fec0 	bl	8002d54 <SPI_WaitFlagStateUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d007      	beq.n	8002fea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fde:	f043 0220 	orr.w	r2, r3, #32
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e014      	b.n	8003014 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f7ff ff34 	bl	8002e64 <SPI_WaitFifoStateUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d007      	beq.n	8003012 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e000      	b.n	8003014 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e040      	b.n	80030b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fca0 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	@ 0x24
 8003048:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0201 	bic.w	r2, r2, #1
 8003058:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa54 	bl	8003510 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f825 	bl	80030b8 <UART_SetConfig>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e01b      	b.n	80030b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003086:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003096:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fad3 	bl	8003654 <UART_CheckIdleState>
 80030ae:	4603      	mov	r3, r0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030bc:	b08a      	sub	sp, #40	@ 0x28
 80030be:	af00      	add	r7, sp, #0
 80030c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	4313      	orrs	r3, r2
 80030de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4bb4      	ldr	r3, [pc, #720]	@ (80033b8 <UART_SetConfig+0x300>)
 80030e8:	4013      	ands	r3, r2
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	6812      	ldr	r2, [r2, #0]
 80030ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4aa9      	ldr	r2, [pc, #676]	@ (80033bc <UART_SetConfig+0x304>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003120:	4313      	orrs	r3, r2
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003134:	430a      	orrs	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4aa0      	ldr	r2, [pc, #640]	@ (80033c0 <UART_SetConfig+0x308>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d126      	bne.n	8003190 <UART_SetConfig+0xd8>
 8003142:	4ba0      	ldr	r3, [pc, #640]	@ (80033c4 <UART_SetConfig+0x30c>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	f003 0303 	and.w	r3, r3, #3
 800314c:	2b03      	cmp	r3, #3
 800314e:	d81b      	bhi.n	8003188 <UART_SetConfig+0xd0>
 8003150:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <UART_SetConfig+0xa0>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	08003169 	.word	0x08003169
 800315c:	08003179 	.word	0x08003179
 8003160:	08003171 	.word	0x08003171
 8003164:	08003181 	.word	0x08003181
 8003168:	2301      	movs	r3, #1
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316e:	e080      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003170:	2302      	movs	r3, #2
 8003172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003176:	e07c      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003178:	2304      	movs	r3, #4
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e078      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003180:	2308      	movs	r3, #8
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e074      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003188:	2310      	movs	r3, #16
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318e:	e070      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a8c      	ldr	r2, [pc, #560]	@ (80033c8 <UART_SetConfig+0x310>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d138      	bne.n	800320c <UART_SetConfig+0x154>
 800319a:	4b8a      	ldr	r3, [pc, #552]	@ (80033c4 <UART_SetConfig+0x30c>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	f003 030c 	and.w	r3, r3, #12
 80031a4:	2b0c      	cmp	r3, #12
 80031a6:	d82d      	bhi.n	8003204 <UART_SetConfig+0x14c>
 80031a8:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <UART_SetConfig+0xf8>)
 80031aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ae:	bf00      	nop
 80031b0:	080031e5 	.word	0x080031e5
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003205 	.word	0x08003205
 80031bc:	08003205 	.word	0x08003205
 80031c0:	080031f5 	.word	0x080031f5
 80031c4:	08003205 	.word	0x08003205
 80031c8:	08003205 	.word	0x08003205
 80031cc:	08003205 	.word	0x08003205
 80031d0:	080031ed 	.word	0x080031ed
 80031d4:	08003205 	.word	0x08003205
 80031d8:	08003205 	.word	0x08003205
 80031dc:	08003205 	.word	0x08003205
 80031e0:	080031fd 	.word	0x080031fd
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e042      	b.n	8003272 <UART_SetConfig+0x1ba>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e03e      	b.n	8003272 <UART_SetConfig+0x1ba>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fa:	e03a      	b.n	8003272 <UART_SetConfig+0x1ba>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003202:	e036      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320a:	e032      	b.n	8003272 <UART_SetConfig+0x1ba>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a6a      	ldr	r2, [pc, #424]	@ (80033bc <UART_SetConfig+0x304>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d12a      	bne.n	800326c <UART_SetConfig+0x1b4>
 8003216:	4b6b      	ldr	r3, [pc, #428]	@ (80033c4 <UART_SetConfig+0x30c>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003220:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003224:	d01a      	beq.n	800325c <UART_SetConfig+0x1a4>
 8003226:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800322a:	d81b      	bhi.n	8003264 <UART_SetConfig+0x1ac>
 800322c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003230:	d00c      	beq.n	800324c <UART_SetConfig+0x194>
 8003232:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003236:	d815      	bhi.n	8003264 <UART_SetConfig+0x1ac>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <UART_SetConfig+0x18c>
 800323c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003240:	d008      	beq.n	8003254 <UART_SetConfig+0x19c>
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x1ac>
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324a:	e012      	b.n	8003272 <UART_SetConfig+0x1ba>
 800324c:	2302      	movs	r3, #2
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003252:	e00e      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325a:	e00a      	b.n	8003272 <UART_SetConfig+0x1ba>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003262:	e006      	b.n	8003272 <UART_SetConfig+0x1ba>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800326a:	e002      	b.n	8003272 <UART_SetConfig+0x1ba>
 800326c:	2310      	movs	r3, #16
 800326e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a51      	ldr	r2, [pc, #324]	@ (80033bc <UART_SetConfig+0x304>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d17a      	bne.n	8003372 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800327c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003280:	2b08      	cmp	r3, #8
 8003282:	d824      	bhi.n	80032ce <UART_SetConfig+0x216>
 8003284:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <UART_SetConfig+0x1d4>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032cf 	.word	0x080032cf
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032cf 	.word	0x080032cf
 800329c:	080032bf 	.word	0x080032bf
 80032a0:	080032cf 	.word	0x080032cf
 80032a4:	080032cf 	.word	0x080032cf
 80032a8:	080032cf 	.word	0x080032cf
 80032ac:	080032c7 	.word	0x080032c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b0:	f7fe fda2 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 80032b4:	61f8      	str	r0, [r7, #28]
        break;
 80032b6:	e010      	b.n	80032da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b8:	4b44      	ldr	r3, [pc, #272]	@ (80033cc <UART_SetConfig+0x314>)
 80032ba:	61fb      	str	r3, [r7, #28]
        break;
 80032bc:	e00d      	b.n	80032da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032be:	f7fe fd03 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80032c2:	61f8      	str	r0, [r7, #28]
        break;
 80032c4:	e009      	b.n	80032da <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ca:	61fb      	str	r3, [r7, #28]
        break;
 80032cc:	e005      	b.n	80032da <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8107 	beq.w	80034f0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d305      	bcc.n	80032fe <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d903      	bls.n	8003306 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003304:	e0f4      	b.n	80034f0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2200      	movs	r2, #0
 800330a:	461c      	mov	r4, r3
 800330c:	4615      	mov	r5, r2
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	022b      	lsls	r3, r5, #8
 8003318:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800331c:	0222      	lsls	r2, r4, #8
 800331e:	68f9      	ldr	r1, [r7, #12]
 8003320:	6849      	ldr	r1, [r1, #4]
 8003322:	0849      	lsrs	r1, r1, #1
 8003324:	2000      	movs	r0, #0
 8003326:	4688      	mov	r8, r1
 8003328:	4681      	mov	r9, r0
 800332a:	eb12 0a08 	adds.w	sl, r2, r8
 800332e:	eb43 0b09 	adc.w	fp, r3, r9
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003340:	4650      	mov	r0, sl
 8003342:	4659      	mov	r1, fp
 8003344:	f7fc ff42 	bl	80001cc <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003356:	d308      	bcc.n	800336a <UART_SetConfig+0x2b2>
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800335e:	d204      	bcs.n	800336a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	60da      	str	r2, [r3, #12]
 8003368:	e0c2      	b.n	80034f0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003370:	e0be      	b.n	80034f0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800337a:	d16a      	bne.n	8003452 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800337c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003380:	2b08      	cmp	r3, #8
 8003382:	d834      	bhi.n	80033ee <UART_SetConfig+0x336>
 8003384:	a201      	add	r2, pc, #4	@ (adr r2, 800338c <UART_SetConfig+0x2d4>)
 8003386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800338a:	bf00      	nop
 800338c:	080033b1 	.word	0x080033b1
 8003390:	080033d1 	.word	0x080033d1
 8003394:	080033d9 	.word	0x080033d9
 8003398:	080033ef 	.word	0x080033ef
 800339c:	080033df 	.word	0x080033df
 80033a0:	080033ef 	.word	0x080033ef
 80033a4:	080033ef 	.word	0x080033ef
 80033a8:	080033ef 	.word	0x080033ef
 80033ac:	080033e7 	.word	0x080033e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b0:	f7fe fd22 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 80033b4:	61f8      	str	r0, [r7, #28]
        break;
 80033b6:	e020      	b.n	80033fa <UART_SetConfig+0x342>
 80033b8:	efff69f3 	.word	0xefff69f3
 80033bc:	40008000 	.word	0x40008000
 80033c0:	40013800 	.word	0x40013800
 80033c4:	40021000 	.word	0x40021000
 80033c8:	40004400 	.word	0x40004400
 80033cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7fe fd28 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 80033d4:	61f8      	str	r0, [r7, #28]
        break;
 80033d6:	e010      	b.n	80033fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b4c      	ldr	r3, [pc, #304]	@ (800350c <UART_SetConfig+0x454>)
 80033da:	61fb      	str	r3, [r7, #28]
        break;
 80033dc:	e00d      	b.n	80033fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7fe fc73 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 80033e2:	61f8      	str	r0, [r7, #28]
        break;
 80033e4:	e009      	b.n	80033fa <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ea:	61fb      	str	r3, [r7, #28]
        break;
 80033ec:	e005      	b.n	80033fa <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d077      	beq.n	80034f0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005a      	lsls	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d916      	bls.n	800344a <UART_SetConfig+0x392>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003422:	d212      	bcs.n	800344a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f023 030f 	bic.w	r3, r3, #15
 800342c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	b29a      	uxth	r2, r3
 800343a:	8afb      	ldrh	r3, [r7, #22]
 800343c:	4313      	orrs	r3, r2
 800343e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	8afa      	ldrh	r2, [r7, #22]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e052      	b.n	80034f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003450:	e04e      	b.n	80034f0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003452:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003456:	2b08      	cmp	r3, #8
 8003458:	d827      	bhi.n	80034aa <UART_SetConfig+0x3f2>
 800345a:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <UART_SetConfig+0x3a8>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	08003485 	.word	0x08003485
 8003464:	0800348d 	.word	0x0800348d
 8003468:	08003495 	.word	0x08003495
 800346c:	080034ab 	.word	0x080034ab
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034ab 	.word	0x080034ab
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe fcb8 	bl	8001df8 <HAL_RCC_GetPCLK1Freq>
 8003488:	61f8      	str	r0, [r7, #28]
        break;
 800348a:	e014      	b.n	80034b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7fe fcca 	bl	8001e24 <HAL_RCC_GetPCLK2Freq>
 8003490:	61f8      	str	r0, [r7, #28]
        break;
 8003492:	e010      	b.n	80034b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b1d      	ldr	r3, [pc, #116]	@ (800350c <UART_SetConfig+0x454>)
 8003496:	61fb      	str	r3, [r7, #28]
        break;
 8003498:	e00d      	b.n	80034b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7fe fc15 	bl	8001cc8 <HAL_RCC_GetSysClockFreq>
 800349e:	61f8      	str	r0, [r7, #28]
        break;
 80034a0:	e009      	b.n	80034b6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a6:	61fb      	str	r3, [r7, #28]
        break;
 80034a8:	e005      	b.n	80034b6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034b4:	bf00      	nop
    }

    if (pclk != 0U)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d019      	beq.n	80034f0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	085a      	lsrs	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	441a      	add	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	d909      	bls.n	80034ea <UART_SetConfig+0x432>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034dc:	d205      	bcs.n	80034ea <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e002      	b.n	80034f0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	@ 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	00f42400 	.word	0x00f42400

08003510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	f003 0308 	and.w	r3, r3, #8
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003582:	f003 0304 	and.w	r3, r3, #4
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a4:	f003 0310 	and.w	r3, r3, #16
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01a      	beq.n	8003626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800360e:	d10a      	bne.n	8003626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	605a      	str	r2, [r3, #4]
  }
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b098      	sub	sp, #96	@ 0x60
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003664:	f7fd fadc 	bl	8000c20 <HAL_GetTick>
 8003668:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0308 	and.w	r3, r3, #8
 8003674:	2b08      	cmp	r3, #8
 8003676:	d12e      	bne.n	80036d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003678:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003680:	2200      	movs	r2, #0
 8003682:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f88c 	bl	80037a4 <UART_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d021      	beq.n	80036d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e6      	bne.n	8003692 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e062      	b.n	800379c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d149      	bne.n	8003778 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ec:	2200      	movs	r2, #0
 80036ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f856 	bl	80037a4 <UART_WaitOnFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d03c      	beq.n	8003778 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	e853 3f00 	ldrex	r3, [r3]
 800370a:	623b      	str	r3, [r7, #32]
   return(result);
 800370c:	6a3b      	ldr	r3, [r7, #32]
 800370e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	461a      	mov	r2, r3
 800371a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800371c:	633b      	str	r3, [r7, #48]	@ 0x30
 800371e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e6      	bne.n	80036fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3308      	adds	r3, #8
 8003736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3308      	adds	r3, #8
 800374e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003750:	61fa      	str	r2, [r7, #28]
 8003752:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003754:	69b9      	ldr	r1, [r7, #24]
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	e841 2300 	strex	r3, r2, [r1]
 800375c:	617b      	str	r3, [r7, #20]
   return(result);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e5      	bne.n	8003730 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2220      	movs	r2, #32
 8003768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e011      	b.n	800379c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3758      	adds	r7, #88	@ 0x58
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b4:	e049      	b.n	800384a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037bc:	d045      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037be:	f7fd fa2f 	bl	8000c20 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d101      	bne.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e048      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d031      	beq.n	800384a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b08      	cmp	r3, #8
 80037f2:	d110      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2208      	movs	r2, #8
 80037fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 f838 	bl	8003872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2208      	movs	r2, #8
 8003806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e029      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69db      	ldr	r3, [r3, #28]
 800381c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003820:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003824:	d111      	bne.n	800384a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800382e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f000 f81e 	bl	8003872 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e00f      	b.n	800386a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4013      	ands	r3, r2
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	429a      	cmp	r2, r3
 8003866:	d0a6      	beq.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003872:	b480      	push	{r7}
 8003874:	b095      	sub	sp, #84	@ 0x54
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003882:	e853 3f00 	ldrex	r3, [r3]
 8003886:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800388e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003898:	643b      	str	r3, [r7, #64]	@ 0x40
 800389a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800389e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038a0:	e841 2300 	strex	r3, r2, [r1]
 80038a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e6      	bne.n	800387a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	3308      	adds	r3, #8
 80038b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	e853 3f00 	ldrex	r3, [r3]
 80038ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f023 0301 	bic.w	r3, r3, #1
 80038c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	3308      	adds	r3, #8
 80038ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038d4:	e841 2300 	strex	r3, r2, [r1]
 80038d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1e5      	bne.n	80038ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d118      	bne.n	800391a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f023 0310 	bic.w	r3, r3, #16
 80038fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6979      	ldr	r1, [r7, #20]
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	613b      	str	r3, [r7, #16]
   return(result);
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e6      	bne.n	80038e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800392e:	bf00      	nop
 8003930:	3754      	adds	r7, #84	@ 0x54
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <memset>:
 800393a:	4402      	add	r2, r0
 800393c:	4603      	mov	r3, r0
 800393e:	4293      	cmp	r3, r2
 8003940:	d100      	bne.n	8003944 <memset+0xa>
 8003942:	4770      	bx	lr
 8003944:	f803 1b01 	strb.w	r1, [r3], #1
 8003948:	e7f9      	b.n	800393e <memset+0x4>
	...

0800394c <__libc_init_array>:
 800394c:	b570      	push	{r4, r5, r6, lr}
 800394e:	4d0d      	ldr	r5, [pc, #52]	@ (8003984 <__libc_init_array+0x38>)
 8003950:	4c0d      	ldr	r4, [pc, #52]	@ (8003988 <__libc_init_array+0x3c>)
 8003952:	1b64      	subs	r4, r4, r5
 8003954:	10a4      	asrs	r4, r4, #2
 8003956:	2600      	movs	r6, #0
 8003958:	42a6      	cmp	r6, r4
 800395a:	d109      	bne.n	8003970 <__libc_init_array+0x24>
 800395c:	4d0b      	ldr	r5, [pc, #44]	@ (800398c <__libc_init_array+0x40>)
 800395e:	4c0c      	ldr	r4, [pc, #48]	@ (8003990 <__libc_init_array+0x44>)
 8003960:	f000 f818 	bl	8003994 <_init>
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	2600      	movs	r6, #0
 800396a:	42a6      	cmp	r6, r4
 800396c:	d105      	bne.n	800397a <__libc_init_array+0x2e>
 800396e:	bd70      	pop	{r4, r5, r6, pc}
 8003970:	f855 3b04 	ldr.w	r3, [r5], #4
 8003974:	4798      	blx	r3
 8003976:	3601      	adds	r6, #1
 8003978:	e7ee      	b.n	8003958 <__libc_init_array+0xc>
 800397a:	f855 3b04 	ldr.w	r3, [r5], #4
 800397e:	4798      	blx	r3
 8003980:	3601      	adds	r6, #1
 8003982:	e7f2      	b.n	800396a <__libc_init_array+0x1e>
 8003984:	08003a00 	.word	0x08003a00
 8003988:	08003a00 	.word	0x08003a00
 800398c:	08003a00 	.word	0x08003a00
 8003990:	08003a04 	.word	0x08003a04

08003994 <_init>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	bf00      	nop
 8003998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399a:	bc08      	pop	{r3}
 800399c:	469e      	mov	lr, r3
 800399e:	4770      	bx	lr

080039a0 <_fini>:
 80039a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a2:	bf00      	nop
 80039a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a6:	bc08      	pop	{r3}
 80039a8:	469e      	mov	lr, r3
 80039aa:	4770      	bx	lr
