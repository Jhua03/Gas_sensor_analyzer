
Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800c248  0800c248  0000d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6d0  0800c6d0  0000e1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6d0  0800c6d0  0000d6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6d8  0800c6d8  0000e1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6d8  0800c6d8  0000d6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c6dc  0800c6dc  0000d6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800c6e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ee40  200001e4  0800c8c4  0000e1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f024  0800c8c4  0000f024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f98  00000000  00000000  0000e214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b70  00000000  00000000  000241ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00026d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000109a  00000000  00000000  00028250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023cc8  00000000  00000000  000292ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a51  00000000  00000000  0004cfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dec32  00000000  00000000  00064a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007020  00000000  00000000  00143678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0014a698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c22c 	.word	0x0800c22c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800c22c 	.word	0x0800c22c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <ADC_to_Voltage>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//ADC FUNCTIONS
float ADC_to_Voltage(uint32_t adc_value)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	int32_t differential_value = (int32_t)adc_value -29015;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f5a3 43e2 	sub.w	r3, r3, #28928	@ 0x7100
 8000ff2:	3b57      	subs	r3, #87	@ 0x57
 8000ff4:	60fb      	str	r3, [r7, #12]
	return ((float)differential_value / 29015) * ADC_VREF;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001000:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001020 <ADC_to_Voltage+0x3c>
 8001004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001008:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800100c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001010:	eeb0 0a67 	vmov.f32	s0, s15
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	46e2ae00 	.word	0x46e2ae00

08001024 <AD5761_Read>:
        double v_out = sine_value * V_OUT_RANGE; // Scale sine wave to desired voltage range
        uint16_t dac_value = (uint16_t)((((v_out/VREF)+C)/M)*(65535));
        sine_wave[i] = dac_value;
    }
}
void AD5761_Read(uint8_t reg, uint16_t value) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af02      	add	r7, sp, #8
 800102a:	4603      	mov	r3, r0
 800102c:	460a      	mov	r2, r1
 800102e:	71fb      	strb	r3, [r7, #7]
 8001030:	4613      	mov	r3, r2
 8001032:	80bb      	strh	r3, [r7, #4]

    uint8_t nop[3]= {(uint8_t)0x0,(uint8_t)0x0,(uint8_t)0x0};
 8001034:	4a21      	ldr	r2, [pc, #132]	@ (80010bc <AD5761_Read+0x98>)
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	4611      	mov	r1, r2
 800103e:	8019      	strh	r1, [r3, #0]
 8001040:	3302      	adds	r3, #2
 8001042:	0c12      	lsrs	r2, r2, #16
 8001044:	701a      	strb	r2, [r3, #0]

	uint8_t txData[3];
    txData[0] = reg;
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	723b      	strb	r3, [r7, #8]
    txData[1] = (value & 0xFF00) >> 8;
 800104a:	88bb      	ldrh	r3, [r7, #4]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b2db      	uxtb	r3, r3
 8001052:	727b      	strb	r3, [r7, #9]
    txData[2] = (value & 0x00FF) >> 0;
 8001054:	88bb      	ldrh	r3, [r7, #4]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	72bb      	strb	r3, [r7, #10]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);				 // CS Low
 800105a:	2200      	movs	r2, #0
 800105c:	2110      	movs	r1, #16
 800105e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001062:	f003 f8f9 	bl	8004258 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, txData, 3, HAL_MAX_DELAY);  				 // Transmit data
 8001066:	f107 0108 	add.w	r1, r7, #8
 800106a:	f04f 33ff 	mov.w	r3, #4294967295
 800106e:	2203      	movs	r2, #3
 8001070:	4813      	ldr	r0, [pc, #76]	@ (80010c0 <AD5761_Read+0x9c>)
 8001072:	f004 fb48 	bl	8005706 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   					// CS High
 8001076:	2201      	movs	r2, #1
 8001078:	2110      	movs	r1, #16
 800107a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107e:	f003 f8eb 	bl	8004258 <HAL_GPIO_WritePin>

    HAL_Delay(10);
 8001082:	200a      	movs	r0, #10
 8001084:	f001 f926 	bl	80022d4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); 				// CS Low
 8001088:	2200      	movs	r2, #0
 800108a:	2110      	movs	r1, #16
 800108c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001090:	f003 f8e2 	bl	8004258 <HAL_GPIO_WritePin>
    HAL_SPI_TransmitReceive(&hspi3, nop, rxData, 3,HAL_MAX_DELAY);   	// Transmit_Receive data
 8001094:	f107 010c 	add.w	r1, r7, #12
 8001098:	f04f 33ff 	mov.w	r3, #4294967295
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2303      	movs	r3, #3
 80010a0:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <AD5761_Read+0xa0>)
 80010a2:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <AD5761_Read+0x9c>)
 80010a4:	f004 fca4 	bl	80059f0 <HAL_SPI_TransmitReceive>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);					 // CS High
 80010a8:	2201      	movs	r2, #1
 80010aa:	2110      	movs	r1, #16
 80010ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b0:	f003 f8d2 	bl	8004258 <HAL_GPIO_WritePin>


}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	0800c248 	.word	0x0800c248
 80010c0:	200002ac 	.word	0x200002ac
 80010c4:	2000ee9c 	.word	0x2000ee9c

080010c8 <AD5761_Write>:

void AD5761_Write(uint8_t reg, uint16_t value) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	80bb      	strh	r3, [r7, #4]
    uint8_t txData[3];
    txData[0] = reg;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	733b      	strb	r3, [r7, #12]
    txData[1] = (value & 0xFF00) >> 8;
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	0a1b      	lsrs	r3, r3, #8
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	737b      	strb	r3, [r7, #13]
    txData[2] = (value & 0x00FF) >> 0;
 80010e6:	88bb      	ldrh	r3, [r7, #4]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	73bb      	strb	r3, [r7, #14]


    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // CS Low
 80010ec:	2200      	movs	r2, #0
 80010ee:	2110      	movs	r1, #16
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f4:	f003 f8b0 	bl	8004258 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, txData, 3, HAL_MAX_DELAY);   // Transmit data
 80010f8:	f107 010c 	add.w	r1, r7, #12
 80010fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001100:	2203      	movs	r2, #3
 8001102:	4806      	ldr	r0, [pc, #24]	@ (800111c <AD5761_Write+0x54>)
 8001104:	f004 faff 	bl	8005706 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);   // CS High
 8001108:	2201      	movs	r2, #1
 800110a:	2110      	movs	r1, #16
 800110c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001110:	f003 f8a2 	bl	8004258 <HAL_GPIO_WritePin>


}
 8001114:	bf00      	nop
 8001116:	3710      	adds	r7, #16
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002ac 	.word	0x200002ac

08001120 <AD5761_Init>:

void AD5761_Init(void) {
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0

	AD5761_Write(0x0,0x0);
 8001124:	2100      	movs	r1, #0
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ffce 	bl	80010c8 <AD5761_Write>
	AD5761_Write(Reset,(uint16_t)0x0);		// Software Data Reset
 800112c:	230f      	movs	r3, #15
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffc9 	bl	80010c8 <AD5761_Write>
	HAL_Delay(10);
 8001136:	200a      	movs	r0, #10
 8001138:	f001 f8cc 	bl	80022d4 <HAL_Delay>
    AD5761_Write(CRaddress, CRconfig);		// Set to Bipolar mode, +/- 3V range
 800113c:	2304      	movs	r3, #4
 800113e:	f240 222d 	movw	r2, #557	@ 0x22d
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffbf 	bl	80010c8 <AD5761_Write>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <HandleAlertCondition>:
void HandleAlertCondition(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0


	AD5761_Read(Read, (uint16_t)0x000);
 8001152:	230c      	movs	r3, #12
 8001154:	2100      	movs	r1, #0
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff64 	bl	8001024 <AD5761_Read>

}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]

	 if (GPIO_Pin == GPIO_PIN_11)
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x16>
	 	    {
	 	        // Handle the ALERT condition
	 	        HandleAlertCondition();
 8001172:	f7ff ffec 	bl	800114e <HandleAlertCondition>
	 	    }
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001180:	b5b0      	push	{r4, r5, r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f001 f830 	bl	80021ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f929 	bl	80013e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 fb3b 	bl	8001808 <MX_GPIO_Init>
  MX_DMA_Init();
 8001192:	f000 fb13 	bl	80017bc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001196:	f000 fae1 	bl	800175c <MX_USART2_UART_Init>
  MX_SPI3_Init();
 800119a:	f000 f9f5 	bl	8001588 <MX_SPI3_Init>
  MX_TIM1_Init();
 800119e:	f000 fa31 	bl	8001604 <MX_TIM1_Init>
  MX_ADC1_Init();
 80011a2:	f000 f96f 	bl	8001484 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  AD5761_Init();    						//AD5761 Initiallize (Software Data Reset and Control register write)
 80011a6:	f7ff ffbb 	bl	8001120 <AD5761_Init>
  AD5761_Read(Read,(uint16_t)0x0);			//Read from control register (0x4)
 80011aa:	230c      	movs	r3, #12
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff38 	bl	8001024 <AD5761_Read>
  HAL_UART_Receive_DMA(&huart2, rx_buf,5);
 80011b4:	2205      	movs	r2, #5
 80011b6:	497e      	ldr	r1, [pc, #504]	@ (80013b0 <main+0x230>)
 80011b8:	487e      	ldr	r0, [pc, #504]	@ (80013b4 <main+0x234>)
 80011ba:	f006 f81f 	bl	80071fc <HAL_UART_Receive_DMA>
//  uint16_t dac_value = (uint16_t)((((VOUT/VREF)+C)/M)*(65535));
//  AD5761_Write((uint8_t)DAC_update_address, dac_value);  	//Write and update DAC register (0x3)
//  //  AD5761_Read((uint8_t)0x0B,(uint16_t)0x0);				//Read DAC register (0x3)


  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80011be:	217f      	movs	r1, #127	@ 0x7f
 80011c0:	487d      	ldr	r0, [pc, #500]	@ (80013b8 <main+0x238>)
 80011c2:	f002 fb37 	bl	8003834 <HAL_ADCEx_Calibration_Start>
  HAL_TIM_Base_Start(&htim1);				 // Timer for ADC updates
 80011c6:	487d      	ldr	r0, [pc, #500]	@ (80013bc <main+0x23c>)
 80011c8:	f004 fff0 	bl	80061ac <HAL_TIM_Base_Start>
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80011cc:	2100      	movs	r1, #0
 80011ce:	487b      	ldr	r0, [pc, #492]	@ (80013bc <main+0x23c>)
 80011d0:	f005 f89a 	bl	8006308 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, time_interval);
 80011d4:	4b7a      	ldr	r3, [pc, #488]	@ (80013c0 <main+0x240>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	497a      	ldr	r1, [pc, #488]	@ (80013c4 <main+0x244>)
 80011dc:	4876      	ldr	r0, [pc, #472]	@ (80013b8 <main+0x238>)
 80011de:	f001 fbf5 	bl	80029cc <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

      while (1)
  {
    	  while(state == 1){
 80011e2:	e0d2      	b.n	800138a <main+0x20a>
    	    float range = p_lim - n_lim;
 80011e4:	4b78      	ldr	r3, [pc, #480]	@ (80013c8 <main+0x248>)
 80011e6:	ed93 7a00 	vldr	s14, [r3]
 80011ea:	4b78      	ldr	r3, [pc, #480]	@ (80013cc <main+0x24c>)
 80011ec:	edd3 7a00 	vldr	s15, [r3]
 80011f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f4:	edc7 7a06 	vstr	s15, [r7, #24]
    	    int steps = (int)(range / step_size);
 80011f8:	4b75      	ldr	r3, [pc, #468]	@ (80013d0 <main+0x250>)
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	edd7 6a06 	vldr	s13, [r7, #24]
 8001202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120a:	ee17 3a90 	vmov	r3, s15
 800120e:	617b      	str	r3, [r7, #20]
    	    for (int i = 0; i < steps; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	e04e      	b.n	80012b4 <main+0x134>
    	    	if(state == 0)
 8001216:	4b6f      	ldr	r3, [pc, #444]	@ (80013d4 <main+0x254>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d04f      	beq.n	80012be <main+0x13e>
    	    		break;
    	    	float v_out = n_lim + i*step_size;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001228:	4b69      	ldr	r3, [pc, #420]	@ (80013d0 <main+0x250>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001232:	4b66      	ldr	r3, [pc, #408]	@ (80013cc <main+0x24c>)
 8001234:	edd3 7a00 	vldr	s15, [r3]
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	edc7 7a04 	vstr	s15, [r7, #16]
    	      	uint16_t dac_value = (uint16_t)((((v_out/VREF)+C)/M)*(65535));
 8001240:	6938      	ldr	r0, [r7, #16]
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b63      	ldr	r3, [pc, #396]	@ (80013d8 <main+0x258>)
 800124c:	f7ff fafe 	bl	800084c <__aeabi_ddiv>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800125c:	4b5f      	ldr	r3, [pc, #380]	@ (80013dc <main+0x25c>)
 800125e:	f7ff f815 	bl	800028c <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	a34b      	add	r3, pc, #300	@ (adr r3, 8001398 <main+0x218>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff faec 	bl	800084c <__aeabi_ddiv>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a348      	add	r3, pc, #288	@ (adr r3, 80013a0 <main+0x220>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f9b9 	bl	80005f8 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fc8b 	bl	8000ba8 <__aeabi_d2uiz>
 8001292:	4603      	mov	r3, r0
 8001294:	81fb      	strh	r3, [r7, #14]
    	      	AD5761_Write((uint8_t)DAC_update_address, dac_value);
 8001296:	2203      	movs	r2, #3
 8001298:	89fb      	ldrh	r3, [r7, #14]
 800129a:	4619      	mov	r1, r3
 800129c:	4610      	mov	r0, r2
 800129e:	f7ff ff13 	bl	80010c8 <AD5761_Write>
    	      	HAL_Delay(time_interval+1);
 80012a2:	4b47      	ldr	r3, [pc, #284]	@ (80013c0 <main+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 f813 	bl	80022d4 <HAL_Delay>
    	    for (int i = 0; i < steps; i++) {
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbac      	blt.n	8001216 <main+0x96>
 80012bc:	e000      	b.n	80012c0 <main+0x140>
    	    		break;
 80012be:	bf00      	nop
    	    }
    	    if (n_lim + steps * step_size-0.1 <= p_lim && state == 1) {
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <main+0x250>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d4:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <main+0x24c>)
 80012d6:	edd3 7a00 	vldr	s15, [r3]
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	ee17 0a90 	vmov	r0, s15
 80012e2:	f7ff f931 	bl	8000548 <__aeabi_f2d>
 80012e6:	a330      	add	r3, pc, #192	@ (adr r3, 80013a8 <main+0x228>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7fe ffcc 	bl	8000288 <__aeabi_dsub>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4614      	mov	r4, r2
 80012f6:	461d      	mov	r5, r3
 80012f8:	4b33      	ldr	r3, [pc, #204]	@ (80013c8 <main+0x248>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4602      	mov	r2, r0
 8001304:	460b      	mov	r3, r1
 8001306:	4620      	mov	r0, r4
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff fbf1 	bl	8000af0 <__aeabi_dcmple>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d037      	beq.n	8001384 <main+0x204>
 8001314:	4b2f      	ldr	r3, [pc, #188]	@ (80013d4 <main+0x254>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d133      	bne.n	8001384 <main+0x204>
    	      	float v_out = p_lim;
 800131c:	4b2a      	ldr	r3, [pc, #168]	@ (80013c8 <main+0x248>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60bb      	str	r3, [r7, #8]
    	      	uint16_t dac_value = (uint16_t)((((v_out/VREF) + C) / M) * 65535);
 8001322:	68b8      	ldr	r0, [r7, #8]
 8001324:	f7ff f910 	bl	8000548 <__aeabi_f2d>
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b2a      	ldr	r3, [pc, #168]	@ (80013d8 <main+0x258>)
 800132e:	f7ff fa8d 	bl	800084c <__aeabi_ddiv>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800133e:	4b27      	ldr	r3, [pc, #156]	@ (80013dc <main+0x25c>)
 8001340:	f7fe ffa4 	bl	800028c <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	a312      	add	r3, pc, #72	@ (adr r3, 8001398 <main+0x218>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	a310      	add	r3, pc, #64	@ (adr r3, 80013a0 <main+0x220>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff f948 	bl	80005f8 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc1a 	bl	8000ba8 <__aeabi_d2uiz>
 8001374:	4603      	mov	r3, r0
 8001376:	80fb      	strh	r3, [r7, #6]
    	      	AD5761_Write((uint8_t)DAC_update_address, dac_value);
 8001378:	2203      	movs	r2, #3
 800137a:	88fb      	ldrh	r3, [r7, #6]
 800137c:	4619      	mov	r1, r3
 800137e:	4610      	mov	r0, r2
 8001380:	f7ff fea2 	bl	80010c8 <AD5761_Write>
    	    }
    	    state = 0;
 8001384:	4b13      	ldr	r3, [pc, #76]	@ (80013d4 <main+0x254>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
    	  while(state == 1){
 800138a:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <main+0x254>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f43f af28 	beq.w	80011e4 <main+0x64>
 8001394:	e7f9      	b.n	800138a <main+0x20a>
 8001396:	bf00      	nop
 8001398:	33333333 	.word	0x33333333
 800139c:	40033333 	.word	0x40033333
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40efffe0 	.word	0x40efffe0
 80013a8:	9999999a 	.word	0x9999999a
 80013ac:	3fb99999 	.word	0x3fb99999
 80013b0:	2000eec4 	.word	0x2000eec4
 80013b4:	2000035c 	.word	0x2000035c
 80013b8:	20000200 	.word	0x20000200
 80013bc:	20000310 	.word	0x20000310
 80013c0:	20000000 	.word	0x20000000
 80013c4:	2000042c 	.word	0x2000042c
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000004 	.word	0x20000004
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	2000eecc 	.word	0x2000eecc
 80013d8:	40040000 	.word	0x40040000
 80013dc:	3ff33333 	.word	0x3ff33333

080013e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b096      	sub	sp, #88	@ 0x58
 80013e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0314 	add.w	r3, r7, #20
 80013ea:	2244      	movs	r2, #68	@ 0x44
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f008 f9c7 	bl	8009782 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001402:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001406:	f002 ff65 	bl	80042d4 <HAL_PWREx_ControlVoltageScaling>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001410:	f000 fbae 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001414:	2302      	movs	r3, #2
 8001416:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141e:	2310      	movs	r3, #16
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
 8001424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001426:	2302      	movs	r3, #2
 8001428:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800142e:	230a      	movs	r3, #10
 8001430:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001432:	2307      	movs	r3, #7
 8001434:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001436:	2302      	movs	r3, #2
 8001438:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4618      	mov	r0, r3
 8001444:	f002 ff9c 	bl	8004380 <HAL_RCC_OscConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800144e:	f000 fb8f 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2303      	movs	r3, #3
 8001458:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	2104      	movs	r1, #4
 800146a:	4618      	mov	r0, r3
 800146c:	f003 fb9c 	bl	8004ba8 <HAL_RCC_ClockConfig>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001476:	f000 fb7b 	bl	8001b70 <Error_Handler>
  }
}
 800147a:	bf00      	nop
 800147c:	3758      	adds	r7, #88	@ 0x58
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
	...

08001484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
 8001498:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800149a:	4b37      	ldr	r3, [pc, #220]	@ (8001578 <MX_ADC1_Init+0xf4>)
 800149c:	4a37      	ldr	r2, [pc, #220]	@ (800157c <MX_ADC1_Init+0xf8>)
 800149e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014a0:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a6:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ac:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014ba:	2204      	movs	r2, #4
 80014bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014cc:	2202      	movs	r2, #2
 80014ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014d0:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 80014d8:	4b27      	ldr	r3, [pc, #156]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014da:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80014de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 80014e0:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014e2:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80014e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014f0:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <MX_ADC1_Init+0xf4>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_ADC1_Init+0xf4>)
 8001500:	221c      	movs	r2, #28
 8001502:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_ADC1_Init+0xf4>)
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_ADC1_Init+0xf4>)
 800150c:	2200      	movs	r2, #0
 800150e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MX_ADC1_Init+0xf4>)
 8001512:	2201      	movs	r2, #1
 8001514:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001516:	4818      	ldr	r0, [pc, #96]	@ (8001578 <MX_ADC1_Init+0xf4>)
 8001518:	f001 f916 	bl	8002748 <HAL_ADC_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8001522:	f000 fb25 	bl	8001b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_ADC1_Init+0xfc>)
 8001528:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800152a:	2306      	movs	r3, #6
 800152c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001532:	237f      	movs	r3, #127	@ 0x7f
 8001534:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001536:	2304      	movs	r3, #4
 8001538:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	@ (8001578 <MX_ADC1_Init+0xf4>)
 8001544:	f001 fb32 	bl	8002bac <HAL_ADC_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800154e:	f000 fb0f 	bl	8001b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001552:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_ADC1_Init+0x100>)
 8001554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001556:	230c      	movs	r3, #12
 8001558:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155a:	463b      	mov	r3, r7
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	@ (8001578 <MX_ADC1_Init+0xf4>)
 8001560:	f001 fb24 	bl	8002bac <HAL_ADC_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 800156a:	f000 fb01 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000200 	.word	0x20000200
 800157c:	50040000 	.word	0x50040000
 8001580:	2e300800 	.word	0x2e300800
 8001584:	2a000400 	.word	0x2a000400

08001588 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_SPI3_Init+0x74>)
 800158e:	4a1c      	ldr	r2, [pc, #112]	@ (8001600 <MX_SPI3_Init+0x78>)
 8001590:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_SPI3_Init+0x74>)
 8001594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001598:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_SPI3_Init+0x74>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a8:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015ae:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015be:	2220      	movs	r2, #32
 80015c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015d6:	2207      	movs	r2, #7
 80015d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_SPI3_Init+0x74>)
 80015e8:	f003 ffea 	bl	80055c0 <HAL_SPI_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80015f2:	f000 fabd 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002ac 	.word	0x200002ac
 8001600:	40003c00 	.word	0x40003c00

08001604 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09a      	sub	sp, #104	@ 0x68
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001624:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
 8001636:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	222c      	movs	r2, #44	@ 0x2c
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f008 f89f 	bl	8009782 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001644:	4b43      	ldr	r3, [pc, #268]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001646:	4a44      	ldr	r2, [pc, #272]	@ (8001758 <MX_TIM1_Init+0x154>)
 8001648:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800164a:	4b42      	ldr	r3, [pc, #264]	@ (8001754 <MX_TIM1_Init+0x150>)
 800164c:	224f      	movs	r2, #79	@ 0x4f
 800164e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b40      	ldr	r3, [pc, #256]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001656:	4b3f      	ldr	r3, [pc, #252]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001658:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800165c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b3d      	ldr	r3, [pc, #244]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001664:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001666:	2200      	movs	r2, #0
 8001668:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800166a:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <MX_TIM1_Init+0x150>)
 800166c:	2280      	movs	r2, #128	@ 0x80
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001670:	4838      	ldr	r0, [pc, #224]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001672:	f004 fd43 	bl	80060fc <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800167c:	f000 fa78 	bl	8001b70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001684:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800168a:	4619      	mov	r1, r3
 800168c:	4831      	ldr	r0, [pc, #196]	@ (8001754 <MX_TIM1_Init+0x150>)
 800168e:	f004 ff93 	bl	80065b8 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001698:	f000 fa6a 	bl	8001b70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800169c:	482d      	ldr	r0, [pc, #180]	@ (8001754 <MX_TIM1_Init+0x150>)
 800169e:	f004 fdd1 	bl	8006244 <HAL_TIM_OC_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016a8:	f000 fa62 	bl	8001b70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ac:	2320      	movs	r3, #32
 80016ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80016bc:	4619      	mov	r1, r3
 80016be:	4825      	ldr	r0, [pc, #148]	@ (8001754 <MX_TIM1_Init+0x150>)
 80016c0:	f005 fbe6 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80016ca:	f000 fa51 	bl	8001b70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80016ce:	2330      	movs	r3, #48	@ 0x30
 80016d0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d6:	2300      	movs	r3, #0
 80016d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016da:	2300      	movs	r3, #0
 80016dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80016ee:	2200      	movs	r2, #0
 80016f0:	4619      	mov	r1, r3
 80016f2:	4818      	ldr	r0, [pc, #96]	@ (8001754 <MX_TIM1_Init+0x150>)
 80016f4:	f004 fee6 	bl	80064c4 <HAL_TIM_OC_ConfigChannel>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80016fe:	f000 fa37 	bl	8001b70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001724:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4807      	ldr	r0, [pc, #28]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001738:	f005 fc10 	bl	8006f5c <HAL_TIMEx_ConfigBreakDeadTime>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001742:	f000 fa15 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001746:	4803      	ldr	r0, [pc, #12]	@ (8001754 <MX_TIM1_Init+0x150>)
 8001748:	f000 fb34 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 800174c:	bf00      	nop
 800174e:	3768      	adds	r7, #104	@ 0x68
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000310 	.word	0x20000310
 8001758:	40012c00 	.word	0x40012c00

0800175c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001760:	4b14      	ldr	r3, [pc, #80]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001762:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <MX_USART2_UART_Init+0x5c>)
 8001764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001766:	4b13      	ldr	r3, [pc, #76]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001768:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800176c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800176e:	4b11      	ldr	r3, [pc, #68]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001774:	4b0f      	ldr	r3, [pc, #60]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800177a:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001780:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001782:	220c      	movs	r2, #12
 8001784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001786:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800178c:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001792:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001798:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800179e:	4805      	ldr	r0, [pc, #20]	@ (80017b4 <MX_USART2_UART_Init+0x58>)
 80017a0:	f005 fc54 	bl	800704c <HAL_UART_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017aa:	f000 f9e1 	bl	8001b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	2000035c 	.word	0x2000035c
 80017b8:	40004400 	.word	0x40004400

080017bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017c2:	4b10      	ldr	r3, [pc, #64]	@ (8001804 <MX_DMA_Init+0x48>)
 80017c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001804 <MX_DMA_Init+0x48>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6493      	str	r3, [r2, #72]	@ 0x48
 80017ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001804 <MX_DMA_Init+0x48>)
 80017d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	200b      	movs	r0, #11
 80017e0:	f002 f963 	bl	8003aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017e4:	200b      	movs	r0, #11
 80017e6:	f002 f97c 	bl	8003ae2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2100      	movs	r1, #0
 80017ee:	2010      	movs	r0, #16
 80017f0:	f002 f95b 	bl	8003aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017f4:	2010      	movs	r0, #16
 80017f6:	f002 f974 	bl	8003ae2 <HAL_NVIC_EnableIRQ>

}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181e:	4b2d      	ldr	r3, [pc, #180]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a2c      	ldr	r2, [pc, #176]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b2a      	ldr	r3, [pc, #168]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b27      	ldr	r3, [pc, #156]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a26      	ldr	r2, [pc, #152]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001852:	4a20      	ldr	r2, [pc, #128]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <MX_GPIO_Init+0xcc>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	2102      	movs	r1, #2
 800186a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186e:	f002 fcf3 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2110      	movs	r1, #16
 8001876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187a:	f002 fced 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 800187e:	2312      	movs	r3, #18
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001898:	f002 fb74 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800189c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4619      	mov	r1, r3
 80018b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b6:	f002 fb65 	bl	8003f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2102      	movs	r1, #2
 80018be:	2028      	movs	r0, #40	@ 0x28
 80018c0:	f002 f8f3 	bl	8003aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018c4:	2028      	movs	r0, #40	@ 0x28
 80018c6:	f002 f90c 	bl	8003ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018ca:	bf00      	nop
 80018cc:	3720      	adds	r7, #32
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08a      	sub	sp, #40	@ 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	c = rx_buf[0];
 80018e0:	4b46      	ldr	r3, [pc, #280]	@ (80019fc <HAL_UART_RxCpltCallback+0x124>)
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <HAL_UART_RxCpltCallback+0x128>)
 80018e6:	701a      	strb	r2, [r3, #0]
//		if(filled == 0)
//			rx_buf[i] = '0';
//	}
//	rx_buf[5] = '\0';
	char *endptr;
	if(c == 'S')
 80018e8:	4b45      	ldr	r3, [pc, #276]	@ (8001a00 <HAL_UART_RxCpltCallback+0x128>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b53      	cmp	r3, #83	@ 0x53
 80018ee:	d103      	bne.n	80018f8 <HAL_UART_RxCpltCallback+0x20>
		state = 1;
 80018f0:	4b44      	ldr	r3, [pc, #272]	@ (8001a04 <HAL_UART_RxCpltCallback+0x12c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	e075      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x10c>
	else if (c == 's'){
 80018f8:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <HAL_UART_RxCpltCallback+0x128>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b73      	cmp	r3, #115	@ 0x73
 80018fe:	d120      	bne.n	8001942 <HAL_UART_RxCpltCallback+0x6a>
		char temp [5];
		for (int i = 1 ; i <6; i++)
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
 8001904:	e00c      	b.n	8001920 <HAL_UART_RxCpltCallback+0x48>
			temp[i-1] = rx_buf[i];
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	3b01      	subs	r3, #1
 800190a:	493c      	ldr	r1, [pc, #240]	@ (80019fc <HAL_UART_RxCpltCallback+0x124>)
 800190c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800190e:	440a      	add	r2, r1
 8001910:	7812      	ldrb	r2, [r2, #0]
 8001912:	3328      	adds	r3, #40	@ 0x28
 8001914:	443b      	add	r3, r7
 8001916:	f803 2c14 	strb.w	r2, [r3, #-20]
		for (int i = 1 ; i <6; i++)
 800191a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191c:	3301      	adds	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	2b05      	cmp	r3, #5
 8001924:	ddef      	ble.n	8001906 <HAL_UART_RxCpltCallback+0x2e>
		step_size = strtof(temp,&endptr);
 8001926:	f107 021c 	add.w	r2, r7, #28
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f007 f8cd 	bl	8008ad0 <strtof>
 8001936:	eef0 7a40 	vmov.f32	s15, s0
 800193a:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <HAL_UART_RxCpltCallback+0x130>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
 8001940:	e050      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x10c>
	}
	else if (c == 't'){
 8001942:	4b2f      	ldr	r3, [pc, #188]	@ (8001a00 <HAL_UART_RxCpltCallback+0x128>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b74      	cmp	r3, #116	@ 0x74
 8001948:	d129      	bne.n	800199e <HAL_UART_RxCpltCallback+0xc6>
		char temp [5];
		for (int i = 1 ; i <6; i++)
 800194a:	2301      	movs	r3, #1
 800194c:	623b      	str	r3, [r7, #32]
 800194e:	e00c      	b.n	800196a <HAL_UART_RxCpltCallback+0x92>
			temp[i-1] = rx_buf[i];
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	3b01      	subs	r3, #1
 8001954:	4929      	ldr	r1, [pc, #164]	@ (80019fc <HAL_UART_RxCpltCallback+0x124>)
 8001956:	6a3a      	ldr	r2, [r7, #32]
 8001958:	440a      	add	r2, r1
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	3328      	adds	r3, #40	@ 0x28
 800195e:	443b      	add	r3, r7
 8001960:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (int i = 1 ; i <6; i++)
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	3301      	adds	r3, #1
 8001968:	623b      	str	r3, [r7, #32]
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	2b05      	cmp	r3, #5
 800196e:	ddef      	ble.n	8001950 <HAL_UART_RxCpltCallback+0x78>
		time_interval = (uint32_t)strtoul(temp, &endptr, 10) *2;
 8001970:	f107 011c 	add.w	r1, r7, #28
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	220a      	movs	r2, #10
 800197a:	4618      	mov	r0, r3
 800197c:	f007 f97a 	bl	8008c74 <strtoul>
 8001980:	4603      	mov	r3, r0
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4a21      	ldr	r2, [pc, #132]	@ (8001a0c <HAL_UART_RxCpltCallback+0x134>)
 8001986:	6013      	str	r3, [r2, #0]
		HAL_ADC_Stop_DMA(&hadc1);
 8001988:	4821      	ldr	r0, [pc, #132]	@ (8001a10 <HAL_UART_RxCpltCallback+0x138>)
 800198a:	f001 f8a3 	bl	8002ad4 <HAL_ADC_Stop_DMA>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, time_interval);
 800198e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a0c <HAL_UART_RxCpltCallback+0x134>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	461a      	mov	r2, r3
 8001994:	491f      	ldr	r1, [pc, #124]	@ (8001a14 <HAL_UART_RxCpltCallback+0x13c>)
 8001996:	481e      	ldr	r0, [pc, #120]	@ (8001a10 <HAL_UART_RxCpltCallback+0x138>)
 8001998:	f001 f818 	bl	80029cc <HAL_ADC_Start_DMA>
 800199c:	e022      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x10c>
	}
	else if(c == '-')
 800199e:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <HAL_UART_RxCpltCallback+0x128>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b2d      	cmp	r3, #45	@ 0x2d
 80019a4:	d10b      	bne.n	80019be <HAL_UART_RxCpltCallback+0xe6>
		n_lim = strtof(rx_buf,&endptr);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4813      	ldr	r0, [pc, #76]	@ (80019fc <HAL_UART_RxCpltCallback+0x124>)
 80019ae:	f007 f88f 	bl	8008ad0 <strtof>
 80019b2:	eef0 7a40 	vmov.f32	s15, s0
 80019b6:	4b18      	ldr	r3, [pc, #96]	@ (8001a18 <HAL_UART_RxCpltCallback+0x140>)
 80019b8:	edc3 7a00 	vstr	s15, [r3]
 80019bc:	e012      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x10c>
	else if(c == 'p')
 80019be:	4b10      	ldr	r3, [pc, #64]	@ (8001a00 <HAL_UART_RxCpltCallback+0x128>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b70      	cmp	r3, #112	@ 0x70
 80019c4:	d103      	bne.n	80019ce <HAL_UART_RxCpltCallback+0xf6>
		state = 0;
 80019c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <HAL_UART_RxCpltCallback+0x12c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	e00a      	b.n	80019e4 <HAL_UART_RxCpltCallback+0x10c>
	else
		p_lim = strtof(rx_buf,&endptr);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4809      	ldr	r0, [pc, #36]	@ (80019fc <HAL_UART_RxCpltCallback+0x124>)
 80019d6:	f007 f87b 	bl	8008ad0 <strtof>
 80019da:	eef0 7a40 	vmov.f32	s15, s0
 80019de:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <HAL_UART_RxCpltCallback+0x144>)
 80019e0:	edc3 7a00 	vstr	s15, [r3]
	//new_V_OUT_RANGE = atof(rx_buf);
	memset(rx_buf, 0, sizeof(rx_buf));
 80019e4:	2205      	movs	r2, #5
 80019e6:	2100      	movs	r1, #0
 80019e8:	4804      	ldr	r0, [pc, #16]	@ (80019fc <HAL_UART_RxCpltCallback+0x124>)
 80019ea:	f007 feca 	bl	8009782 <memset>
	c= '\0';
 80019ee:	4b04      	ldr	r3, [pc, #16]	@ (8001a00 <HAL_UART_RxCpltCallback+0x128>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
	//HAL_UART_Receive_DMA(&huart2, rx_buf,5);
}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	@ 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	2000eec4 	.word	0x2000eec4
 8001a00:	2000eec9 	.word	0x2000eec9
 8001a04:	2000eecc 	.word	0x2000eecc
 8001a08:	2000000c 	.word	0x2000000c
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000200 	.word	0x20000200
 8001a14:	2000042c 	.word	0x2000042c
 8001a18:	20000004 	.word	0x20000004
 8001a1c:	20000008 	.word	0x20000008

08001a20 <HAL_ADC_ConvHalfCpltCallback>:
//Getting ADC values
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8001a20:	b5b0      	push	{r4, r5, r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]

	for(int i =time_interval/2 - 20; i<time_interval/2; i++){
 8001a28:	4b3c      	ldr	r3, [pc, #240]	@ (8001b1c <HAL_ADC_ConvHalfCpltCallback+0xfc>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	085b      	lsrs	r3, r3, #1
 8001a2e:	3b14      	subs	r3, #20
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	e02a      	b.n	8001a8a <HAL_ADC_ConvHalfCpltCallback+0x6a>
		if(i%2 == 0){
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d111      	bne.n	8001a62 <HAL_ADC_ConvHalfCpltCallback+0x42>
			voltage_output += ADC_to_Voltage(adc_buf[i]);
 8001a3e:	4a38      	ldr	r2, [pc, #224]	@ (8001b20 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff facc 	bl	8000fe4 <ADC_to_Voltage>
 8001a4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a50:	4b34      	ldr	r3, [pc, #208]	@ (8001b24 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5a:	4b32      	ldr	r3, [pc, #200]	@ (8001b24 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
 8001a60:	e010      	b.n	8001a84 <HAL_ADC_ConvHalfCpltCallback+0x64>
		}
		else{
			voltage += ADC_to_Voltage(adc_buf[i]);
 8001a62:	4a2f      	ldr	r2, [pc, #188]	@ (8001b20 <HAL_ADC_ConvHalfCpltCallback+0x100>)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff faba 	bl	8000fe4 <ADC_to_Voltage>
 8001a70:	eeb0 7a40 	vmov.f32	s14, s0
 8001a74:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]
	for(int i =time_interval/2 - 20; i<time_interval/2; i++){
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3301      	adds	r3, #1
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_ADC_ConvHalfCpltCallback+0xfc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	085a      	lsrs	r2, r3, #1
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d8ce      	bhi.n	8001a34 <HAL_ADC_ConvHalfCpltCallback+0x14>
		}
	}
	vDAC = voltage/10;
 8001a96:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001a98:	ed93 7a00 	vldr	s14, [r3]
 8001a9c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001aa0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa4:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
	vout = voltage_output/10;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]
	voltage =0;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	@ (8001b28 <HAL_ADC_ConvHalfCpltCallback+0x108>)
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
	voltage_output = 0;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	@ (8001b24 <HAL_ADC_ConvHalfCpltCallback+0x104>)
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
	uart_len = sprintf(uart_buf,"vDAC %.4f vout %.4f\r\n", vDAC, vout);
 8001ace:	4b17      	ldr	r3, [pc, #92]	@ (8001b2c <HAL_ADC_ConvHalfCpltCallback+0x10c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd38 	bl	8000548 <__aeabi_f2d>
 8001ad8:	4604      	mov	r4, r0
 8001ada:	460d      	mov	r5, r1
 8001adc:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_ADC_ConvHalfCpltCallback+0x110>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fd31 	bl	8000548 <__aeabi_f2d>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	e9cd 2300 	strd	r2, r3, [sp]
 8001aee:	4622      	mov	r2, r4
 8001af0:	462b      	mov	r3, r5
 8001af2:	4910      	ldr	r1, [pc, #64]	@ (8001b34 <HAL_ADC_ConvHalfCpltCallback+0x114>)
 8001af4:	4810      	ldr	r0, [pc, #64]	@ (8001b38 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001af6:	f007 fde1 	bl	80096bc <siprintf>
 8001afa:	4603      	mov	r3, r0
 8001afc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b3c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8001afe:	6013      	str	r3, [r2, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, uart_len,HAL_MAX_DELAY);
 8001b00:	4b0e      	ldr	r3, [pc, #56]	@ (8001b3c <HAL_ADC_ConvHalfCpltCallback+0x11c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0a:	490b      	ldr	r1, [pc, #44]	@ (8001b38 <HAL_ADC_ConvHalfCpltCallback+0x118>)
 8001b0c:	480c      	ldr	r0, [pc, #48]	@ (8001b40 <HAL_ADC_ConvHalfCpltCallback+0x120>)
 8001b0e:	f005 faeb 	bl	80070e8 <HAL_UART_Transmit>
}
 8001b12:	bf00      	nop
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	2000042c 	.word	0x2000042c
 8001b24:	2000ee90 	.word	0x2000ee90
 8001b28:	2000ee8c 	.word	0x2000ee8c
 8001b2c:	2000ee94 	.word	0x2000ee94
 8001b30:	2000ee98 	.word	0x2000ee98
 8001b34:	0800c24c 	.word	0x0800c24c
 8001b38:	2000eea0 	.word	0x2000eea0
 8001b3c:	2000eec0 	.word	0x2000eec0
 8001b40:	2000035c 	.word	0x2000035c

08001b44 <HAL_ADC_ConvCpltCallback>:

//End of ADC - Start another one
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
//	//		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
//		}
//	}


	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, time_interval);
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_ADC_ConvCpltCallback+0x20>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4905      	ldr	r1, [pc, #20]	@ (8001b68 <HAL_ADC_ConvCpltCallback+0x24>)
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <HAL_ADC_ConvCpltCallback+0x28>)
 8001b56:	f000 ff39 	bl	80029cc <HAL_ADC_Start_DMA>

}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000
 8001b68:	2000042c 	.word	0x2000042c
 8001b6c:	20000200 	.word	0x20000200

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <Error_Handler+0x8>

08001b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b09e      	sub	sp, #120	@ 0x78
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bdc:	f107 0310 	add.w	r3, r7, #16
 8001be0:	2254      	movs	r2, #84	@ 0x54
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f007 fdcc 	bl	8009782 <memset>
  if(hadc->Instance==ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a3b      	ldr	r2, [pc, #236]	@ (8001cdc <HAL_ADC_MspInit+0x118>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d16e      	bne.n	8001cd2 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bf8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bfa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001c00:	2302      	movs	r3, #2
 8001c02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV4;
 8001c14:	2304      	movs	r3, #4
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f9e4 	bl	8004ff0 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8001c2e:	f7ff ff9f 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c4e:	4a24      	ldr	r2, [pc, #144]	@ (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c56:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60bb      	str	r3, [r7, #8]
 8001c60:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c62:	2360      	movs	r3, #96	@ 0x60
 8001c64:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c66:	230b      	movs	r3, #11
 8001c68:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c72:	4619      	mov	r1, r3
 8001c74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c78:	f002 f984 	bl	8003f84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce8 <HAL_ADC_MspInit+0x124>)
 8001c80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c88:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c94:	4b13      	ldr	r3, [pc, #76]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c96:	2280      	movs	r2, #128	@ 0x80
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001ca4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cac:	2220      	movs	r2, #32
 8001cae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cb6:	480b      	ldr	r0, [pc, #44]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cb8:	f001 ff2e 	bl	8003b18 <HAL_DMA_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001cc2:	f7ff ff55 	bl	8001b70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a06      	ldr	r2, [pc, #24]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cca:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001ccc:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cd2:	bf00      	nop
 8001cd4:	3778      	adds	r7, #120	@ 0x78
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	50040000 	.word	0x50040000
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	20000264 	.word	0x20000264
 8001ce8:	40020008 	.word	0x40020008

08001cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08a      	sub	sp, #40	@ 0x28
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0314 	add.w	r3, r7, #20
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <HAL_SPI_MspInit+0x7c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d127      	bne.n	8001d5e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <HAL_SPI_MspInit+0x80>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d12:	4a16      	ldr	r2, [pc, #88]	@ (8001d6c <HAL_SPI_MspInit+0x80>)
 8001d14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d1a:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <HAL_SPI_MspInit+0x80>)
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <HAL_SPI_MspInit+0x80>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2a:	4a10      	ldr	r2, [pc, #64]	@ (8001d6c <HAL_SPI_MspInit+0x80>)
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d32:	4b0e      	ldr	r3, [pc, #56]	@ (8001d6c <HAL_SPI_MspInit+0x80>)
 8001d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d3e:	2338      	movs	r3, #56	@ 0x38
 8001d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d4e:	2306      	movs	r3, #6
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <HAL_SPI_MspInit+0x84>)
 8001d5a:	f002 f913 	bl	8003f84 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	@ 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40003c00 	.word	0x40003c00
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	48000400 	.word	0x48000400

08001d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	@ (8001dac <HAL_TIM_Base_MspInit+0x38>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10b      	bne.n	8001d9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_TIM_Base_MspInit+0x3c>)
 8001d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40012c00 	.word	0x40012c00
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 030c 	add.w	r3, r7, #12
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <HAL_TIM_MspPostInit+0x68>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d11d      	bne.n	8001e12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_TIM_MspPostInit+0x6c>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dda:	4a11      	ldr	r2, [pc, #68]	@ (8001e20 <HAL_TIM_MspPostInit+0x6c>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_TIM_MspPostInit+0x6c>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001df2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e0e:	f002 f8b9 	bl	8003f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e12:	bf00      	nop
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40012c00 	.word	0x40012c00
 8001e20:	40021000 	.word	0x40021000

08001e24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b09e      	sub	sp, #120	@ 0x78
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e3c:	f107 0310 	add.w	r3, r7, #16
 8001e40:	2254      	movs	r2, #84	@ 0x54
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f007 fc9c 	bl	8009782 <memset>
  if(huart->Instance==USART2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a3c      	ldr	r2, [pc, #240]	@ (8001f40 <HAL_UART_MspInit+0x11c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d171      	bne.n	8001f38 <HAL_UART_MspInit+0x114>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 f8c5 	bl	8004ff0 <HAL_RCCEx_PeriphCLKConfig>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e6c:	f7ff fe80 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e70:	4b34      	ldr	r3, [pc, #208]	@ (8001f44 <HAL_UART_MspInit+0x120>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e74:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <HAL_UART_MspInit+0x120>)
 8001e76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e7c:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <HAL_UART_MspInit+0x120>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e88:	4b2e      	ldr	r3, [pc, #184]	@ (8001f44 <HAL_UART_MspInit+0x120>)
 8001e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f44 <HAL_UART_MspInit+0x120>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e94:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_UART_MspInit+0x120>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ea0:	2304      	movs	r3, #4
 8001ea2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb0:	2307      	movs	r3, #7
 8001eb2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001eb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ebe:	f002 f861 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ec2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001ec6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001edc:	4619      	mov	r1, r3
 8001ede:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ee2:	f002 f84f 	bl	8003f84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ee6:	4b18      	ldr	r3, [pc, #96]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001ee8:	4a18      	ldr	r2, [pc, #96]	@ (8001f4c <HAL_UART_MspInit+0x128>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001eec:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001eee:	2202      	movs	r2, #2
 8001ef0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef2:	4b15      	ldr	r3, [pc, #84]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef8:	4b13      	ldr	r3, [pc, #76]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f00:	2280      	movs	r2, #128	@ 0x80
 8001f02:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f04:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001f10:	4b0d      	ldr	r3, [pc, #52]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f12:	2220      	movs	r2, #32
 8001f14:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f16:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f1c:	480a      	ldr	r0, [pc, #40]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f1e:	f001 fdfb 	bl	8003b18 <HAL_DMA_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001f28:	f7ff fe22 	bl	8001b70 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a06      	ldr	r2, [pc, #24]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f30:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f32:	4a05      	ldr	r2, [pc, #20]	@ (8001f48 <HAL_UART_MspInit+0x124>)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f38:	bf00      	nop
 8001f3a:	3778      	adds	r7, #120	@ 0x78
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40004400 	.word	0x40004400
 8001f44:	40021000 	.word	0x40021000
 8001f48:	200003e4 	.word	0x200003e4
 8001f4c:	4002006c 	.word	0x4002006c

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <NMI_Handler+0x4>

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <MemManage_Handler+0x4>

08001f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 f975 	bl	8002294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <DMA1_Channel1_IRQHandler+0x10>)
 8001fb6:	f001 ff05 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000264 	.word	0x20000264

08001fc4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <DMA1_Channel6_IRQHandler+0x10>)
 8001fca:	f001 fefb 	bl	8003dc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200003e4 	.word	0x200003e4

08001fd8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001fdc:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001fe0:	f002 f952 	bl	8004288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002002:	f007 fc23 	bl	800984c <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
  return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800202a:	bf00      	nop
 800202c:	e7fd      	b.n	800202a <_exit+0x12>

0800202e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	e00a      	b.n	8002056 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002040:	f3af 8000 	nop.w
 8002044:	4601      	mov	r1, r0
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	60ba      	str	r2, [r7, #8]
 800204c:	b2ca      	uxtb	r2, r1
 800204e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3301      	adds	r3, #1
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	dbf0      	blt.n	8002040 <_read+0x12>
  }

  return len;
 800205e:	687b      	ldr	r3, [r7, #4]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002074:	2300      	movs	r3, #0
 8002076:	617b      	str	r3, [r7, #20]
 8002078:	e009      	b.n	800208e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	60ba      	str	r2, [r7, #8]
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3301      	adds	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	429a      	cmp	r2, r3
 8002094:	dbf1      	blt.n	800207a <_write+0x12>
  }
  return len;
 8002096:	687b      	ldr	r3, [r7, #4]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3718      	adds	r7, #24
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_close>:

int _close(int file)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c8:	605a      	str	r2, [r3, #4]
  return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_isatty>:

int _isatty(int file)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020e0:	2301      	movs	r3, #1
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	@ (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	@ (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	@ (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f007 fb88 	bl	800984c <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	@ (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	@ (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20010000 	.word	0x20010000
 8002168:	00000400 	.word	0x00000400
 800216c:	2000eed0 	.word	0x2000eed0
 8002170:	2000f028 	.word	0x2000f028

08002174 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	@ (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002198:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800219c:	f7ff ffea 	bl	8002174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021a0:	480c      	ldr	r0, [pc, #48]	@ (80021d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80021a2:	490d      	ldr	r1, [pc, #52]	@ (80021d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80021a4:	4a0d      	ldr	r2, [pc, #52]	@ (80021dc <LoopForever+0xe>)
  movs r3, #0
 80021a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a8:	e002      	b.n	80021b0 <LoopCopyDataInit>

080021aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ae:	3304      	adds	r3, #4

080021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b4:	d3f9      	bcc.n	80021aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b8:	4c0a      	ldr	r4, [pc, #40]	@ (80021e4 <LoopForever+0x16>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021bc:	e001      	b.n	80021c2 <LoopFillZerobss>

080021be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c0:	3204      	adds	r2, #4

080021c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c4:	d3fb      	bcc.n	80021be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021c6:	f007 fb47 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021ca:	f7fe ffd9 	bl	8001180 <main>

080021ce <LoopForever>:

LoopForever:
    b LoopForever
 80021ce:	e7fe      	b.n	80021ce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80021d0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80021d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021dc:	0800c6e0 	.word	0x0800c6e0
  ldr r2, =_sbss
 80021e0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80021e4:	2000f024 	.word	0x2000f024

080021e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021e8:	e7fe      	b.n	80021e8 <ADC1_IRQHandler>

080021ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f001 fc4d 	bl	8003a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fa:	2000      	movs	r0, #0
 80021fc:	f000 f80e 	bl	800221c <HAL_InitTick>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	71fb      	strb	r3, [r7, #7]
 800220a:	e001      	b.n	8002210 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800220c:	f7ff fcb6 	bl	8001b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002210:	79fb      	ldrb	r3, [r7, #7]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002228:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <HAL_InitTick+0x6c>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d023      	beq.n	8002278 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002230:	4b16      	ldr	r3, [pc, #88]	@ (800228c <HAL_InitTick+0x70>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b14      	ldr	r3, [pc, #80]	@ (8002288 <HAL_InitTick+0x6c>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002242:	fbb2 f3f3 	udiv	r3, r2, r3
 8002246:	4618      	mov	r0, r3
 8002248:	f001 fc59 	bl	8003afe <HAL_SYSTICK_Config>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10f      	bne.n	8002272 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d809      	bhi.n	800226c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f001 fc23 	bl	8003aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002264:	4a0a      	ldr	r2, [pc, #40]	@ (8002290 <HAL_InitTick+0x74>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	e007      	b.n	800227c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e004      	b.n	800227c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e001      	b.n	800227c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000018 	.word	0x20000018
 800228c:	20000010 	.word	0x20000010
 8002290:	20000014 	.word	0x20000014

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_IncTick+0x20>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_IncTick+0x24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <HAL_IncTick+0x24>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000018 	.word	0x20000018
 80022b8:	2000eed4 	.word	0x2000eed4

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	2000eed4 	.word	0x2000eed4

080022d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022dc:	f7ff ffee 	bl	80022bc <HAL_GetTick>
 80022e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ec:	d005      	beq.n	80022fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_Delay+0x44>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4413      	add	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022fa:	bf00      	nop
 80022fc:	f7ff ffde 	bl	80022bc <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	429a      	cmp	r2, r3
 800230a:	d8f7      	bhi.n	80022fc <HAL_Delay+0x28>
  {
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000018 	.word	0x20000018

0800231c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	609a      	str	r2, [r3, #8]
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	3360      	adds	r3, #96	@ 0x60
 8002396:	461a      	mov	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b08      	ldr	r3, [pc, #32]	@ (80023c8 <LL_ADC_SetOffset+0x44>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023bc:	bf00      	nop
 80023be:	371c      	adds	r7, #28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	03fff000 	.word	0x03fff000

080023cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3360      	adds	r3, #96	@ 0x60
 80023da:	461a      	mov	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3360      	adds	r3, #96	@ 0x60
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3330      	adds	r3, #48	@ 0x30
 8002464:	461a      	mov	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	0a1b      	lsrs	r3, r3, #8
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	4413      	add	r3, r2
 8002472:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	211f      	movs	r1, #31
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	401a      	ands	r2, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	f003 011f 	and.w	r1, r3, #31
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	431a      	orrs	r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b087      	sub	sp, #28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3314      	adds	r3, #20
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	0e5b      	lsrs	r3, r3, #25
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	4413      	add	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	0d1b      	lsrs	r3, r3, #20
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	2107      	movs	r1, #7
 80024da:	fa01 f303 	lsl.w	r3, r1, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	401a      	ands	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	0d1b      	lsrs	r3, r3, #20
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	431a      	orrs	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024f6:	bf00      	nop
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
	...

08002504 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251c:	43db      	mvns	r3, r3
 800251e:	401a      	ands	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0318 	and.w	r3, r3, #24
 8002526:	4908      	ldr	r1, [pc, #32]	@ (8002548 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002528:	40d9      	lsrs	r1, r3
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	400b      	ands	r3, r1
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	431a      	orrs	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	0007ffff 	.word	0x0007ffff

0800254c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800255c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6093      	str	r3, [r2, #8]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002584:	d101      	bne.n	800258a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025ac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025d4:	d101      	bne.n	80025da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025fc:	f043 0201 	orr.w	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002620:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002624:	f043 0202 	orr.w	r2, r3, #2
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <LL_ADC_IsEnabled+0x18>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <LL_ADC_IsEnabled+0x1a>
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b02      	cmp	r3, #2
 8002670:	d101      	bne.n	8002676 <LL_ADC_IsDisableOngoing+0x18>
 8002672:	2301      	movs	r3, #1
 8002674:	e000      	b.n	8002678 <LL_ADC_IsDisableOngoing+0x1a>
 8002676:	2300      	movs	r3, #0
}
 8002678:	4618      	mov	r0, r3
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002694:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002698:	f043 0204 	orr.w	r2, r3, #4
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026c0:	f043 0210 	orr.w	r2, r3, #16
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d101      	bne.n	80026ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800270a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800270e:	f043 0220 	orr.w	r2, r3, #32
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002722:	b480      	push	{r7}
 8002724:	b083      	sub	sp, #12
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d101      	bne.n	800273a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e126      	b.n	80029b0 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276c:	2b00      	cmp	r3, #0
 800276e:	d109      	bne.n	8002784 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fa27 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff fef1 	bl	8002570 <LL_ADC_IsDeepPowerDownEnabled>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d004      	beq.n	800279e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fed7 	bl	800254c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff0c 	bl	80025c0 <LL_ADC_IsInternalRegulatorEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fef0 	bl	8002598 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b8:	4b7f      	ldr	r3, [pc, #508]	@ (80029b8 <HAL_ADC_Init+0x270>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	4a7f      	ldr	r2, [pc, #508]	@ (80029bc <HAL_ADC_Init+0x274>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	3301      	adds	r3, #1
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027cc:	e002      	b.n	80027d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f9      	bne.n	80027ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff feee 	bl	80025c0 <LL_ADC_IsInternalRegulatorEnabled>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ee:	f043 0210 	orr.w	r2, r3, #16
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	f043 0201 	orr.w	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7ff ff62 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 8002810:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002816:	f003 0310 	and.w	r3, r3, #16
 800281a:	2b00      	cmp	r3, #0
 800281c:	f040 80bf 	bne.w	800299e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f040 80bb 	bne.w	800299e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800282c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002830:	f043 0202 	orr.w	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fefb 	bl	8002638 <LL_ADC_IsEnabled>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10b      	bne.n	8002860 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002848:	485d      	ldr	r0, [pc, #372]	@ (80029c0 <HAL_ADC_Init+0x278>)
 800284a:	f7ff fef5 	bl	8002638 <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4619      	mov	r1, r3
 800285a:	485a      	ldr	r0, [pc, #360]	@ (80029c4 <HAL_ADC_Init+0x27c>)
 800285c:	f7ff fd5e 	bl	800231c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	7e5b      	ldrb	r3, [r3, #25]
 8002864:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800286a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002870:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002876:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 3020 	ldrb.w	r3, [r3, #32]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d106      	bne.n	800289c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	3b01      	subs	r3, #1
 8002894:	045b      	lsls	r3, r3, #17
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	4b42      	ldr	r3, [pc, #264]	@ (80029c8 <HAL_ADC_Init+0x280>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	69b9      	ldr	r1, [r7, #24]
 80028c8:	430b      	orrs	r3, r1
 80028ca:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff26 	bl	8002722 <LL_ADC_INJ_IsConversionOngoing>
 80028d6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d13d      	bne.n	800295a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d13a      	bne.n	800295a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028e8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028f0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002900:	f023 0302 	bic.w	r3, r3, #2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	69b9      	ldr	r1, [r7, #24]
 800290a:	430b      	orrs	r3, r1
 800290c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002914:	2b01      	cmp	r3, #1
 8002916:	d118      	bne.n	800294a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002922:	f023 0304 	bic.w	r3, r3, #4
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800293a:	430a      	orrs	r2, r1
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f042 0201 	orr.w	r2, r2, #1
 8002946:	611a      	str	r2, [r3, #16]
 8002948:	e007      	b.n	800295a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0201 	bic.w	r2, r2, #1
 8002958:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d10c      	bne.n	800297c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	f023 010f 	bic.w	r1, r3, #15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	1e5a      	subs	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	631a      	str	r2, [r3, #48]	@ 0x30
 800297a:	e007      	b.n	800298c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 020f 	bic.w	r2, r2, #15
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002990:	f023 0303 	bic.w	r3, r3, #3
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	@ 0x54
 800299c:	e007      	b.n	80029ae <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029a2:	f043 0210 	orr.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3720      	adds	r7, #32
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20000010 	.word	0x20000010
 80029bc:	053e2d63 	.word	0x053e2d63
 80029c0:	50040000 	.word	0x50040000
 80029c4:	50040300 	.word	0x50040300
 80029c8:	fff0c007 	.word	0xfff0c007

080029cc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fe79 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d167      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_Start_DMA+0x2a>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e063      	b.n	8002abe <HAL_ADC_Start_DMA+0xf2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fd72 	bl	80034e8 <ADC_Enable>
 8002a04:	4603      	mov	r3, r0
 8002a06:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d14f      	bne.n	8002aae <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d006      	beq.n	8002a3c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a32:	f023 0206 	bic.w	r2, r3, #6
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	659a      	str	r2, [r3, #88]	@ 0x58
 8002a3a:	e002      	b.n	8002a42 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	4a20      	ldr	r2, [pc, #128]	@ (8002ac8 <HAL_ADC_Start_DMA+0xfc>)
 8002a48:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4e:	4a1f      	ldr	r2, [pc, #124]	@ (8002acc <HAL_ADC_Start_DMA+0x100>)
 8002a50:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad0 <HAL_ADC_Start_DMA+0x104>)
 8002a58:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	221c      	movs	r2, #28
 8002a60:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f042 0210 	orr.w	r2, r2, #16
 8002a78:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68da      	ldr	r2, [r3, #12]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f042 0201 	orr.w	r2, r2, #1
 8002a88:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3340      	adds	r3, #64	@ 0x40
 8002a94:	4619      	mov	r1, r3
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f001 f8f5 	bl	8003c88 <HAL_DMA_Start_IT>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fdec 	bl	8002684 <LL_ADC_REG_StartConversion>
 8002aac:	e006      	b.n	8002abc <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002ab6:	e001      	b.n	8002abc <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	080036b3 	.word	0x080036b3
 8002acc:	0800378b 	.word	0x0800378b
 8002ad0:	080037a7 	.word	0x080037a7

08002ad4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Stop_DMA+0x16>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e051      	b.n	8002b8e <HAL_ADC_Stop_DMA+0xba>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002af2:	2103      	movs	r1, #3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 fc3b 	bl	8003370 <ADC_ConversionStop>
 8002afa:	4603      	mov	r3, r0
 8002afc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d13f      	bne.n	8002b84 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0201 	bic.w	r2, r2, #1
 8002b12:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b18:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d10f      	bne.n	8002b42 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 f90e 	bl	8003d48 <HAL_DMA_Abort>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002b30:	7bfb      	ldrb	r3, [r7, #15]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0210 	bic.w	r2, r2, #16
 8002b50:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fd4b 	bl	80035f4 <ADC_Disable>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 fd45 	bl	80035f4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b0b6      	sub	sp, #216	@ 0xd8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x22>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e3bb      	b.n	8003346 <HAL_ADC_ConfigChannel+0x79a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fd7a 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 83a0 	bne.w	8003328 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b05      	cmp	r3, #5
 8002bf6:	d824      	bhi.n	8002c42 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	3b02      	subs	r3, #2
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d81b      	bhi.n	8002c3a <HAL_ADC_ConfigChannel+0x8e>
 8002c02:	a201      	add	r2, pc, #4	@ (adr r2, 8002c08 <HAL_ADC_ConfigChannel+0x5c>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c19 	.word	0x08002c19
 8002c0c:	08002c21 	.word	0x08002c21
 8002c10:	08002c29 	.word	0x08002c29
 8002c14:	08002c31 	.word	0x08002c31
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002c18:	230c      	movs	r3, #12
 8002c1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c1e:	e010      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002c20:	2312      	movs	r3, #18
 8002c22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c26:	e00c      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002c28:	2318      	movs	r3, #24
 8002c2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c2e:	e008      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c38:	e003      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002c40:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6818      	ldr	r0, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002c50:	f7ff fc00 	bl	8002454 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fd3b 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 8002c5e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fd5b 	bl	8002722 <LL_ADC_INJ_IsConversionOngoing>
 8002c6c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 81a4 	bne.w	8002fc2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f040 819f 	bne.w	8002fc2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6819      	ldr	r1, [r3, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f7ff fc0b 	bl	80024ac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695a      	ldr	r2, [r3, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b04      	cmp	r3, #4
 8002cb6:	d00a      	beq.n	8002cce <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6919      	ldr	r1, [r3, #16]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002cc8:	f7ff fb5c 	bl	8002384 <LL_ADC_SetOffset>
 8002ccc:	e179      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fb79 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_ADC_ConfigChannel+0x14e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fb6e 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	0e9b      	lsrs	r3, r3, #26
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	e01e      	b.n	8002d38 <HAL_ADC_ConfigChannel+0x18c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fb63 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002d28:	2320      	movs	r3, #32
 8002d2a:	e004      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002d2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002d30:	fab3 f383 	clz	r3, r3
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1a4>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	0e9b      	lsrs	r3, r3, #26
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	e018      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x1d6>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002d6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002d74:	2320      	movs	r3, #32
 8002d76:	e004      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002d78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d106      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff fb32 	bl	80023f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2101      	movs	r1, #1
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fb16 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x214>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2101      	movs	r1, #1
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fb0b 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002db6:	4603      	mov	r3, r0
 8002db8:	0e9b      	lsrs	r3, r3, #26
 8002dba:	f003 021f 	and.w	r2, r3, #31
 8002dbe:	e01e      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x252>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fb00 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002dde:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002de2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002de6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002dee:	2320      	movs	r3, #32
 8002df0:	e004      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d105      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x26a>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	e018      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x29c>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002e32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e004      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d106      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2200      	movs	r2, #0
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff facf 	bl	80023f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2102      	movs	r1, #2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fab3 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x2da>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2102      	movs	r1, #2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff faa8 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	e01e      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x318>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fa9d 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e9c:	fa93 f3a3 	rbit	r3, r3
 8002ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e004      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002eb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x330>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	0e9b      	lsrs	r3, r3, #26
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	e014      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x35a>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002eea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002eec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ef0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e004      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002efc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d106      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	2102      	movs	r1, #2
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff fa70 	bl	80023f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2103      	movs	r1, #3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fa54 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10a      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x398>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2103      	movs	r1, #3
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fa49 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	f003 021f 	and.w	r2, r3, #31
 8002f42:	e017      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x3c8>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2103      	movs	r1, #3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff fa3e 	bl	80023cc <LL_ADC_GetOffsetChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f56:	fa93 f3a3 	rbit	r3, r3
 8002f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f5e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002f66:	2320      	movs	r3, #32
 8002f68:	e003      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f6c:	fab3 f383 	clz	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x3e0>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	f003 031f 	and.w	r3, r3, #31
 8002f8a:	e011      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x404>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002f9e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e003      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002fa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d106      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	2103      	movs	r1, #3
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fa1b 	bl	80023f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fb36 	bl	8002638 <LL_ADC_IsEnabled>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f040 8140 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	6819      	ldr	r1, [r3, #0]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f7ff fa8f 	bl	8002504 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4a8f      	ldr	r2, [pc, #572]	@ (8003228 <HAL_ADC_ConfigChannel+0x67c>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	f040 8131 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <HAL_ADC_ConfigChannel+0x46e>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	0e9b      	lsrs	r3, r3, #26
 8003008:	3301      	adds	r3, #1
 800300a:	f003 031f 	and.w	r3, r3, #31
 800300e:	2b09      	cmp	r3, #9
 8003010:	bf94      	ite	ls
 8003012:	2301      	movls	r3, #1
 8003014:	2300      	movhi	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	e019      	b.n	800304e <HAL_ADC_ConfigChannel+0x4a2>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800302a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800302c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8003032:	2320      	movs	r3, #32
 8003034:	e003      	b.n	800303e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003038:	fab3 f383 	clz	r3, r3
 800303c:	b2db      	uxtb	r3, r3
 800303e:	3301      	adds	r3, #1
 8003040:	f003 031f 	and.w	r3, r3, #31
 8003044:	2b09      	cmp	r3, #9
 8003046:	bf94      	ite	ls
 8003048:	2301      	movls	r3, #1
 800304a:	2300      	movhi	r3, #0
 800304c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304e:	2b00      	cmp	r3, #0
 8003050:	d079      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d107      	bne.n	800306e <HAL_ADC_ConfigChannel+0x4c2>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	3301      	adds	r3, #1
 8003066:	069b      	lsls	r3, r3, #26
 8003068:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800306c:	e015      	b.n	800309a <HAL_ADC_ConfigChannel+0x4ee>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800307c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800307e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003080:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e003      	b.n	8003092 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800308a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	3301      	adds	r3, #1
 8003094:	069b      	lsls	r3, r3, #26
 8003096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d109      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x50e>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	0e9b      	lsrs	r3, r3, #26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	e017      	b.n	80030ea <HAL_ADC_ConfigChannel+0x53e>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80030c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80030cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80030d2:	2320      	movs	r3, #32
 80030d4:	e003      	b.n	80030de <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80030d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	3301      	adds	r3, #1
 80030e0:	f003 031f 	and.w	r3, r3, #31
 80030e4:	2101      	movs	r1, #1
 80030e6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ea:	ea42 0103 	orr.w	r1, r2, r3
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10a      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x564>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	0e9b      	lsrs	r3, r3, #26
 8003100:	3301      	adds	r3, #1
 8003102:	f003 021f 	and.w	r2, r3, #31
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	051b      	lsls	r3, r3, #20
 800310e:	e018      	b.n	8003142 <HAL_ADC_ConfigChannel+0x596>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003118:	fa93 f3a3 	rbit	r3, r3
 800311c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003128:	2320      	movs	r3, #32
 800312a:	e003      	b.n	8003134 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800312c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312e:	fab3 f383 	clz	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	3301      	adds	r3, #1
 8003136:	f003 021f 	and.w	r2, r3, #31
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003142:	430b      	orrs	r3, r1
 8003144:	e081      	b.n	800324a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314e:	2b00      	cmp	r3, #0
 8003150:	d107      	bne.n	8003162 <HAL_ADC_ConfigChannel+0x5b6>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0e9b      	lsrs	r3, r3, #26
 8003158:	3301      	adds	r3, #1
 800315a:	069b      	lsls	r3, r3, #26
 800315c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003160:	e015      	b.n	800318e <HAL_ADC_ConfigChannel+0x5e2>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003172:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8003174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800317a:	2320      	movs	r3, #32
 800317c:	e003      	b.n	8003186 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800317e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	3301      	adds	r3, #1
 8003188:	069b      	lsls	r3, r3, #26
 800318a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_ADC_ConfigChannel+0x602>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	0e9b      	lsrs	r3, r3, #26
 80031a0:	3301      	adds	r3, #1
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2101      	movs	r1, #1
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	e017      	b.n	80031de <HAL_ADC_ConfigChannel+0x632>
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	61bb      	str	r3, [r7, #24]
  return result;
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80031c6:	2320      	movs	r3, #32
 80031c8:	e003      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f303 	lsl.w	r3, r1, r3
 80031de:	ea42 0103 	orr.w	r1, r2, r3
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10d      	bne.n	800320a <HAL_ADC_ConfigChannel+0x65e>
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	0e9b      	lsrs	r3, r3, #26
 80031f4:	3301      	adds	r3, #1
 80031f6:	f003 021f 	and.w	r2, r3, #31
 80031fa:	4613      	mov	r3, r2
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4413      	add	r3, r2
 8003200:	3b1e      	subs	r3, #30
 8003202:	051b      	lsls	r3, r3, #20
 8003204:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003208:	e01e      	b.n	8003248 <HAL_ADC_ConfigChannel+0x69c>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	60fb      	str	r3, [r7, #12]
  return result;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003222:	2320      	movs	r3, #32
 8003224:	e006      	b.n	8003234 <HAL_ADC_ConfigChannel+0x688>
 8003226:	bf00      	nop
 8003228:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	3301      	adds	r3, #1
 8003236:	f003 021f 	and.w	r2, r3, #31
 800323a:	4613      	mov	r3, r2
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	4413      	add	r3, r2
 8003240:	3b1e      	subs	r3, #30
 8003242:	051b      	lsls	r3, r3, #20
 8003244:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003248:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800324e:	4619      	mov	r1, r3
 8003250:	f7ff f92c 	bl	80024ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	4b3d      	ldr	r3, [pc, #244]	@ (8003350 <HAL_ADC_ConfigChannel+0x7a4>)
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d06c      	beq.n	800333a <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003260:	483c      	ldr	r0, [pc, #240]	@ (8003354 <HAL_ADC_ConfigChannel+0x7a8>)
 8003262:	f7ff f881 	bl	8002368 <LL_ADC_GetCommonPathInternalCh>
 8003266:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a3a      	ldr	r2, [pc, #232]	@ (8003358 <HAL_ADC_ConfigChannel+0x7ac>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d127      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003274:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003278:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d121      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a35      	ldr	r2, [pc, #212]	@ (800335c <HAL_ADC_ConfigChannel+0x7b0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d157      	bne.n	800333a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800328a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800328e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003292:	4619      	mov	r1, r3
 8003294:	482f      	ldr	r0, [pc, #188]	@ (8003354 <HAL_ADC_ConfigChannel+0x7a8>)
 8003296:	f7ff f854 	bl	8002342 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800329a:	4b31      	ldr	r3, [pc, #196]	@ (8003360 <HAL_ADC_ConfigChannel+0x7b4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	099b      	lsrs	r3, r3, #6
 80032a0:	4a30      	ldr	r2, [pc, #192]	@ (8003364 <HAL_ADC_ConfigChannel+0x7b8>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032b4:	e002      	b.n	80032bc <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f9      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032c2:	e03a      	b.n	800333a <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a27      	ldr	r2, [pc, #156]	@ (8003368 <HAL_ADC_ConfigChannel+0x7bc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d113      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1f      	ldr	r2, [pc, #124]	@ (800335c <HAL_ADC_ConfigChannel+0x7b0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d12a      	bne.n	800333a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032ec:	4619      	mov	r1, r3
 80032ee:	4819      	ldr	r0, [pc, #100]	@ (8003354 <HAL_ADC_ConfigChannel+0x7a8>)
 80032f0:	f7ff f827 	bl	8002342 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f4:	e021      	b.n	800333a <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1c      	ldr	r2, [pc, #112]	@ (800336c <HAL_ADC_ConfigChannel+0x7c0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d11c      	bne.n	800333a <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a12      	ldr	r2, [pc, #72]	@ (800335c <HAL_ADC_ConfigChannel+0x7b0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d111      	bne.n	800333a <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800331a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800331e:	4619      	mov	r1, r3
 8003320:	480c      	ldr	r0, [pc, #48]	@ (8003354 <HAL_ADC_ConfigChannel+0x7a8>)
 8003322:	f7ff f80e 	bl	8002342 <LL_ADC_SetCommonPathInternalCh>
 8003326:	e008      	b.n	800333a <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800332c:	f043 0220 	orr.w	r2, r3, #32
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003342:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003346:	4618      	mov	r0, r3
 8003348:	37d8      	adds	r7, #216	@ 0xd8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	80080000 	.word	0x80080000
 8003354:	50040300 	.word	0x50040300
 8003358:	c7520000 	.word	0xc7520000
 800335c:	50040000 	.word	0x50040000
 8003360:	20000010 	.word	0x20000010
 8003364:	053e2d63 	.word	0x053e2d63
 8003368:	cb840000 	.word	0xcb840000
 800336c:	80000001 	.word	0x80000001

08003370 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f9a4 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 800338c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff f9c5 	bl	8002722 <LL_ADC_INJ_IsConversionOngoing>
 8003398:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d103      	bne.n	80033a8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8098 	beq.w	80034d8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d02a      	beq.n	800340c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7e5b      	ldrb	r3, [r3, #25]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d126      	bne.n	800340c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7e1b      	ldrb	r3, [r3, #24]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d122      	bne.n	800340c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80033c6:	2301      	movs	r3, #1
 80033c8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80033ca:	e014      	b.n	80033f6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4a45      	ldr	r2, [pc, #276]	@ (80034e4 <ADC_ConversionStop+0x174>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d90d      	bls.n	80033f0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f043 0210 	orr.w	r2, r3, #16
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	f043 0201 	orr.w	r2, r3, #1
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e074      	b.n	80034da <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	3301      	adds	r3, #1
 80033f4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003400:	2b40      	cmp	r3, #64	@ 0x40
 8003402:	d1e3      	bne.n	80033cc <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2240      	movs	r2, #64	@ 0x40
 800340a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d014      	beq.n	800343c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f95c 	bl	80026d4 <LL_ADC_REG_IsConversionOngoing>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff f919 	bl	800265e <LL_ADC_IsDisableOngoing>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7ff f938 	bl	80026ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d014      	beq.n	800346c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff f96b 	bl	8002722 <LL_ADC_INJ_IsConversionOngoing>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00c      	beq.n	800346c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff f901 	bl	800265e <LL_ADC_IsDisableOngoing>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff f947 	bl	80026fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d005      	beq.n	800347e <ADC_ConversionStop+0x10e>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d105      	bne.n	8003484 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003478:	230c      	movs	r3, #12
 800347a:	617b      	str	r3, [r7, #20]
        break;
 800347c:	e005      	b.n	800348a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800347e:	2308      	movs	r3, #8
 8003480:	617b      	str	r3, [r7, #20]
        break;
 8003482:	e002      	b.n	800348a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003484:	2304      	movs	r3, #4
 8003486:	617b      	str	r3, [r7, #20]
        break;
 8003488:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800348a:	f7fe ff17 	bl	80022bc <HAL_GetTick>
 800348e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003490:	e01b      	b.n	80034ca <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003492:	f7fe ff13 	bl	80022bc <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b05      	cmp	r3, #5
 800349e:	d914      	bls.n	80034ca <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00d      	beq.n	80034ca <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	f043 0210 	orr.w	r2, r3, #16
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034be:	f043 0201 	orr.w	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e007      	b.n	80034da <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1dc      	bne.n	8003492 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3720      	adds	r7, #32
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	a33fffff 	.word	0xa33fffff

080034e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f89d 	bl	8002638 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d169      	bne.n	80035d8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	4b36      	ldr	r3, [pc, #216]	@ (80035e4 <ADC_Enable+0xfc>)
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003516:	f043 0210 	orr.w	r2, r3, #16
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003522:	f043 0201 	orr.w	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e055      	b.n	80035da <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f858 	bl	80025e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003538:	482b      	ldr	r0, [pc, #172]	@ (80035e8 <ADC_Enable+0x100>)
 800353a:	f7fe ff15 	bl	8002368 <LL_ADC_GetCommonPathInternalCh>
 800353e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003540:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003544:	2b00      	cmp	r3, #0
 8003546:	d013      	beq.n	8003570 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003548:	4b28      	ldr	r3, [pc, #160]	@ (80035ec <ADC_Enable+0x104>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	099b      	lsrs	r3, r3, #6
 800354e:	4a28      	ldr	r2, [pc, #160]	@ (80035f0 <ADC_Enable+0x108>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	099b      	lsrs	r3, r3, #6
 8003556:	1c5a      	adds	r2, r3, #1
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003562:	e002      	b.n	800356a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	3b01      	subs	r3, #1
 8003568:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f9      	bne.n	8003564 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003570:	f7fe fea4 	bl	80022bc <HAL_GetTick>
 8003574:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003576:	e028      	b.n	80035ca <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff f85b 	bl	8002638 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d104      	bne.n	8003592 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f82b 	bl	80025e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003592:	f7fe fe93 	bl	80022bc <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d914      	bls.n	80035ca <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d00d      	beq.n	80035ca <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	f043 0210 	orr.w	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e007      	b.n	80035da <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d1cf      	bne.n	8003578 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	8000003f 	.word	0x8000003f
 80035e8:	50040300 	.word	0x50040300
 80035ec:	20000010 	.word	0x20000010
 80035f0:	053e2d63 	.word	0x053e2d63

080035f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff f82c 	bl	800265e <LL_ADC_IsDisableOngoing>
 8003606:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff f813 	bl	8002638 <LL_ADC_IsEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d047      	beq.n	80036a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d144      	bne.n	80036a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030d 	and.w	r3, r3, #13
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10c      	bne.n	8003646 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe ffed 	bl	8002610 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2203      	movs	r2, #3
 800363c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800363e:	f7fe fe3d 	bl	80022bc <HAL_GetTick>
 8003642:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003644:	e029      	b.n	800369a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364a:	f043 0210 	orr.w	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003656:	f043 0201 	orr.w	r2, r3, #1
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e023      	b.n	80036aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003662:	f7fe fe2b 	bl	80022bc <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d914      	bls.n	800369a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003682:	f043 0210 	orr.w	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1dc      	bne.n	8003662 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036be:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d14b      	bne.n	8003764 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d021      	beq.n	800372a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fe fe9f 	bl	800242e <LL_ADC_REG_IsTriggerSourceSWStart>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d032      	beq.n	800375c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d12b      	bne.n	800375c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d11f      	bne.n	800375c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003720:	f043 0201 	orr.w	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	655a      	str	r2, [r3, #84]	@ 0x54
 8003728:	e018      	b.n	800375c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d111      	bne.n	800375c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d105      	bne.n	800375c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003754:	f043 0201 	orr.w	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7fe f9f1 	bl	8001b44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003762:	e00e      	b.n	8003782 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f7ff fa10 	bl	8002b96 <HAL_ADC_ErrorCallback>
}
 8003776:	e004      	b.n	8003782 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	4798      	blx	r3
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7fe f941 	bl	8001a20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c4:	f043 0204 	orr.w	r2, r3, #4
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff f9e2 	bl	8002b96 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <LL_ADC_StartCalibration>:
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80037ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <LL_ADC_IsCalibrationOnGoing>:
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800381c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003820:	d101      	bne.n	8003826 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800383e:	2300      	movs	r3, #0
 8003840:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_ADCEx_Calibration_Start+0x1c>
 800384c:	2302      	movs	r3, #2
 800384e:	e04d      	b.n	80038ec <HAL_ADCEx_Calibration_Start+0xb8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fecb 	bl	80035f4 <ADC_Disable>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d136      	bne.n	80038d6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003870:	f023 0302 	bic.w	r3, r3, #2
 8003874:	f043 0202 	orr.w	r2, r3, #2
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6839      	ldr	r1, [r7, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ffa9 	bl	80037da <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003888:	e014      	b.n	80038b4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3301      	adds	r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003896:	d30d      	bcc.n	80038b4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f023 0312 	bic.w	r3, r3, #18
 80038a0:	f043 0210 	orr.w	r2, r3, #16
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e01b      	b.n	80038ec <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ffa7 	bl	800380c <LL_ADC_IsCalibrationOnGoing>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e2      	bne.n	800388a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c8:	f023 0303 	bic.w	r3, r3, #3
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80038d4:	e005      	b.n	80038e2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038da:	f043 0210 	orr.w	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003904:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003910:	4013      	ands	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800391c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003926:	4a04      	ldr	r2, [pc, #16]	@ (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	60d3      	str	r3, [r2, #12]
}
 800392c:	bf00      	nop
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <__NVIC_GetPriorityGrouping+0x18>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	f003 0307 	and.w	r3, r3, #7
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003966:	2b00      	cmp	r3, #0
 8003968:	db0b      	blt.n	8003982 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	f003 021f 	and.w	r2, r3, #31
 8003970:	4907      	ldr	r1, [pc, #28]	@ (8003990 <__NVIC_EnableIRQ+0x38>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	2001      	movs	r0, #1
 800397a:	fa00 f202 	lsl.w	r2, r0, r2
 800397e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	e000e100 	.word	0xe000e100

08003994 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	db0a      	blt.n	80039be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	b2da      	uxtb	r2, r3
 80039ac:	490c      	ldr	r1, [pc, #48]	@ (80039e0 <__NVIC_SetPriority+0x4c>)
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	0112      	lsls	r2, r2, #4
 80039b4:	b2d2      	uxtb	r2, r2
 80039b6:	440b      	add	r3, r1
 80039b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039bc:	e00a      	b.n	80039d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4908      	ldr	r1, [pc, #32]	@ (80039e4 <__NVIC_SetPriority+0x50>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	3b04      	subs	r3, #4
 80039cc:	0112      	lsls	r2, r2, #4
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	440b      	add	r3, r1
 80039d2:	761a      	strb	r2, [r3, #24]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000e100 	.word	0xe000e100
 80039e4:	e000ed00 	.word	0xe000ed00

080039e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	@ 0x24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f1c3 0307 	rsb	r3, r3, #7
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	bf28      	it	cs
 8003a06:	2304      	movcs	r3, #4
 8003a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	2b06      	cmp	r3, #6
 8003a10:	d902      	bls.n	8003a18 <NVIC_EncodePriority+0x30>
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	3b03      	subs	r3, #3
 8003a16:	e000      	b.n	8003a1a <NVIC_EncodePriority+0x32>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	43da      	mvns	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	401a      	ands	r2, r3
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a30:	f04f 31ff 	mov.w	r1, #4294967295
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	43d9      	mvns	r1, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a40:	4313      	orrs	r3, r2
         );
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3724      	adds	r7, #36	@ 0x24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
	...

08003a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a60:	d301      	bcc.n	8003a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a62:	2301      	movs	r3, #1
 8003a64:	e00f      	b.n	8003a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a66:	4a0a      	ldr	r2, [pc, #40]	@ (8003a90 <SysTick_Config+0x40>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6e:	210f      	movs	r1, #15
 8003a70:	f04f 30ff 	mov.w	r0, #4294967295
 8003a74:	f7ff ff8e 	bl	8003994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <SysTick_Config+0x40>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7e:	4b04      	ldr	r3, [pc, #16]	@ (8003a90 <SysTick_Config+0x40>)
 8003a80:	2207      	movs	r2, #7
 8003a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	e000e010 	.word	0xe000e010

08003a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff29 	bl	80038f4 <__NVIC_SetPriorityGrouping>
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b086      	sub	sp, #24
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003abc:	f7ff ff3e 	bl	800393c <__NVIC_GetPriorityGrouping>
 8003ac0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	68b9      	ldr	r1, [r7, #8]
 8003ac6:	6978      	ldr	r0, [r7, #20]
 8003ac8:	f7ff ff8e 	bl	80039e8 <NVIC_EncodePriority>
 8003acc:	4602      	mov	r2, r0
 8003ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff ff5d 	bl	8003994 <__NVIC_SetPriority>
}
 8003ada:	bf00      	nop
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	4603      	mov	r3, r0
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff ff31 	bl	8003958 <__NVIC_EnableIRQ>
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7ff ffa2 	bl	8003a50 <SysTick_Config>
 8003b0c:	4603      	mov	r3, r0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e098      	b.n	8003c5c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b4d      	ldr	r3, [pc, #308]	@ (8003c68 <HAL_DMA_Init+0x150>)
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d80f      	bhi.n	8003b56 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003c6c <HAL_DMA_Init+0x154>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a4b      	ldr	r2, [pc, #300]	@ (8003c70 <HAL_DMA_Init+0x158>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	009a      	lsls	r2, r3, #2
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a48      	ldr	r2, [pc, #288]	@ (8003c74 <HAL_DMA_Init+0x15c>)
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b54:	e00e      	b.n	8003b74 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b46      	ldr	r3, [pc, #280]	@ (8003c78 <HAL_DMA_Init+0x160>)
 8003b5e:	4413      	add	r3, r2
 8003b60:	4a43      	ldr	r2, [pc, #268]	@ (8003c70 <HAL_DMA_Init+0x158>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a42      	ldr	r2, [pc, #264]	@ (8003c7c <HAL_DMA_Init+0x164>)
 8003b72:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bce:	d039      	beq.n	8003c44 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd4:	4a27      	ldr	r2, [pc, #156]	@ (8003c74 <HAL_DMA_Init+0x15c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d11a      	bne.n	8003c10 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003bda:	4b29      	ldr	r3, [pc, #164]	@ (8003c80 <HAL_DMA_Init+0x168>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be2:	f003 031c 	and.w	r3, r3, #28
 8003be6:	210f      	movs	r1, #15
 8003be8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	4924      	ldr	r1, [pc, #144]	@ (8003c80 <HAL_DMA_Init+0x168>)
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003bf4:	4b22      	ldr	r3, [pc, #136]	@ (8003c80 <HAL_DMA_Init+0x168>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6859      	ldr	r1, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c00:	f003 031c 	and.w	r3, r3, #28
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	491d      	ldr	r1, [pc, #116]	@ (8003c80 <HAL_DMA_Init+0x168>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
 8003c0e:	e019      	b.n	8003c44 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003c10:	4b1c      	ldr	r3, [pc, #112]	@ (8003c84 <HAL_DMA_Init+0x16c>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c18:	f003 031c 	and.w	r3, r3, #28
 8003c1c:	210f      	movs	r1, #15
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	4917      	ldr	r1, [pc, #92]	@ (8003c84 <HAL_DMA_Init+0x16c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003c2a:	4b16      	ldr	r3, [pc, #88]	@ (8003c84 <HAL_DMA_Init+0x16c>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6859      	ldr	r1, [r3, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	f003 031c 	and.w	r3, r3, #28
 8003c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3e:	4911      	ldr	r1, [pc, #68]	@ (8003c84 <HAL_DMA_Init+0x16c>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	40020407 	.word	0x40020407
 8003c6c:	bffdfff8 	.word	0xbffdfff8
 8003c70:	cccccccd 	.word	0xcccccccd
 8003c74:	40020000 	.word	0x40020000
 8003c78:	bffdfbf8 	.word	0xbffdfbf8
 8003c7c:	40020400 	.word	0x40020400
 8003c80:	400200a8 	.word	0x400200a8
 8003c84:	400204a8 	.word	0x400204a8

08003c88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c96:	2300      	movs	r3, #0
 8003c98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_DMA_Start_IT+0x20>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e04b      	b.n	8003d40 <HAL_DMA_Start_IT+0xb8>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d13a      	bne.n	8003d32 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f91e 	bl	8003f22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f042 020e 	orr.w	r2, r2, #14
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e00f      	b.n	8003d20 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0204 	bic.w	r2, r2, #4
 8003d0e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 020a 	orr.w	r2, r2, #10
 8003d1e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	e005      	b.n	8003d3e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d008      	beq.n	8003d72 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2204      	movs	r2, #4
 8003d64:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e022      	b.n	8003db8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 020e 	bic.w	r2, r2, #14
 8003d80:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d96:	f003 021c 	and.w	r2, r3, #28
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f202 	lsl.w	r2, r1, r2
 8003da4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de0:	f003 031c 	and.w	r3, r3, #28
 8003de4:	2204      	movs	r2, #4
 8003de6:	409a      	lsls	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d026      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x7a>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d021      	beq.n	8003e3e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d107      	bne.n	8003e18 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0204 	bic.w	r2, r2, #4
 8003e16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1c:	f003 021c 	and.w	r2, r3, #28
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	2104      	movs	r1, #4
 8003e26:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d071      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003e3c:	e06c      	b.n	8003f18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e42:	f003 031c 	and.w	r3, r3, #28
 8003e46:	2202      	movs	r2, #2
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d02e      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0xec>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d029      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 020a 	bic.w	r2, r2, #10
 8003e78:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e86:	f003 021c 	and.w	r2, r3, #28
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	2102      	movs	r1, #2
 8003e90:	fa01 f202 	lsl.w	r2, r1, r2
 8003e94:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d038      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003eae:	e033      	b.n	8003f18 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb4:	f003 031c 	and.w	r3, r3, #28
 8003eb8:	2208      	movs	r2, #8
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d02a      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x156>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d025      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 020e 	bic.w	r2, r2, #14
 8003edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f003 021c 	and.w	r2, r3, #28
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	2101      	movs	r1, #1
 8003eec:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d004      	beq.n	8003f1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
}
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f22:	b480      	push	{r7}
 8003f24:	b085      	sub	sp, #20
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f34:	f003 021c 	and.w	r2, r3, #28
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d108      	bne.n	8003f66 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003f64:	e007      	b.n	8003f76 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f92:	e148      	b.n	8004226 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	2101      	movs	r1, #1
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 813a 	beq.w	8004220 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d005      	beq.n	8003fc4 <HAL_GPIO_Init+0x40>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f003 0303 	and.w	r3, r3, #3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d130      	bne.n	8004026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	005b      	lsls	r3, r3, #1
 8003fce:	2203      	movs	r2, #3
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	43db      	mvns	r3, r3
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	f003 0201 	and.w	r2, r3, #1
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	fa02 f303 	lsl.w	r3, r2, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4313      	orrs	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b03      	cmp	r3, #3
 8004030:	d017      	beq.n	8004062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	2203      	movs	r2, #3
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d123      	bne.n	80040b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	08da      	lsrs	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3208      	adds	r2, #8
 8004076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	220f      	movs	r2, #15
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43db      	mvns	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	693a      	ldr	r2, [r7, #16]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	08da      	lsrs	r2, r3, #3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3208      	adds	r2, #8
 80040b0:	6939      	ldr	r1, [r7, #16]
 80040b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	2203      	movs	r2, #3
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 0203 	and.w	r2, r3, #3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 8094 	beq.w	8004220 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040f8:	4b52      	ldr	r3, [pc, #328]	@ (8004244 <HAL_GPIO_Init+0x2c0>)
 80040fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fc:	4a51      	ldr	r2, [pc, #324]	@ (8004244 <HAL_GPIO_Init+0x2c0>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	6613      	str	r3, [r2, #96]	@ 0x60
 8004104:	4b4f      	ldr	r3, [pc, #316]	@ (8004244 <HAL_GPIO_Init+0x2c0>)
 8004106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004110:	4a4d      	ldr	r2, [pc, #308]	@ (8004248 <HAL_GPIO_Init+0x2c4>)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	3302      	adds	r3, #2
 8004118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	220f      	movs	r2, #15
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4013      	ands	r3, r2
 8004132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800413a:	d00d      	beq.n	8004158 <HAL_GPIO_Init+0x1d4>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a43      	ldr	r2, [pc, #268]	@ (800424c <HAL_GPIO_Init+0x2c8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <HAL_GPIO_Init+0x1d0>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a42      	ldr	r2, [pc, #264]	@ (8004250 <HAL_GPIO_Init+0x2cc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d101      	bne.n	8004150 <HAL_GPIO_Init+0x1cc>
 800414c:	2302      	movs	r3, #2
 800414e:	e004      	b.n	800415a <HAL_GPIO_Init+0x1d6>
 8004150:	2307      	movs	r3, #7
 8004152:	e002      	b.n	800415a <HAL_GPIO_Init+0x1d6>
 8004154:	2301      	movs	r3, #1
 8004156:	e000      	b.n	800415a <HAL_GPIO_Init+0x1d6>
 8004158:	2300      	movs	r3, #0
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	f002 0203 	and.w	r2, r2, #3
 8004160:	0092      	lsls	r2, r2, #2
 8004162:	4093      	lsls	r3, r2
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800416a:	4937      	ldr	r1, [pc, #220]	@ (8004248 <HAL_GPIO_Init+0x2c4>)
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	089b      	lsrs	r3, r3, #2
 8004170:	3302      	adds	r3, #2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004178:	4b36      	ldr	r3, [pc, #216]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	43db      	mvns	r3, r3
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4013      	ands	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800419c:	4a2d      	ldr	r2, [pc, #180]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80041a2:	4b2c      	ldr	r3, [pc, #176]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041c6:	4a23      	ldr	r2, [pc, #140]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041cc:	4b21      	ldr	r3, [pc, #132]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	43db      	mvns	r3, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4013      	ands	r3, r2
 80041da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041f0:	4a18      	ldr	r2, [pc, #96]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041f6:	4b17      	ldr	r3, [pc, #92]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	43db      	mvns	r3, r3
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	4013      	ands	r3, r2
 8004204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4313      	orrs	r3, r2
 8004218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800421a:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <HAL_GPIO_Init+0x2d0>)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	3301      	adds	r3, #1
 8004224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
 8004230:	2b00      	cmp	r3, #0
 8004232:	f47f aeaf 	bne.w	8003f94 <HAL_GPIO_Init+0x10>
  }
}
 8004236:	bf00      	nop
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr
 8004244:	40021000 	.word	0x40021000
 8004248:	40010000 	.word	0x40010000
 800424c:	48000400 	.word	0x48000400
 8004250:	48000800 	.word	0x48000800
 8004254:	40010400 	.word	0x40010400

08004258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004268:	787b      	ldrb	r3, [r7, #1]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004274:	e002      	b.n	800427c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004292:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	88fb      	ldrh	r3, [r7, #6]
 8004298:	4013      	ands	r3, r2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d006      	beq.n	80042ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800429e:	4a05      	ldr	r2, [pc, #20]	@ (80042b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fc ff5a 	bl	8001160 <HAL_GPIO_EXTI_Callback>
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40010400 	.word	0x40010400

080042b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80042bc:	4b04      	ldr	r3, [pc, #16]	@ (80042d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40007000 	.word	0x40007000

080042d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e2:	d130      	bne.n	8004346 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80042e4:	4b23      	ldr	r3, [pc, #140]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f0:	d038      	beq.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042f2:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004300:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004302:	4b1d      	ldr	r3, [pc, #116]	@ (8004378 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2232      	movs	r2, #50	@ 0x32
 8004308:	fb02 f303 	mul.w	r3, r2, r3
 800430c:	4a1b      	ldr	r2, [pc, #108]	@ (800437c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0c9b      	lsrs	r3, r3, #18
 8004314:	3301      	adds	r3, #1
 8004316:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004318:	e002      	b.n	8004320 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3b01      	subs	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004320:	4b14      	ldr	r3, [pc, #80]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004322:	695b      	ldr	r3, [r3, #20]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432c:	d102      	bne.n	8004334 <HAL_PWREx_ControlVoltageScaling+0x60>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f2      	bne.n	800431a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004334:	4b0f      	ldr	r3, [pc, #60]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004340:	d110      	bne.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e00f      	b.n	8004366 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004346:	4b0b      	ldr	r3, [pc, #44]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004352:	d007      	beq.n	8004364 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004354:	4b07      	ldr	r3, [pc, #28]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800435c:	4a05      	ldr	r2, [pc, #20]	@ (8004374 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800435e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004362:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	40007000 	.word	0x40007000
 8004378:	20000010 	.word	0x20000010
 800437c:	431bde83 	.word	0x431bde83

08004380 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f000 bc02 	b.w	8004b98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004394:	4b96      	ldr	r3, [pc, #600]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800439e:	4b94      	ldr	r3, [pc, #592]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 80e4 	beq.w	800457e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <HAL_RCC_OscConfig+0x4c>
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	f040 808b 	bne.w	80044da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	f040 8087 	bne.w	80044da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043cc:	4b88      	ldr	r3, [pc, #544]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0302 	and.w	r3, r3, #2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCC_OscConfig+0x64>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e3d9      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1a      	ldr	r2, [r3, #32]
 80043e8:	4b81      	ldr	r3, [pc, #516]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d004      	beq.n	80043fe <HAL_RCC_OscConfig+0x7e>
 80043f4:	4b7e      	ldr	r3, [pc, #504]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043fc:	e005      	b.n	800440a <HAL_RCC_OscConfig+0x8a>
 80043fe:	4b7c      	ldr	r3, [pc, #496]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004400:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004404:	091b      	lsrs	r3, r3, #4
 8004406:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800440a:	4293      	cmp	r3, r2
 800440c:	d223      	bcs.n	8004456 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fd8c 	bl	8004f30 <RCC_SetFlashLatencyFromMSIRange>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e3ba      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004422:	4b73      	ldr	r3, [pc, #460]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a72      	ldr	r2, [pc, #456]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004428:	f043 0308 	orr.w	r3, r3, #8
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b70      	ldr	r3, [pc, #448]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	496d      	ldr	r1, [pc, #436]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800443c:	4313      	orrs	r3, r2
 800443e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004440:	4b6b      	ldr	r3, [pc, #428]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	4968      	ldr	r1, [pc, #416]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004450:	4313      	orrs	r3, r2
 8004452:	604b      	str	r3, [r1, #4]
 8004454:	e025      	b.n	80044a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004456:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a65      	ldr	r2, [pc, #404]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800445c:	f043 0308 	orr.w	r3, r3, #8
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	4b63      	ldr	r3, [pc, #396]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4960      	ldr	r1, [pc, #384]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004474:	4b5e      	ldr	r3, [pc, #376]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	495b      	ldr	r1, [pc, #364]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fd4c 	bl	8004f30 <RCC_SetFlashLatencyFromMSIRange>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e37a      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044a2:	f000 fc81 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 80044a6:	4602      	mov	r2, r0
 80044a8:	4b51      	ldr	r3, [pc, #324]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	091b      	lsrs	r3, r3, #4
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	4950      	ldr	r1, [pc, #320]	@ (80045f4 <HAL_RCC_OscConfig+0x274>)
 80044b4:	5ccb      	ldrb	r3, [r1, r3]
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	fa22 f303 	lsr.w	r3, r2, r3
 80044be:	4a4e      	ldr	r2, [pc, #312]	@ (80045f8 <HAL_RCC_OscConfig+0x278>)
 80044c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044c2:	4b4e      	ldr	r3, [pc, #312]	@ (80045fc <HAL_RCC_OscConfig+0x27c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7fd fea8 	bl	800221c <HAL_InitTick>
 80044cc:	4603      	mov	r3, r0
 80044ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d052      	beq.n	800457c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	e35e      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d032      	beq.n	8004548 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044e2:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a42      	ldr	r2, [pc, #264]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80044e8:	f043 0301 	orr.w	r3, r3, #1
 80044ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80044ee:	f7fd fee5 	bl	80022bc <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044f6:	f7fd fee1 	bl	80022bc <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e347      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004508:	4b39      	ldr	r3, [pc, #228]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004514:	4b36      	ldr	r3, [pc, #216]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a35      	ldr	r2, [pc, #212]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800451a:	f043 0308 	orr.w	r3, r3, #8
 800451e:	6013      	str	r3, [r2, #0]
 8004520:	4b33      	ldr	r3, [pc, #204]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	4930      	ldr	r1, [pc, #192]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800452e:	4313      	orrs	r3, r2
 8004530:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004532:	4b2f      	ldr	r3, [pc, #188]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69db      	ldr	r3, [r3, #28]
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	492b      	ldr	r1, [pc, #172]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004542:	4313      	orrs	r3, r2
 8004544:	604b      	str	r3, [r1, #4]
 8004546:	e01a      	b.n	800457e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004548:	4b29      	ldr	r3, [pc, #164]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a28      	ldr	r2, [pc, #160]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800454e:	f023 0301 	bic.w	r3, r3, #1
 8004552:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004554:	f7fd feb2 	bl	80022bc <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800455c:	f7fd feae 	bl	80022bc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e314      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800456e:	4b20      	ldr	r3, [pc, #128]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x1dc>
 800457a:	e000      	b.n	800457e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800457c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d073      	beq.n	8004672 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d005      	beq.n	800459c <HAL_RCC_OscConfig+0x21c>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	2b0c      	cmp	r3, #12
 8004594:	d10e      	bne.n	80045b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10b      	bne.n	80045b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800459c:	4b14      	ldr	r3, [pc, #80]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d063      	beq.n	8004670 <HAL_RCC_OscConfig+0x2f0>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d15f      	bne.n	8004670 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e2f1      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045bc:	d106      	bne.n	80045cc <HAL_RCC_OscConfig+0x24c>
 80045be:	4b0c      	ldr	r3, [pc, #48]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a0b      	ldr	r2, [pc, #44]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80045c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e025      	b.n	8004618 <HAL_RCC_OscConfig+0x298>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045d4:	d114      	bne.n	8004600 <HAL_RCC_OscConfig+0x280>
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a05      	ldr	r2, [pc, #20]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80045dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b03      	ldr	r3, [pc, #12]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a02      	ldr	r2, [pc, #8]	@ (80045f0 <HAL_RCC_OscConfig+0x270>)
 80045e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045ec:	6013      	str	r3, [r2, #0]
 80045ee:	e013      	b.n	8004618 <HAL_RCC_OscConfig+0x298>
 80045f0:	40021000 	.word	0x40021000
 80045f4:	0800c264 	.word	0x0800c264
 80045f8:	20000010 	.word	0x20000010
 80045fc:	20000014 	.word	0x20000014
 8004600:	4ba0      	ldr	r3, [pc, #640]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a9f      	ldr	r2, [pc, #636]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	4b9d      	ldr	r3, [pc, #628]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a9c      	ldr	r2, [pc, #624]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d013      	beq.n	8004648 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fd fe4c 	bl	80022bc <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004628:	f7fd fe48 	bl	80022bc <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	@ 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e2ae      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463a:	4b92      	ldr	r3, [pc, #584]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x2a8>
 8004646:	e014      	b.n	8004672 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd fe38 	bl	80022bc <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004650:	f7fd fe34 	bl	80022bc <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b64      	cmp	r3, #100	@ 0x64
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e29a      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004662:	4b88      	ldr	r3, [pc, #544]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x2d0>
 800466e:	e000      	b.n	8004672 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d060      	beq.n	8004740 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b04      	cmp	r3, #4
 8004682:	d005      	beq.n	8004690 <HAL_RCC_OscConfig+0x310>
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b0c      	cmp	r3, #12
 8004688:	d119      	bne.n	80046be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b02      	cmp	r3, #2
 800468e:	d116      	bne.n	80046be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004690:	4b7c      	ldr	r3, [pc, #496]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_OscConfig+0x328>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e277      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b76      	ldr	r3, [pc, #472]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	691b      	ldr	r3, [r3, #16]
 80046b4:	061b      	lsls	r3, r3, #24
 80046b6:	4973      	ldr	r1, [pc, #460]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046bc:	e040      	b.n	8004740 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d023      	beq.n	800470e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c6:	4b6f      	ldr	r3, [pc, #444]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a6e      	ldr	r2, [pc, #440]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80046cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d2:	f7fd fdf3 	bl	80022bc <HAL_GetTick>
 80046d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d8:	e008      	b.n	80046ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046da:	f7fd fdef 	bl	80022bc <HAL_GetTick>
 80046de:	4602      	mov	r2, r0
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e255      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ec:	4b65      	ldr	r3, [pc, #404]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0f0      	beq.n	80046da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f8:	4b62      	ldr	r3, [pc, #392]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	061b      	lsls	r3, r3, #24
 8004706:	495f      	ldr	r1, [pc, #380]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004708:	4313      	orrs	r3, r2
 800470a:	604b      	str	r3, [r1, #4]
 800470c:	e018      	b.n	8004740 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470e:	4b5d      	ldr	r3, [pc, #372]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a5c      	ldr	r2, [pc, #368]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004714:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471a:	f7fd fdcf 	bl	80022bc <HAL_GetTick>
 800471e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004722:	f7fd fdcb 	bl	80022bc <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e231      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004734:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d03c      	beq.n	80047c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01c      	beq.n	800478e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004754:	4b4b      	ldr	r3, [pc, #300]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475a:	4a4a      	ldr	r2, [pc, #296]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fd fdaa 	bl	80022bc <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476c:	f7fd fda6 	bl	80022bc <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e20c      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800477e:	4b41      	ldr	r3, [pc, #260]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0ef      	beq.n	800476c <HAL_RCC_OscConfig+0x3ec>
 800478c:	e01b      	b.n	80047c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478e:	4b3d      	ldr	r3, [pc, #244]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004790:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004794:	4a3b      	ldr	r2, [pc, #236]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004796:	f023 0301 	bic.w	r3, r3, #1
 800479a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fd fd8d 	bl	80022bc <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a6:	f7fd fd89 	bl	80022bc <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e1ef      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047b8:	4b32      	ldr	r3, [pc, #200]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80047ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1ef      	bne.n	80047a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80a6 	beq.w	8004920 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d4:	2300      	movs	r3, #0
 80047d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80047d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80047da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10d      	bne.n	8004800 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047e4:	4b27      	ldr	r3, [pc, #156]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	4a26      	ldr	r2, [pc, #152]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80047ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f0:	4b24      	ldr	r3, [pc, #144]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047fc:	2301      	movs	r3, #1
 80047fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004800:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <HAL_RCC_OscConfig+0x508>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d118      	bne.n	800483e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480c:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HAL_RCC_OscConfig+0x508>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1d      	ldr	r2, [pc, #116]	@ (8004888 <HAL_RCC_OscConfig+0x508>)
 8004812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004816:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004818:	f7fd fd50 	bl	80022bc <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004820:	f7fd fd4c 	bl	80022bc <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e1b2      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004832:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <HAL_RCC_OscConfig+0x508>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d108      	bne.n	8004858 <HAL_RCC_OscConfig+0x4d8>
 8004846:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	4a0d      	ldr	r2, [pc, #52]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004856:	e029      	b.n	80048ac <HAL_RCC_OscConfig+0x52c>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	2b05      	cmp	r3, #5
 800485e:	d115      	bne.n	800488c <HAL_RCC_OscConfig+0x50c>
 8004860:	4b08      	ldr	r3, [pc, #32]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004866:	4a07      	ldr	r2, [pc, #28]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004868:	f043 0304 	orr.w	r3, r3, #4
 800486c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004870:	4b04      	ldr	r3, [pc, #16]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	4a03      	ldr	r2, [pc, #12]	@ (8004884 <HAL_RCC_OscConfig+0x504>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004880:	e014      	b.n	80048ac <HAL_RCC_OscConfig+0x52c>
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	40007000 	.word	0x40007000
 800488c:	4b9a      	ldr	r3, [pc, #616]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004892:	4a99      	ldr	r2, [pc, #612]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004894:	f023 0301 	bic.w	r3, r3, #1
 8004898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800489c:	4b96      	ldr	r3, [pc, #600]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a2:	4a95      	ldr	r2, [pc, #596]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 80048a4:	f023 0304 	bic.w	r3, r3, #4
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d016      	beq.n	80048e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048b4:	f7fd fd02 	bl	80022bc <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ba:	e00a      	b.n	80048d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048bc:	f7fd fcfe 	bl	80022bc <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e162      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d2:	4b89      	ldr	r3, [pc, #548]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ed      	beq.n	80048bc <HAL_RCC_OscConfig+0x53c>
 80048e0:	e015      	b.n	800490e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd fceb 	bl	80022bc <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ea:	f7fd fce7 	bl	80022bc <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e14b      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004900:	4b7d      	ldr	r3, [pc, #500]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1ed      	bne.n	80048ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800490e:	7ffb      	ldrb	r3, [r7, #31]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d105      	bne.n	8004920 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004914:	4b78      	ldr	r3, [pc, #480]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004918:	4a77      	ldr	r2, [pc, #476]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 800491a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800491e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d03c      	beq.n	80049a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01c      	beq.n	800496e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004934:	4b70      	ldr	r3, [pc, #448]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800493a:	4a6f      	ldr	r2, [pc, #444]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004944:	f7fd fcba 	bl	80022bc <HAL_GetTick>
 8004948:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800494a:	e008      	b.n	800495e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800494c:	f7fd fcb6 	bl	80022bc <HAL_GetTick>
 8004950:	4602      	mov	r2, r0
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	2b02      	cmp	r3, #2
 8004958:	d901      	bls.n	800495e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e11c      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800495e:	4b66      	ldr	r3, [pc, #408]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004964:	f003 0302 	and.w	r3, r3, #2
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0ef      	beq.n	800494c <HAL_RCC_OscConfig+0x5cc>
 800496c:	e01b      	b.n	80049a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800496e:	4b62      	ldr	r3, [pc, #392]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004970:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004974:	4a60      	ldr	r2, [pc, #384]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497e:	f7fd fc9d 	bl	80022bc <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004984:	e008      	b.n	8004998 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004986:	f7fd fc99 	bl	80022bc <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	2b02      	cmp	r3, #2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e0ff      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004998:	4b57      	ldr	r3, [pc, #348]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 800499a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1ef      	bne.n	8004986 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 80f3 	beq.w	8004b96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	f040 80c9 	bne.w	8004b4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80049ba:	4b4f      	ldr	r3, [pc, #316]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f003 0203 	and.w	r2, r3, #3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d12c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d8:	3b01      	subs	r3, #1
 80049da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d123      	bne.n	8004a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d11b      	bne.n	8004a28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d113      	bne.n	8004a28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0a:	085b      	lsrs	r3, r3, #1
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d109      	bne.n	8004a28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	3b01      	subs	r3, #1
 8004a22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d06b      	beq.n	8004b00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b0c      	cmp	r3, #12
 8004a2c:	d062      	beq.n	8004af4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004a2e:	4b32      	ldr	r3, [pc, #200]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e0ac      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a3e:	4b2e      	ldr	r3, [pc, #184]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a2d      	ldr	r2, [pc, #180]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004a44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a4a:	f7fd fc37 	bl	80022bc <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a52:	f7fd fc33 	bl	80022bc <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e099      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a64:	4b24      	ldr	r3, [pc, #144]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f0      	bne.n	8004a52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a70:	4b21      	ldr	r3, [pc, #132]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <HAL_RCC_OscConfig+0x77c>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a80:	3a01      	subs	r2, #1
 8004a82:	0112      	lsls	r2, r2, #4
 8004a84:	4311      	orrs	r1, r2
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a8a:	0212      	lsls	r2, r2, #8
 8004a8c:	4311      	orrs	r1, r2
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a92:	0852      	lsrs	r2, r2, #1
 8004a94:	3a01      	subs	r2, #1
 8004a96:	0552      	lsls	r2, r2, #21
 8004a98:	4311      	orrs	r1, r2
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a9e:	0852      	lsrs	r2, r2, #1
 8004aa0:	3a01      	subs	r2, #1
 8004aa2:	0652      	lsls	r2, r2, #25
 8004aa4:	4311      	orrs	r1, r2
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004aaa:	06d2      	lsls	r2, r2, #27
 8004aac:	430a      	orrs	r2, r1
 8004aae:	4912      	ldr	r1, [pc, #72]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ab4:	4b10      	ldr	r3, [pc, #64]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a0f      	ldr	r2, [pc, #60]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004aba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004abe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004aca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004acc:	f7fd fbf6 	bl	80022bc <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad4:	f7fd fbf2 	bl	80022bc <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e058      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ae6:	4b04      	ldr	r3, [pc, #16]	@ (8004af8 <HAL_RCC_OscConfig+0x778>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004af2:	e050      	b.n	8004b96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e04f      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
 8004af8:	40021000 	.word	0x40021000
 8004afc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b00:	4b27      	ldr	r3, [pc, #156]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d144      	bne.n	8004b96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004b0c:	4b24      	ldr	r3, [pc, #144]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a23      	ldr	r2, [pc, #140]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b18:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b24:	f7fd fbca 	bl	80022bc <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2c:	f7fd fbc6 	bl	80022bc <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e02c      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b3e:	4b18      	ldr	r3, [pc, #96]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x7ac>
 8004b4a:	e024      	b.n	8004b96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d01f      	beq.n	8004b92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd fbad 	bl	80022bc <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fd fba9 	bl	80022bc <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e00f      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b78:	4b09      	ldr	r3, [pc, #36]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1f0      	bne.n	8004b66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004b84:	4b06      	ldr	r3, [pc, #24]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	4905      	ldr	r1, [pc, #20]	@ (8004ba0 <HAL_RCC_OscConfig+0x820>)
 8004b8a:	4b06      	ldr	r3, [pc, #24]	@ (8004ba4 <HAL_RCC_OscConfig+0x824>)
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60cb      	str	r3, [r1, #12]
 8004b90:	e001      	b.n	8004b96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3720      	adds	r7, #32
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40021000 	.word	0x40021000
 8004ba4:	feeefffc 	.word	0xfeeefffc

08004ba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d101      	bne.n	8004bbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e0e7      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bbc:	4b75      	ldr	r3, [pc, #468]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d910      	bls.n	8004bec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bca:	4b72      	ldr	r3, [pc, #456]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 0207 	bic.w	r2, r3, #7
 8004bd2:	4970      	ldr	r1, [pc, #448]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bda:	4b6e      	ldr	r3, [pc, #440]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0307 	and.w	r3, r3, #7
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d001      	beq.n	8004bec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0cf      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d010      	beq.n	8004c1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	4b66      	ldr	r3, [pc, #408]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d908      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c08:	4b63      	ldr	r3, [pc, #396]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	4960      	ldr	r1, [pc, #384]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d04c      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b03      	cmp	r3, #3
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d121      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e0a6      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d107      	bne.n	8004c56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c46:	4b54      	ldr	r3, [pc, #336]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d115      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e09a      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c5e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e08e      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e086      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c7e:	4b46      	ldr	r3, [pc, #280]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4943      	ldr	r1, [pc, #268]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c90:	f7fd fb14 	bl	80022bc <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fd fb10 	bl	80022bc <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e06e      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	4b3a      	ldr	r3, [pc, #232]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 020c 	and.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1eb      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	4b31      	ldr	r3, [pc, #196]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d208      	bcs.n	8004cee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	492b      	ldr	r1, [pc, #172]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cee:	4b29      	ldr	r3, [pc, #164]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d210      	bcs.n	8004d1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfc:	4b25      	ldr	r3, [pc, #148]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f023 0207 	bic.w	r2, r3, #7
 8004d04:	4923      	ldr	r1, [pc, #140]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0c:	4b21      	ldr	r3, [pc, #132]	@ (8004d94 <HAL_RCC_ClockConfig+0x1ec>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0307 	and.w	r3, r3, #7
 8004d14:	683a      	ldr	r2, [r7, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d001      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e036      	b.n	8004d8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d008      	beq.n	8004d3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	4918      	ldr	r1, [pc, #96]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d009      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d48:	4b13      	ldr	r3, [pc, #76]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4910      	ldr	r1, [pc, #64]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d5c:	f000 f824 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 8004d60:	4602      	mov	r2, r0
 8004d62:	4b0d      	ldr	r3, [pc, #52]	@ (8004d98 <HAL_RCC_ClockConfig+0x1f0>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	091b      	lsrs	r3, r3, #4
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	490b      	ldr	r1, [pc, #44]	@ (8004d9c <HAL_RCC_ClockConfig+0x1f4>)
 8004d6e:	5ccb      	ldrb	r3, [r1, r3]
 8004d70:	f003 031f 	and.w	r3, r3, #31
 8004d74:	fa22 f303 	lsr.w	r3, r2, r3
 8004d78:	4a09      	ldr	r2, [pc, #36]	@ (8004da0 <HAL_RCC_ClockConfig+0x1f8>)
 8004d7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d7c:	4b09      	ldr	r3, [pc, #36]	@ (8004da4 <HAL_RCC_ClockConfig+0x1fc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fd fa4b 	bl	800221c <HAL_InitTick>
 8004d86:	4603      	mov	r3, r0
 8004d88:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d8a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	0800c264 	.word	0x0800c264
 8004da0:	20000010 	.word	0x20000010
 8004da4:	20000014 	.word	0x20000014

08004da8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b089      	sub	sp, #36	@ 0x24
 8004dac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	61fb      	str	r3, [r7, #28]
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db6:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d005      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x34>
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	2b0c      	cmp	r3, #12
 8004dd4:	d121      	bne.n	8004e1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d11e      	bne.n	8004e1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ddc:	4b34      	ldr	r3, [pc, #208]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0308 	and.w	r3, r3, #8
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004de8:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	e005      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004df8:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004e04:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10d      	bne.n	8004e30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d102      	bne.n	8004e26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004e20:	4b25      	ldr	r3, [pc, #148]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	e004      	b.n	8004e30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d101      	bne.n	8004e30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e2c:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b0c      	cmp	r3, #12
 8004e34:	d134      	bne.n	8004ea0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e36:	4b1e      	ldr	r3, [pc, #120]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d003      	beq.n	8004e4e <HAL_RCC_GetSysClockFreq+0xa6>
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d003      	beq.n	8004e54 <HAL_RCC_GetSysClockFreq+0xac>
 8004e4c:	e005      	b.n	8004e5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e50:	617b      	str	r3, [r7, #20]
      break;
 8004e52:	e005      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e54:	4b19      	ldr	r3, [pc, #100]	@ (8004ebc <HAL_RCC_GetSysClockFreq+0x114>)
 8004e56:	617b      	str	r3, [r7, #20]
      break;
 8004e58:	e002      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	617b      	str	r3, [r7, #20]
      break;
 8004e5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e60:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e6e:	4b10      	ldr	r3, [pc, #64]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	0a1b      	lsrs	r3, r3, #8
 8004e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e78:	697a      	ldr	r2, [r7, #20]
 8004e7a:	fb03 f202 	mul.w	r2, r3, r2
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	0e5b      	lsrs	r3, r3, #25
 8004e8c:	f003 0303 	and.w	r3, r3, #3
 8004e90:	3301      	adds	r3, #1
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3724      	adds	r7, #36	@ 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	0800c27c 	.word	0x0800c27c
 8004eb8:	00f42400 	.word	0x00f42400
 8004ebc:	007a1200 	.word	0x007a1200

08004ec0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	20000010 	.word	0x20000010

08004ed8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004edc:	f7ff fff0 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	4b06      	ldr	r3, [pc, #24]	@ (8004efc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	0a1b      	lsrs	r3, r3, #8
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	4904      	ldr	r1, [pc, #16]	@ (8004f00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eee:	5ccb      	ldrb	r3, [r1, r3]
 8004ef0:	f003 031f 	and.w	r3, r3, #31
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	40021000 	.word	0x40021000
 8004f00:	0800c274 	.word	0x0800c274

08004f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004f08:	f7ff ffda 	bl	8004ec0 <HAL_RCC_GetHCLKFreq>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	0adb      	lsrs	r3, r3, #11
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	4904      	ldr	r1, [pc, #16]	@ (8004f2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004f1a:	5ccb      	ldrb	r3, [r1, r3]
 8004f1c:	f003 031f 	and.w	r3, r3, #31
 8004f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	0800c274 	.word	0x0800c274

08004f30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f48:	f7ff f9b6 	bl	80042b8 <HAL_PWREx_GetVoltageRange>
 8004f4c:	6178      	str	r0, [r7, #20]
 8004f4e:	e014      	b.n	8004f7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f50:	4b25      	ldr	r3, [pc, #148]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	4a24      	ldr	r2, [pc, #144]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f5c:	4b22      	ldr	r3, [pc, #136]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f68:	f7ff f9a6 	bl	80042b8 <HAL_PWREx_GetVoltageRange>
 8004f6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f72:	4a1d      	ldr	r2, [pc, #116]	@ (8004fe8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f80:	d10b      	bne.n	8004f9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b80      	cmp	r3, #128	@ 0x80
 8004f86:	d919      	bls.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2ba0      	cmp	r3, #160	@ 0xa0
 8004f8c:	d902      	bls.n	8004f94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f8e:	2302      	movs	r3, #2
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	e013      	b.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f94:	2301      	movs	r3, #1
 8004f96:	613b      	str	r3, [r7, #16]
 8004f98:	e010      	b.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2b80      	cmp	r3, #128	@ 0x80
 8004f9e:	d902      	bls.n	8004fa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	e00a      	b.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b80      	cmp	r3, #128	@ 0x80
 8004faa:	d102      	bne.n	8004fb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004fac:	2302      	movs	r3, #2
 8004fae:	613b      	str	r3, [r7, #16]
 8004fb0:	e004      	b.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b70      	cmp	r3, #112	@ 0x70
 8004fb6:	d101      	bne.n	8004fbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004fb8:	2301      	movs	r3, #1
 8004fba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f023 0207 	bic.w	r2, r3, #7
 8004fc4:	4909      	ldr	r1, [pc, #36]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d001      	beq.n	8004fde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e000      	b.n	8004fe0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40022000 	.word	0x40022000

08004ff0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005008:	2b00      	cmp	r3, #0
 800500a:	d031      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005010:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005014:	d01a      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005016:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800501a:	d814      	bhi.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005020:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005024:	d10f      	bne.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005026:	4b5d      	ldr	r3, [pc, #372]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	4a5c      	ldr	r2, [pc, #368]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800502c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005030:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005032:	e00c      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3304      	adds	r3, #4
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f000 f9ce 	bl	80053dc <RCCEx_PLLSAI1_Config>
 8005040:	4603      	mov	r3, r0
 8005042:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005044:	e003      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	74fb      	strb	r3, [r7, #19]
      break;
 800504a:	e000      	b.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800504c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800504e:	7cfb      	ldrb	r3, [r7, #19]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10b      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005054:	4b51      	ldr	r3, [pc, #324]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	494e      	ldr	r1, [pc, #312]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005064:	4313      	orrs	r3, r2
 8005066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800506a:	e001      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800506c:	7cfb      	ldrb	r3, [r7, #19]
 800506e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 809e 	beq.w	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800507e:	2300      	movs	r3, #0
 8005080:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005082:	4b46      	ldr	r3, [pc, #280]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005086:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005092:	2300      	movs	r3, #0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005098:	4b40      	ldr	r3, [pc, #256]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800509c:	4a3f      	ldr	r2, [pc, #252]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80050a4:	4b3d      	ldr	r3, [pc, #244]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050b0:	2301      	movs	r3, #1
 80050b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050b4:	4b3a      	ldr	r3, [pc, #232]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a39      	ldr	r2, [pc, #228]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050c0:	f7fd f8fc 	bl	80022bc <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050c6:	e009      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c8:	f7fd f8f8 	bl	80022bc <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d902      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	74fb      	strb	r3, [r7, #19]
        break;
 80050da:	e005      	b.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80050dc:	4b30      	ldr	r3, [pc, #192]	@ (80051a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0ef      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d15a      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80050ee:	4b2b      	ldr	r3, [pc, #172]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01e      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005104:	697a      	ldr	r2, [r7, #20]
 8005106:	429a      	cmp	r2, r3
 8005108:	d019      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800510a:	4b24      	ldr	r3, [pc, #144]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800510c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005110:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005114:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005116:	4b21      	ldr	r3, [pc, #132]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800511c:	4a1f      	ldr	r2, [pc, #124]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005122:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005126:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512c:	4a1b      	ldr	r2, [pc, #108]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800512e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005136:	4a19      	ldr	r2, [pc, #100]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d016      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005148:	f7fd f8b8 	bl	80022bc <HAL_GetTick>
 800514c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514e:	e00b      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005150:	f7fd f8b4 	bl	80022bc <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515e:	4293      	cmp	r3, r2
 8005160:	d902      	bls.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	74fb      	strb	r3, [r7, #19]
            break;
 8005166:	e006      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d0ec      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10b      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517c:	4b07      	ldr	r3, [pc, #28]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800518a:	4904      	ldr	r1, [pc, #16]	@ (800519c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800518c:	4313      	orrs	r3, r2
 800518e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005192:	e009      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005194:	7cfb      	ldrb	r3, [r7, #19]
 8005196:	74bb      	strb	r3, [r7, #18]
 8005198:	e006      	b.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800519a:	bf00      	nop
 800519c:	40021000 	.word	0x40021000
 80051a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051a4:	7cfb      	ldrb	r3, [r7, #19]
 80051a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051a8:	7c7b      	ldrb	r3, [r7, #17]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d105      	bne.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ae:	4b8a      	ldr	r3, [pc, #552]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051b2:	4a89      	ldr	r2, [pc, #548]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051c6:	4b84      	ldr	r3, [pc, #528]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051cc:	f023 0203 	bic.w	r2, r3, #3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	4980      	ldr	r1, [pc, #512]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051e8:	4b7b      	ldr	r3, [pc, #492]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	f023 020c 	bic.w	r2, r3, #12
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f6:	4978      	ldr	r1, [pc, #480]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800520a:	4b73      	ldr	r3, [pc, #460]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800520c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005210:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	496f      	ldr	r1, [pc, #444]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800522c:	4b6a      	ldr	r3, [pc, #424]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005232:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523a:	4967      	ldr	r1, [pc, #412]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00a      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800524e:	4b62      	ldr	r3, [pc, #392]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005254:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525c:	495e      	ldr	r1, [pc, #376]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00a      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005270:	4b59      	ldr	r3, [pc, #356]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005276:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	4956      	ldr	r1, [pc, #344]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005280:	4313      	orrs	r3, r2
 8005282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005292:	4b51      	ldr	r3, [pc, #324]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005298:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a0:	494d      	ldr	r1, [pc, #308]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d028      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052b4:	4b48      	ldr	r3, [pc, #288]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	4945      	ldr	r1, [pc, #276]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052d2:	d106      	bne.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d4:	4b40      	ldr	r3, [pc, #256]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	4a3f      	ldr	r2, [pc, #252]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80052da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052de:	60d3      	str	r3, [r2, #12]
 80052e0:	e011      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052ea:	d10c      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3304      	adds	r3, #4
 80052f0:	2101      	movs	r1, #1
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f872 	bl	80053dc <RCCEx_PLLSAI1_Config>
 80052f8:	4603      	mov	r3, r0
 80052fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052fc:	7cfb      	ldrb	r3, [r7, #19]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005302:	7cfb      	ldrb	r3, [r7, #19]
 8005304:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d028      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005312:	4b31      	ldr	r3, [pc, #196]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005318:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005320:	492d      	ldr	r1, [pc, #180]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800532c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005330:	d106      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005332:	4b29      	ldr	r3, [pc, #164]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4a28      	ldr	r2, [pc, #160]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800533c:	60d3      	str	r3, [r2, #12]
 800533e:	e011      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005348:	d10c      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	2101      	movs	r1, #1
 8005350:	4618      	mov	r0, r3
 8005352:	f000 f843 	bl	80053dc <RCCEx_PLLSAI1_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800535a:	7cfb      	ldrb	r3, [r7, #19]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01c      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005370:	4b19      	ldr	r3, [pc, #100]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005376:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800537e:	4916      	ldr	r1, [pc, #88]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005380:	4313      	orrs	r3, r2
 8005382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800538a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800538e:	d10c      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	3304      	adds	r3, #4
 8005394:	2102      	movs	r1, #2
 8005396:	4618      	mov	r0, r3
 8005398:	f000 f820 	bl	80053dc <RCCEx_PLLSAI1_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053a0:	7cfb      	ldrb	r3, [r7, #19]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00a      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053b6:	4b08      	ldr	r3, [pc, #32]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053c4:	4904      	ldr	r1, [pc, #16]	@ (80053d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000

080053dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b084      	sub	sp, #16
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053e6:	2300      	movs	r3, #0
 80053e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053ea:	4b74      	ldr	r3, [pc, #464]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d018      	beq.n	8005428 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053f6:	4b71      	ldr	r3, [pc, #452]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0203 	and.w	r2, r3, #3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d10d      	bne.n	8005422 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
       ||
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800540e:	4b6b      	ldr	r3, [pc, #428]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	1c5a      	adds	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
       ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d047      	beq.n	80054b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	e044      	b.n	80054b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d018      	beq.n	8005462 <RCCEx_PLLSAI1_Config+0x86>
 8005430:	2b03      	cmp	r3, #3
 8005432:	d825      	bhi.n	8005480 <RCCEx_PLLSAI1_Config+0xa4>
 8005434:	2b01      	cmp	r3, #1
 8005436:	d002      	beq.n	800543e <RCCEx_PLLSAI1_Config+0x62>
 8005438:	2b02      	cmp	r3, #2
 800543a:	d009      	beq.n	8005450 <RCCEx_PLLSAI1_Config+0x74>
 800543c:	e020      	b.n	8005480 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800543e:	4b5f      	ldr	r3, [pc, #380]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d11d      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800544e:	e01a      	b.n	8005486 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005450:	4b5a      	ldr	r3, [pc, #360]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005458:	2b00      	cmp	r3, #0
 800545a:	d116      	bne.n	800548a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005460:	e013      	b.n	800548a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005462:	4b56      	ldr	r3, [pc, #344]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800546e:	4b53      	ldr	r3, [pc, #332]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800547e:	e006      	b.n	800548e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	73fb      	strb	r3, [r7, #15]
      break;
 8005484:	e004      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005486:	bf00      	nop
 8005488:	e002      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800548a:	bf00      	nop
 800548c:	e000      	b.n	8005490 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800548e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10d      	bne.n	80054b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005496:	4b49      	ldr	r3, [pc, #292]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	430b      	orrs	r3, r1
 80054ac:	4943      	ldr	r1, [pc, #268]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d17c      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054b8:	4b40      	ldr	r3, [pc, #256]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a3f      	ldr	r2, [pc, #252]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054be:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80054c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c4:	f7fc fefa 	bl	80022bc <HAL_GetTick>
 80054c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054ca:	e009      	b.n	80054e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054cc:	f7fc fef6 	bl	80022bc <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d902      	bls.n	80054e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	73fb      	strb	r3, [r7, #15]
        break;
 80054de:	e005      	b.n	80054ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054e0:	4b36      	ldr	r3, [pc, #216]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1ef      	bne.n	80054cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d15f      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d110      	bne.n	800551a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054f8:	4b30      	ldr	r3, [pc, #192]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8005500:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6892      	ldr	r2, [r2, #8]
 8005508:	0211      	lsls	r1, r2, #8
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	68d2      	ldr	r2, [r2, #12]
 800550e:	06d2      	lsls	r2, r2, #27
 8005510:	430a      	orrs	r2, r1
 8005512:	492a      	ldr	r1, [pc, #168]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005514:	4313      	orrs	r3, r2
 8005516:	610b      	str	r3, [r1, #16]
 8005518:	e027      	b.n	800556a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d112      	bne.n	8005546 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005520:	4b26      	ldr	r3, [pc, #152]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005528:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6892      	ldr	r2, [r2, #8]
 8005530:	0211      	lsls	r1, r2, #8
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6912      	ldr	r2, [r2, #16]
 8005536:	0852      	lsrs	r2, r2, #1
 8005538:	3a01      	subs	r2, #1
 800553a:	0552      	lsls	r2, r2, #21
 800553c:	430a      	orrs	r2, r1
 800553e:	491f      	ldr	r1, [pc, #124]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005540:	4313      	orrs	r3, r2
 8005542:	610b      	str	r3, [r1, #16]
 8005544:	e011      	b.n	800556a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005546:	4b1d      	ldr	r3, [pc, #116]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800554e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6892      	ldr	r2, [r2, #8]
 8005556:	0211      	lsls	r1, r2, #8
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6952      	ldr	r2, [r2, #20]
 800555c:	0852      	lsrs	r2, r2, #1
 800555e:	3a01      	subs	r2, #1
 8005560:	0652      	lsls	r2, r2, #25
 8005562:	430a      	orrs	r2, r1
 8005564:	4915      	ldr	r1, [pc, #84]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005566:	4313      	orrs	r3, r2
 8005568:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800556a:	4b14      	ldr	r3, [pc, #80]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005570:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005574:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005576:	f7fc fea1 	bl	80022bc <HAL_GetTick>
 800557a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800557c:	e009      	b.n	8005592 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800557e:	f7fc fe9d 	bl	80022bc <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d902      	bls.n	8005592 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	73fb      	strb	r3, [r7, #15]
          break;
 8005590:	e005      	b.n	800559e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0ef      	beq.n	800557e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800559e:	7bfb      	ldrb	r3, [r7, #15]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055a4:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	4903      	ldr	r1, [pc, #12]	@ (80055bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3710      	adds	r7, #16
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	40021000 	.word	0x40021000

080055c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e095      	b.n	80056fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d108      	bne.n	80055ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055e2:	d009      	beq.n	80055f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	61da      	str	r2, [r3, #28]
 80055ea:	e005      	b.n	80055f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d106      	bne.n	8005618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc fb6a 	bl	8001cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800562e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005638:	d902      	bls.n	8005640 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800563a:	2300      	movs	r3, #0
 800563c:	60fb      	str	r3, [r7, #12]
 800563e:	e002      	b.n	8005646 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005640:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005644:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800564e:	d007      	beq.n	8005660 <HAL_SPI_Init+0xa0>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005670:	431a      	orrs	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005698:	431a      	orrs	r2, r3
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a2:	ea42 0103 	orr.w	r1, r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	f003 0204 	and.w	r2, r3, #4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	431a      	orrs	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ce:	f003 0308 	and.w	r3, r3, #8
 80056d2:	431a      	orrs	r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80056dc:	ea42 0103 	orr.w	r1, r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3710      	adds	r7, #16
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}

08005706 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b088      	sub	sp, #32
 800570a:	af00      	add	r7, sp, #0
 800570c:	60f8      	str	r0, [r7, #12]
 800570e:	60b9      	str	r1, [r7, #8]
 8005710:	603b      	str	r3, [r7, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_SPI_Transmit+0x22>
 8005724:	2302      	movs	r3, #2
 8005726:	e15f      	b.n	80059e8 <HAL_SPI_Transmit+0x2e2>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005730:	f7fc fdc4 	bl	80022bc <HAL_GetTick>
 8005734:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d002      	beq.n	800574c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005746:	2302      	movs	r3, #2
 8005748:	77fb      	strb	r3, [r7, #31]
    goto error;
 800574a:	e148      	b.n	80059de <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_SPI_Transmit+0x52>
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800575c:	e13f      	b.n	80059de <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2203      	movs	r2, #3
 8005762:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	88fa      	ldrh	r2, [r7, #6]
 800577c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057a8:	d10f      	bne.n	80057ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d4:	2b40      	cmp	r3, #64	@ 0x40
 80057d6:	d007      	beq.n	80057e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057f0:	d94f      	bls.n	8005892 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <HAL_SPI_Transmit+0xfa>
 80057fa:	8afb      	ldrh	r3, [r7, #22]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d142      	bne.n	8005886 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005804:	881a      	ldrh	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	1c9a      	adds	r2, r3, #2
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005824:	e02f      	b.n	8005886 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0302 	and.w	r3, r3, #2
 8005830:	2b02      	cmp	r3, #2
 8005832:	d112      	bne.n	800585a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005838:	881a      	ldrh	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005858:	e015      	b.n	8005886 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800585a:	f7fc fd2f 	bl	80022bc <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	429a      	cmp	r2, r3
 8005868:	d803      	bhi.n	8005872 <HAL_SPI_Transmit+0x16c>
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d102      	bne.n	8005878 <HAL_SPI_Transmit+0x172>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005884:	e0ab      	b.n	80059de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1ca      	bne.n	8005826 <HAL_SPI_Transmit+0x120>
 8005890:	e080      	b.n	8005994 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Transmit+0x19a>
 800589a:	8afb      	ldrh	r3, [r7, #22]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d174      	bne.n	800598a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d912      	bls.n	80058d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ae:	881a      	ldrh	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ba:	1c9a      	adds	r2, r3, #2
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b02      	subs	r3, #2
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80058ce:	e05c      	b.n	800598a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	7812      	ldrb	r2, [r2, #0]
 80058dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80058f6:	e048      	b.n	800598a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b02      	cmp	r3, #2
 8005904:	d12b      	bne.n	800595e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b01      	cmp	r3, #1
 800590e:	d912      	bls.n	8005936 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005914:	881a      	ldrh	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b02      	subs	r3, #2
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005934:	e029      	b.n	800598a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	330c      	adds	r3, #12
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800595c:	e015      	b.n	800598a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800595e:	f7fc fcad 	bl	80022bc <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	683a      	ldr	r2, [r7, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d803      	bhi.n	8005976 <HAL_SPI_Transmit+0x270>
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d102      	bne.n	800597c <HAL_SPI_Transmit+0x276>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d106      	bne.n	800598a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005988:	e029      	b.n	80059de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598e:	b29b      	uxth	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1b1      	bne.n	80058f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fb69 	bl	8006070 <SPI_EndRxTxTransaction>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10a      	bne.n	80059c8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	613b      	str	r3, [r7, #16]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	613b      	str	r3, [r7, #16]
 80059c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e003      	b.n	80059de <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80059e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3720      	adds	r7, #32
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	@ 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059fe:	2301      	movs	r3, #1
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d101      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x26>
 8005a12:	2302      	movs	r3, #2
 8005a14:	e20a      	b.n	8005e2c <HAL_SPI_TransmitReceive+0x43c>
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a1e:	f7fc fc4d 	bl	80022bc <HAL_GetTick>
 8005a22:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a2a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005a32:	887b      	ldrh	r3, [r7, #2]
 8005a34:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005a36:	887b      	ldrh	r3, [r7, #2]
 8005a38:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a3a:	7efb      	ldrb	r3, [r7, #27]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d00e      	beq.n	8005a5e <HAL_SPI_TransmitReceive+0x6e>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a46:	d106      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <HAL_SPI_TransmitReceive+0x66>
 8005a50:	7efb      	ldrb	r3, [r7, #27]
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d003      	beq.n	8005a5e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005a56:	2302      	movs	r3, #2
 8005a58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a5c:	e1e0      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_SPI_TransmitReceive+0x80>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_TransmitReceive+0x80>
 8005a6a:	887b      	ldrh	r3, [r7, #2]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8005a76:	e1d3      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d003      	beq.n	8005a8c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2205      	movs	r2, #5
 8005a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	887a      	ldrh	r2, [r7, #2]
 8005a9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	887a      	ldrh	r2, [r7, #2]
 8005ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	887a      	ldrh	r2, [r7, #2]
 8005ab8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005ace:	d802      	bhi.n	8005ad6 <HAL_SPI_TransmitReceive+0xe6>
 8005ad0:	8a3b      	ldrh	r3, [r7, #16]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d908      	bls.n	8005ae8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ae4:	605a      	str	r2, [r3, #4]
 8005ae6:	e007      	b.n	8005af8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005af6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b02:	2b40      	cmp	r3, #64	@ 0x40
 8005b04:	d007      	beq.n	8005b16 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005b1e:	f240 8081 	bls.w	8005c24 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d002      	beq.n	8005b30 <HAL_SPI_TransmitReceive+0x140>
 8005b2a:	8a7b      	ldrh	r3, [r7, #18]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d16d      	bne.n	8005c0c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	881a      	ldrh	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b40:	1c9a      	adds	r2, r3, #2
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b54:	e05a      	b.n	8005c0c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d11b      	bne.n	8005b9c <HAL_SPI_TransmitReceive+0x1ac>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <HAL_SPI_TransmitReceive+0x1ac>
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d113      	bne.n	8005b9c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	881a      	ldrh	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	1c9a      	adds	r2, r3, #2
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d11c      	bne.n	8005be4 <HAL_SPI_TransmitReceive+0x1f4>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d016      	beq.n	8005be4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68da      	ldr	r2, [r3, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc0:	b292      	uxth	r2, r2
 8005bc2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc8:	1c9a      	adds	r2, r3, #2
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005be0:	2301      	movs	r3, #1
 8005be2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005be4:	f7fc fb6a 	bl	80022bc <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d80b      	bhi.n	8005c0c <HAL_SPI_TransmitReceive+0x21c>
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfa:	d007      	beq.n	8005c0c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2201      	movs	r2, #1
 8005c06:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005c0a:	e109      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d19f      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x166>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d199      	bne.n	8005b56 <HAL_SPI_TransmitReceive+0x166>
 8005c22:	e0e3      	b.n	8005dec <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d003      	beq.n	8005c34 <HAL_SPI_TransmitReceive+0x244>
 8005c2c:	8a7b      	ldrh	r3, [r7, #18]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	f040 80cf 	bne.w	8005dd2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d912      	bls.n	8005c64 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	881a      	ldrh	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	1c9a      	adds	r2, r3, #2
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b02      	subs	r3, #2
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c62:	e0b6      	b.n	8005dd2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c8a:	e0a2      	b.n	8005dd2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d134      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x314>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d02f      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x314>
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d12c      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	d912      	bls.n	8005cda <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb8:	881a      	ldrh	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cc4:	1c9a      	adds	r2, r3, #2
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3b02      	subs	r3, #2
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cd8:	e012      	b.n	8005d00 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d148      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x3b4>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d042      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d923      	bls.n	8005d72 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68da      	ldr	r2, [r3, #12]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d34:	b292      	uxth	r2, r2
 8005d36:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3c:	1c9a      	adds	r2, r3, #2
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b02      	subs	r3, #2
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d81f      	bhi.n	8005da0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685a      	ldr	r2, [r3, #4]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005d6e:	605a      	str	r2, [r3, #4]
 8005d70:	e016      	b.n	8005da0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f103 020c 	add.w	r2, r3, #12
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	7812      	ldrb	r2, [r2, #0]
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d88:	1c5a      	adds	r2, r3, #1
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	3b01      	subs	r3, #1
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005da0:	2301      	movs	r3, #1
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005da4:	f7fc fa8a 	bl	80022bc <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d803      	bhi.n	8005dbc <HAL_SPI_TransmitReceive+0x3cc>
 8005db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dba:	d102      	bne.n	8005dc2 <HAL_SPI_TransmitReceive+0x3d2>
 8005dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d107      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8005dd0:	e026      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f47f af57 	bne.w	8005c8c <HAL_SPI_TransmitReceive+0x29c>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f47f af50 	bne.w	8005c8c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 f93d 	bl	8006070 <SPI_EndRxTxTransaction>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d005      	beq.n	8005e08 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2220      	movs	r2, #32
 8005e06:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e16:	e003      	b.n	8005e20 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005e28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3728      	adds	r7, #40	@ 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}

08005e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	4613      	mov	r3, r2
 8005e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e44:	f7fc fa3a 	bl	80022bc <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	1a9b      	subs	r3, r3, r2
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e54:	f7fc fa32 	bl	80022bc <HAL_GetTick>
 8005e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e5a:	4b39      	ldr	r3, [pc, #228]	@ (8005f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	015b      	lsls	r3, r3, #5
 8005e60:	0d1b      	lsrs	r3, r3, #20
 8005e62:	69fa      	ldr	r2, [r7, #28]
 8005e64:	fb02 f303 	mul.w	r3, r2, r3
 8005e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e6a:	e054      	b.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e72:	d050      	beq.n	8005f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e74:	f7fc fa22 	bl	80022bc <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d902      	bls.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d13d      	bne.n	8005f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ea2:	d111      	bne.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eac:	d004      	beq.n	8005eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eb6:	d107      	bne.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ed0:	d10f      	bne.n	8005ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e017      	b.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	3b01      	subs	r3, #1
 8005f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d19b      	bne.n	8005e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000010 	.word	0x20000010

08005f44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b08a      	sub	sp, #40	@ 0x28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
 8005f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f56:	f7fc f9b1 	bl	80022bc <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	4413      	add	r3, r2
 8005f64:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005f66:	f7fc f9a9 	bl	80022bc <HAL_GetTick>
 8005f6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	330c      	adds	r3, #12
 8005f72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f74:	4b3d      	ldr	r3, [pc, #244]	@ (800606c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4413      	add	r3, r2
 8005f7e:	00da      	lsls	r2, r3, #3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	0d1b      	lsrs	r3, r3, #20
 8005f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f86:	fb02 f303 	mul.w	r3, r2, r3
 8005f8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f8c:	e060      	b.n	8006050 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005f94:	d107      	bne.n	8005fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d104      	bne.n	8005fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005fa4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fac:	d050      	beq.n	8006050 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fae:	f7fc f985 	bl	80022bc <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d902      	bls.n	8005fc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d13d      	bne.n	8006040 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fdc:	d111      	bne.n	8006002 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fe6:	d004      	beq.n	8005ff2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ff0:	d107      	bne.n	8006002 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800600a:	d10f      	bne.n	800602c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800602a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e010      	b.n	8006062 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	3b01      	subs	r3, #1
 800604e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4013      	ands	r3, r2
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	d196      	bne.n	8005f8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3728      	adds	r7, #40	@ 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000010 	.word	0x20000010

08006070 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f7ff ff5b 	bl	8005f44 <SPI_WaitFifoStateUntilTimeout>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d007      	beq.n	80060a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e027      	b.n	80060f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	2200      	movs	r2, #0
 80060ac:	2180      	movs	r1, #128	@ 0x80
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fec0 	bl	8005e34 <SPI_WaitFlagStateUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e014      	b.n	80060f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	9300      	str	r3, [sp, #0]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f7ff ff34 	bl	8005f44 <SPI_WaitFifoStateUntilTimeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80060ee:	2303      	movs	r3, #3
 80060f0:	e000      	b.n	80060f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d101      	bne.n	800610e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e049      	b.n	80061a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fb fe26 	bl	8001d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f000 fb06 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d001      	beq.n	80061c4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e033      	b.n	800622c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a19      	ldr	r2, [pc, #100]	@ (8006238 <HAL_TIM_Base_Start+0x8c>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_TIM_Base_Start+0x3e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061de:	d004      	beq.n	80061ea <HAL_TIM_Base_Start+0x3e>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a15      	ldr	r2, [pc, #84]	@ (800623c <HAL_TIM_Base_Start+0x90>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d115      	bne.n	8006216 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	4b13      	ldr	r3, [pc, #76]	@ (8006240 <HAL_TIM_Base_Start+0x94>)
 80061f2:	4013      	ands	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d015      	beq.n	8006228 <HAL_TIM_Base_Start+0x7c>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006202:	d011      	beq.n	8006228 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006214:	e008      	b.n	8006228 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	e000      	b.n	800622a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006228:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr
 8006238:	40012c00 	.word	0x40012c00
 800623c:	40014000 	.word	0x40014000
 8006240:	00010007 	.word	0x00010007

08006244 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e049      	b.n	80062ea <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d106      	bne.n	8006270 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f841 	bl	80062f2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f000 fa62 	bl	800674c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80062fa:	bf00      	nop
 80062fc:	370c      	adds	r7, #12
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr
	...

08006308 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d109      	bne.n	800632c <HAL_TIM_OC_Start+0x24>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b01      	cmp	r3, #1
 8006322:	bf14      	ite	ne
 8006324:	2301      	movne	r3, #1
 8006326:	2300      	moveq	r3, #0
 8006328:	b2db      	uxtb	r3, r3
 800632a:	e03c      	b.n	80063a6 <HAL_TIM_OC_Start+0x9e>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b04      	cmp	r3, #4
 8006330:	d109      	bne.n	8006346 <HAL_TIM_OC_Start+0x3e>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b01      	cmp	r3, #1
 800633c:	bf14      	ite	ne
 800633e:	2301      	movne	r3, #1
 8006340:	2300      	moveq	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	e02f      	b.n	80063a6 <HAL_TIM_OC_Start+0x9e>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d109      	bne.n	8006360 <HAL_TIM_OC_Start+0x58>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b01      	cmp	r3, #1
 8006356:	bf14      	ite	ne
 8006358:	2301      	movne	r3, #1
 800635a:	2300      	moveq	r3, #0
 800635c:	b2db      	uxtb	r3, r3
 800635e:	e022      	b.n	80063a6 <HAL_TIM_OC_Start+0x9e>
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b0c      	cmp	r3, #12
 8006364:	d109      	bne.n	800637a <HAL_TIM_OC_Start+0x72>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	bf14      	ite	ne
 8006372:	2301      	movne	r3, #1
 8006374:	2300      	moveq	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	e015      	b.n	80063a6 <HAL_TIM_OC_Start+0x9e>
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	2b10      	cmp	r3, #16
 800637e:	d109      	bne.n	8006394 <HAL_TIM_OC_Start+0x8c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b01      	cmp	r3, #1
 800638a:	bf14      	ite	ne
 800638c:	2301      	movne	r3, #1
 800638e:	2300      	moveq	r3, #0
 8006390:	b2db      	uxtb	r3, r3
 8006392:	e008      	b.n	80063a6 <HAL_TIM_OC_Start+0x9e>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b01      	cmp	r3, #1
 800639e:	bf14      	ite	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	2300      	moveq	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	e07e      	b.n	80064ac <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <HAL_TIM_OC_Start+0xb6>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063bc:	e023      	b.n	8006406 <HAL_TIM_OC_Start+0xfe>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d104      	bne.n	80063ce <HAL_TIM_OC_Start+0xc6>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063cc:	e01b      	b.n	8006406 <HAL_TIM_OC_Start+0xfe>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d104      	bne.n	80063de <HAL_TIM_OC_Start+0xd6>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063dc:	e013      	b.n	8006406 <HAL_TIM_OC_Start+0xfe>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b0c      	cmp	r3, #12
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_OC_Start+0xe6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80063ec:	e00b      	b.n	8006406 <HAL_TIM_OC_Start+0xfe>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b10      	cmp	r3, #16
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_OC_Start+0xf6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063fc:	e003      	b.n	8006406 <HAL_TIM_OC_Start+0xfe>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2201      	movs	r2, #1
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fd18 	bl	8006e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a26      	ldr	r2, [pc, #152]	@ (80064b4 <HAL_TIM_OC_Start+0x1ac>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_TIM_OC_Start+0x12a>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a25      	ldr	r2, [pc, #148]	@ (80064b8 <HAL_TIM_OC_Start+0x1b0>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_TIM_OC_Start+0x12a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a23      	ldr	r2, [pc, #140]	@ (80064bc <HAL_TIM_OC_Start+0x1b4>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <HAL_TIM_OC_Start+0x12e>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_TIM_OC_Start+0x130>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800644a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <HAL_TIM_OC_Start+0x1ac>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_TIM_OC_Start+0x162>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645e:	d004      	beq.n	800646a <HAL_TIM_OC_Start+0x162>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a14      	ldr	r2, [pc, #80]	@ (80064b8 <HAL_TIM_OC_Start+0x1b0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d115      	bne.n	8006496 <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	4b13      	ldr	r3, [pc, #76]	@ (80064c0 <HAL_TIM_OC_Start+0x1b8>)
 8006472:	4013      	ands	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b06      	cmp	r3, #6
 800647a:	d015      	beq.n	80064a8 <HAL_TIM_OC_Start+0x1a0>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006482:	d011      	beq.n	80064a8 <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0201 	orr.w	r2, r2, #1
 8006492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006494:	e008      	b.n	80064a8 <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f042 0201 	orr.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
 80064a6:	e000      	b.n	80064aa <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	40012c00 	.word	0x40012c00
 80064b8:	40014000 	.word	0x40014000
 80064bc:	40014400 	.word	0x40014400
 80064c0:	00010007 	.word	0x00010007

080064c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80064de:	2302      	movs	r3, #2
 80064e0:	e066      	b.n	80065b0 <HAL_TIM_OC_ConfigChannel+0xec>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b14      	cmp	r3, #20
 80064ee:	d857      	bhi.n	80065a0 <HAL_TIM_OC_ConfigChannel+0xdc>
 80064f0:	a201      	add	r2, pc, #4	@ (adr r2, 80064f8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80064f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f6:	bf00      	nop
 80064f8:	0800654d 	.word	0x0800654d
 80064fc:	080065a1 	.word	0x080065a1
 8006500:	080065a1 	.word	0x080065a1
 8006504:	080065a1 	.word	0x080065a1
 8006508:	0800655b 	.word	0x0800655b
 800650c:	080065a1 	.word	0x080065a1
 8006510:	080065a1 	.word	0x080065a1
 8006514:	080065a1 	.word	0x080065a1
 8006518:	08006569 	.word	0x08006569
 800651c:	080065a1 	.word	0x080065a1
 8006520:	080065a1 	.word	0x080065a1
 8006524:	080065a1 	.word	0x080065a1
 8006528:	08006577 	.word	0x08006577
 800652c:	080065a1 	.word	0x080065a1
 8006530:	080065a1 	.word	0x080065a1
 8006534:	080065a1 	.word	0x080065a1
 8006538:	08006585 	.word	0x08006585
 800653c:	080065a1 	.word	0x080065a1
 8006540:	080065a1 	.word	0x080065a1
 8006544:	080065a1 	.word	0x080065a1
 8006548:	08006593 	.word	0x08006593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	4618      	mov	r0, r3
 8006554:	f000 f95e 	bl	8006814 <TIM_OC1_SetConfig>
      break;
 8006558:	e025      	b.n	80065a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	4618      	mov	r0, r3
 8006562:	f000 f9d3 	bl	800690c <TIM_OC2_SetConfig>
      break;
 8006566:	e01e      	b.n	80065a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fa46 	bl	8006a00 <TIM_OC3_SetConfig>
      break;
 8006574:	e017      	b.n	80065a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68b9      	ldr	r1, [r7, #8]
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fab7 	bl	8006af0 <TIM_OC4_SetConfig>
      break;
 8006582:	e010      	b.n	80065a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fb0e 	bl	8006bac <TIM_OC5_SetConfig>
      break;
 8006590:	e009      	b.n	80065a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68b9      	ldr	r1, [r7, #8]
 8006598:	4618      	mov	r0, r3
 800659a:	f000 fb5f 	bl	8006c5c <TIM_OC6_SetConfig>
      break;
 800659e:	e002      	b.n	80065a6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	75fb      	strb	r3, [r7, #23]
      break;
 80065a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_TIM_ConfigClockSource+0x1c>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e0b6      	b.n	8006742 <HAL_TIM_ConfigClockSource+0x18a>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006610:	d03e      	beq.n	8006690 <HAL_TIM_ConfigClockSource+0xd8>
 8006612:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006616:	f200 8087 	bhi.w	8006728 <HAL_TIM_ConfigClockSource+0x170>
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661e:	f000 8086 	beq.w	800672e <HAL_TIM_ConfigClockSource+0x176>
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006626:	d87f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006628:	2b70      	cmp	r3, #112	@ 0x70
 800662a:	d01a      	beq.n	8006662 <HAL_TIM_ConfigClockSource+0xaa>
 800662c:	2b70      	cmp	r3, #112	@ 0x70
 800662e:	d87b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006630:	2b60      	cmp	r3, #96	@ 0x60
 8006632:	d050      	beq.n	80066d6 <HAL_TIM_ConfigClockSource+0x11e>
 8006634:	2b60      	cmp	r3, #96	@ 0x60
 8006636:	d877      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006638:	2b50      	cmp	r3, #80	@ 0x50
 800663a:	d03c      	beq.n	80066b6 <HAL_TIM_ConfigClockSource+0xfe>
 800663c:	2b50      	cmp	r3, #80	@ 0x50
 800663e:	d873      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	d058      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x13e>
 8006644:	2b40      	cmp	r3, #64	@ 0x40
 8006646:	d86f      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006648:	2b30      	cmp	r3, #48	@ 0x30
 800664a:	d064      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 800664c:	2b30      	cmp	r3, #48	@ 0x30
 800664e:	d86b      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006650:	2b20      	cmp	r3, #32
 8006652:	d060      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d867      	bhi.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
 8006658:	2b00      	cmp	r3, #0
 800665a:	d05c      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 800665c:	2b10      	cmp	r3, #16
 800665e:	d05a      	beq.n	8006716 <HAL_TIM_ConfigClockSource+0x15e>
 8006660:	e062      	b.n	8006728 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006672:	f000 fbc7 	bl	8006e04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006684:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	609a      	str	r2, [r3, #8]
      break;
 800668e:	e04f      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a0:	f000 fbb0 	bl	8006e04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066b2:	609a      	str	r2, [r3, #8]
      break;
 80066b4:	e03c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066c2:	461a      	mov	r2, r3
 80066c4:	f000 fb24 	bl	8006d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2150      	movs	r1, #80	@ 0x50
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fb7d 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 80066d4:	e02c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066e2:	461a      	mov	r2, r3
 80066e4:	f000 fb43 	bl	8006d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2160      	movs	r1, #96	@ 0x60
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fb6d 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 80066f4:	e01c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006702:	461a      	mov	r2, r3
 8006704:	f000 fb04 	bl	8006d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2140      	movs	r1, #64	@ 0x40
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fb5d 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006714:	e00c      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f000 fb54 	bl	8006dce <TIM_ITRx_SetConfig>
      break;
 8006726:	e003      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
      break;
 800672c:	e000      	b.n	8006730 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800672e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a2a      	ldr	r2, [pc, #168]	@ (8006808 <TIM_Base_SetConfig+0xbc>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_Base_SetConfig+0x20>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676a:	d108      	bne.n	800677e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	4a21      	ldr	r2, [pc, #132]	@ (8006808 <TIM_Base_SetConfig+0xbc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d00b      	beq.n	800679e <TIM_Base_SetConfig+0x52>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800678c:	d007      	beq.n	800679e <TIM_Base_SetConfig+0x52>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1e      	ldr	r2, [pc, #120]	@ (800680c <TIM_Base_SetConfig+0xc0>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d003      	beq.n	800679e <TIM_Base_SetConfig+0x52>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1d      	ldr	r2, [pc, #116]	@ (8006810 <TIM_Base_SetConfig+0xc4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d108      	bne.n	80067b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006808 <TIM_Base_SetConfig+0xbc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d007      	beq.n	80067ec <TIM_Base_SetConfig+0xa0>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a0b      	ldr	r2, [pc, #44]	@ (800680c <TIM_Base_SetConfig+0xc0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d003      	beq.n	80067ec <TIM_Base_SetConfig+0xa0>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a0a      	ldr	r2, [pc, #40]	@ (8006810 <TIM_Base_SetConfig+0xc4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d103      	bne.n	80067f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	691a      	ldr	r2, [r3, #16]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	615a      	str	r2, [r3, #20]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400

08006814 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 0201 	bic.w	r2, r3, #1
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 0302 	bic.w	r3, r3, #2
 8006860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a24      	ldr	r2, [pc, #144]	@ (8006900 <TIM_OC1_SetConfig+0xec>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d007      	beq.n	8006884 <TIM_OC1_SetConfig+0x70>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a23      	ldr	r2, [pc, #140]	@ (8006904 <TIM_OC1_SetConfig+0xf0>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d003      	beq.n	8006884 <TIM_OC1_SetConfig+0x70>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a22      	ldr	r2, [pc, #136]	@ (8006908 <TIM_OC1_SetConfig+0xf4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10c      	bne.n	800689e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f023 0308 	bic.w	r3, r3, #8
 800688a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f023 0304 	bic.w	r3, r3, #4
 800689c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a17      	ldr	r2, [pc, #92]	@ (8006900 <TIM_OC1_SetConfig+0xec>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d007      	beq.n	80068b6 <TIM_OC1_SetConfig+0xa2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a16      	ldr	r2, [pc, #88]	@ (8006904 <TIM_OC1_SetConfig+0xf0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d003      	beq.n	80068b6 <TIM_OC1_SetConfig+0xa2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a15      	ldr	r2, [pc, #84]	@ (8006908 <TIM_OC1_SetConfig+0xf4>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d111      	bne.n	80068da <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	bf00      	nop
 80068f6:	371c      	adds	r7, #28
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400

0800690c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f023 0210 	bic.w	r2, r3, #16
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800693a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 0320 	bic.w	r3, r3, #32
 800695a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a22      	ldr	r2, [pc, #136]	@ (80069f4 <TIM_OC2_SetConfig+0xe8>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10d      	bne.n	800698c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800698a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a19      	ldr	r2, [pc, #100]	@ (80069f4 <TIM_OC2_SetConfig+0xe8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d007      	beq.n	80069a4 <TIM_OC2_SetConfig+0x98>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a18      	ldr	r2, [pc, #96]	@ (80069f8 <TIM_OC2_SetConfig+0xec>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d003      	beq.n	80069a4 <TIM_OC2_SetConfig+0x98>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <TIM_OC2_SetConfig+0xf0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d113      	bne.n	80069cc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40012c00 	.word	0x40012c00
 80069f8:	40014000 	.word	0x40014000
 80069fc:	40014400 	.word	0x40014400

08006a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	021b      	lsls	r3, r3, #8
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a21      	ldr	r2, [pc, #132]	@ (8006ae4 <TIM_OC3_SetConfig+0xe4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d10d      	bne.n	8006a7e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006a68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006a7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a18      	ldr	r2, [pc, #96]	@ (8006ae4 <TIM_OC3_SetConfig+0xe4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_OC3_SetConfig+0x96>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a17      	ldr	r2, [pc, #92]	@ (8006ae8 <TIM_OC3_SetConfig+0xe8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC3_SetConfig+0x96>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a16      	ldr	r2, [pc, #88]	@ (8006aec <TIM_OC3_SetConfig+0xec>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d113      	bne.n	8006abe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	011b      	lsls	r3, r3, #4
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	011b      	lsls	r3, r3, #4
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	621a      	str	r2, [r3, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40012c00 	.word	0x40012c00
 8006ae8:	40014000 	.word	0x40014000
 8006aec:	40014400 	.word	0x40014400

08006af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b087      	sub	sp, #28
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a1b      	ldr	r3, [r3, #32]
 8006afe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6a1b      	ldr	r3, [r3, #32]
 8006b04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	69db      	ldr	r3, [r3, #28]
 8006b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006b1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	021b      	lsls	r3, r3, #8
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	031b      	lsls	r3, r3, #12
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a14      	ldr	r2, [pc, #80]	@ (8006ba0 <TIM_OC4_SetConfig+0xb0>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d007      	beq.n	8006b64 <TIM_OC4_SetConfig+0x74>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a13      	ldr	r2, [pc, #76]	@ (8006ba4 <TIM_OC4_SetConfig+0xb4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d003      	beq.n	8006b64 <TIM_OC4_SetConfig+0x74>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a12      	ldr	r2, [pc, #72]	@ (8006ba8 <TIM_OC4_SetConfig+0xb8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d109      	bne.n	8006b78 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	019b      	lsls	r3, r3, #6
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40012c00 	.word	0x40012c00
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400

08006bac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006bf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	041b      	lsls	r3, r3, #16
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a13      	ldr	r2, [pc, #76]	@ (8006c50 <TIM_OC5_SetConfig+0xa4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_OC5_SetConfig+0x6a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a12      	ldr	r2, [pc, #72]	@ (8006c54 <TIM_OC5_SetConfig+0xa8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_OC5_SetConfig+0x6a>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a11      	ldr	r2, [pc, #68]	@ (8006c58 <TIM_OC5_SetConfig+0xac>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d109      	bne.n	8006c2a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	621a      	str	r2, [r3, #32]
}
 8006c44:	bf00      	nop
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40014000 	.word	0x40014000
 8006c58:	40014400 	.word	0x40014400

08006c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	051b      	lsls	r3, r3, #20
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a14      	ldr	r2, [pc, #80]	@ (8006d04 <TIM_OC6_SetConfig+0xa8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d007      	beq.n	8006cc8 <TIM_OC6_SetConfig+0x6c>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a13      	ldr	r2, [pc, #76]	@ (8006d08 <TIM_OC6_SetConfig+0xac>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d003      	beq.n	8006cc8 <TIM_OC6_SetConfig+0x6c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	4a12      	ldr	r2, [pc, #72]	@ (8006d0c <TIM_OC6_SetConfig+0xb0>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d109      	bne.n	8006cdc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	029b      	lsls	r3, r3, #10
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	697a      	ldr	r2, [r7, #20]
 8006ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685a      	ldr	r2, [r3, #4]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	621a      	str	r2, [r3, #32]
}
 8006cf6:	bf00      	nop
 8006cf8:	371c      	adds	r7, #28
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	40012c00 	.word	0x40012c00
 8006d08:	40014000 	.word	0x40014000
 8006d0c:	40014400 	.word	0x40014400

08006d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b087      	sub	sp, #28
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6a1b      	ldr	r3, [r3, #32]
 8006d26:	f023 0201 	bic.w	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f023 030a 	bic.w	r3, r3, #10
 8006d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	621a      	str	r2, [r3, #32]
}
 8006d62:	bf00      	nop
 8006d64:	371c      	adds	r7, #28
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b087      	sub	sp, #28
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	f023 0210 	bic.w	r2, r3, #16
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	699b      	ldr	r3, [r3, #24]
 8006d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	031b      	lsls	r3, r3, #12
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006daa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	621a      	str	r2, [r3, #32]
}
 8006dc2:	bf00      	nop
 8006dc4:	371c      	adds	r7, #28
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dce:	b480      	push	{r7}
 8006dd0:	b085      	sub	sp, #20
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
 8006dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4313      	orrs	r3, r2
 8006dec:	f043 0307 	orr.w	r3, r3, #7
 8006df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	609a      	str	r2, [r3, #8]
}
 8006df8:	bf00      	nop
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	431a      	orrs	r2, r3
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	609a      	str	r2, [r3, #8]
}
 8006e38:	bf00      	nop
 8006e3a:	371c      	adds	r7, #28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b087      	sub	sp, #28
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 031f 	and.w	r3, r3, #31
 8006e56:	2201      	movs	r2, #1
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6a1a      	ldr	r2, [r3, #32]
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	43db      	mvns	r3, r3
 8006e66:	401a      	ands	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1a      	ldr	r2, [r3, #32]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	621a      	str	r2, [r3, #32]
}
 8006e82:	bf00      	nop
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
	...

08006e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e04f      	b.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a21      	ldr	r2, [pc, #132]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d108      	bne.n	8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006ed8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a14      	ldr	r2, [pc, #80]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f10:	d004      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a10      	ldr	r2, [pc, #64]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10c      	bne.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40014000 	.word	0x40014000

08006f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f66:	2300      	movs	r3, #0
 8006f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d101      	bne.n	8006f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e060      	b.n	800703a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a14      	ldr	r2, [pc, #80]	@ (8007048 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d115      	bne.n	8007028 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007006:	051b      	lsls	r3, r3, #20
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	4313      	orrs	r3, r2
 8007018:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	4313      	orrs	r3, r2
 8007026:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40012c00 	.word	0x40012c00

0800704c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d101      	bne.n	800705e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e040      	b.n	80070e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007062:	2b00      	cmp	r3, #0
 8007064:	d106      	bne.n	8007074 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7fa fed8 	bl	8001e24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2224      	movs	r2, #36	@ 0x24
 8007078:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0201 	bic.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fb4a 	bl	800772c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f91b 	bl	80072d4 <UART_SetConfig>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e01b      	b.n	80070e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f042 0201 	orr.w	r2, r2, #1
 80070d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fbc9 	bl	8007870 <UART_CheckIdleState>
 80070de:	4603      	mov	r3, r0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08a      	sub	sp, #40	@ 0x28
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80070fc:	2b20      	cmp	r3, #32
 80070fe:	d177      	bne.n	80071f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d002      	beq.n	800710c <HAL_UART_Transmit+0x24>
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d101      	bne.n	8007110 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e070      	b.n	80071f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2221      	movs	r2, #33	@ 0x21
 800711c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800711e:	f7fb f8cd 	bl	80022bc <HAL_GetTick>
 8007122:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713c:	d108      	bne.n	8007150 <HAL_UART_Transmit+0x68>
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d104      	bne.n	8007150 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	e003      	b.n	8007158 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007154:	2300      	movs	r3, #0
 8007156:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007158:	e02f      	b.n	80071ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2200      	movs	r2, #0
 8007162:	2180      	movs	r1, #128	@ 0x80
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fc2b 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e03b      	b.n	80071f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	881a      	ldrh	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800718c:	b292      	uxth	r2, r2
 800718e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	3302      	adds	r3, #2
 8007194:	61bb      	str	r3, [r7, #24]
 8007196:	e007      	b.n	80071a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	781a      	ldrb	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	3301      	adds	r3, #1
 80071a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	3b01      	subs	r3, #1
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1c9      	bne.n	800715a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	2140      	movs	r1, #64	@ 0x40
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 fbf5 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d004      	beq.n	80071e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e005      	b.n	80071f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2220      	movs	r2, #32
 80071ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	e000      	b.n	80071f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80071f0:	2302      	movs	r3, #2
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
	...

080071fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	@ 0x28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007210:	2b20      	cmp	r3, #32
 8007212:	d137      	bne.n	8007284 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <HAL_UART_Receive_DMA+0x24>
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e030      	b.n	8007286 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a18      	ldr	r2, [pc, #96]	@ (8007290 <HAL_UART_Receive_DMA+0x94>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d01f      	beq.n	8007274 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d018      	beq.n	8007274 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	e853 3f00 	ldrex	r3, [r3]
 800724e:	613b      	str	r3, [r7, #16]
   return(result);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007256:	627b      	str	r3, [r7, #36]	@ 0x24
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	623b      	str	r3, [r7, #32]
 8007262:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007264:	69f9      	ldr	r1, [r7, #28]
 8007266:	6a3a      	ldr	r2, [r7, #32]
 8007268:	e841 2300 	strex	r3, r2, [r1]
 800726c:	61bb      	str	r3, [r7, #24]
   return(result);
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1e6      	bne.n	8007242 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	461a      	mov	r2, r3
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fc08 	bl	8007a90 <UART_Start_Receive_DMA>
 8007280:	4603      	mov	r3, r0
 8007282:	e000      	b.n	8007286 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
  }
}
 8007286:	4618      	mov	r0, r3
 8007288:	3728      	adds	r7, #40	@ 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40008000 	.word	0x40008000

08007294 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d8:	b08a      	sub	sp, #40	@ 0x28
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072de:	2300      	movs	r3, #0
 80072e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	431a      	orrs	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	4bb4      	ldr	r3, [pc, #720]	@ (80075d4 <UART_SetConfig+0x300>)
 8007304:	4013      	ands	r3, r2
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	6812      	ldr	r2, [r2, #0]
 800730a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800730c:	430b      	orrs	r3, r1
 800730e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	68da      	ldr	r2, [r3, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	430a      	orrs	r2, r1
 8007324:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4aa9      	ldr	r2, [pc, #676]	@ (80075d8 <UART_SetConfig+0x304>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d004      	beq.n	8007340 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800733c:	4313      	orrs	r3, r2
 800733e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007350:	430a      	orrs	r2, r1
 8007352:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4aa0      	ldr	r2, [pc, #640]	@ (80075dc <UART_SetConfig+0x308>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d126      	bne.n	80073ac <UART_SetConfig+0xd8>
 800735e:	4ba0      	ldr	r3, [pc, #640]	@ (80075e0 <UART_SetConfig+0x30c>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	2b03      	cmp	r3, #3
 800736a:	d81b      	bhi.n	80073a4 <UART_SetConfig+0xd0>
 800736c:	a201      	add	r2, pc, #4	@ (adr r2, 8007374 <UART_SetConfig+0xa0>)
 800736e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007372:	bf00      	nop
 8007374:	08007385 	.word	0x08007385
 8007378:	08007395 	.word	0x08007395
 800737c:	0800738d 	.word	0x0800738d
 8007380:	0800739d 	.word	0x0800739d
 8007384:	2301      	movs	r3, #1
 8007386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800738a:	e080      	b.n	800748e <UART_SetConfig+0x1ba>
 800738c:	2302      	movs	r3, #2
 800738e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007392:	e07c      	b.n	800748e <UART_SetConfig+0x1ba>
 8007394:	2304      	movs	r3, #4
 8007396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800739a:	e078      	b.n	800748e <UART_SetConfig+0x1ba>
 800739c:	2308      	movs	r3, #8
 800739e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073a2:	e074      	b.n	800748e <UART_SetConfig+0x1ba>
 80073a4:	2310      	movs	r3, #16
 80073a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80073aa:	e070      	b.n	800748e <UART_SetConfig+0x1ba>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a8c      	ldr	r2, [pc, #560]	@ (80075e4 <UART_SetConfig+0x310>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d138      	bne.n	8007428 <UART_SetConfig+0x154>
 80073b6:	4b8a      	ldr	r3, [pc, #552]	@ (80075e0 <UART_SetConfig+0x30c>)
 80073b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073bc:	f003 030c 	and.w	r3, r3, #12
 80073c0:	2b0c      	cmp	r3, #12
 80073c2:	d82d      	bhi.n	8007420 <UART_SetConfig+0x14c>
 80073c4:	a201      	add	r2, pc, #4	@ (adr r2, 80073cc <UART_SetConfig+0xf8>)
 80073c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ca:	bf00      	nop
 80073cc:	08007401 	.word	0x08007401
 80073d0:	08007421 	.word	0x08007421
 80073d4:	08007421 	.word	0x08007421
 80073d8:	08007421 	.word	0x08007421
 80073dc:	08007411 	.word	0x08007411
 80073e0:	08007421 	.word	0x08007421
 80073e4:	08007421 	.word	0x08007421
 80073e8:	08007421 	.word	0x08007421
 80073ec:	08007409 	.word	0x08007409
 80073f0:	08007421 	.word	0x08007421
 80073f4:	08007421 	.word	0x08007421
 80073f8:	08007421 	.word	0x08007421
 80073fc:	08007419 	.word	0x08007419
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007406:	e042      	b.n	800748e <UART_SetConfig+0x1ba>
 8007408:	2302      	movs	r3, #2
 800740a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800740e:	e03e      	b.n	800748e <UART_SetConfig+0x1ba>
 8007410:	2304      	movs	r3, #4
 8007412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007416:	e03a      	b.n	800748e <UART_SetConfig+0x1ba>
 8007418:	2308      	movs	r3, #8
 800741a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800741e:	e036      	b.n	800748e <UART_SetConfig+0x1ba>
 8007420:	2310      	movs	r3, #16
 8007422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007426:	e032      	b.n	800748e <UART_SetConfig+0x1ba>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a6a      	ldr	r2, [pc, #424]	@ (80075d8 <UART_SetConfig+0x304>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d12a      	bne.n	8007488 <UART_SetConfig+0x1b4>
 8007432:	4b6b      	ldr	r3, [pc, #428]	@ (80075e0 <UART_SetConfig+0x30c>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007438:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800743c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007440:	d01a      	beq.n	8007478 <UART_SetConfig+0x1a4>
 8007442:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007446:	d81b      	bhi.n	8007480 <UART_SetConfig+0x1ac>
 8007448:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800744c:	d00c      	beq.n	8007468 <UART_SetConfig+0x194>
 800744e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007452:	d815      	bhi.n	8007480 <UART_SetConfig+0x1ac>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <UART_SetConfig+0x18c>
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745c:	d008      	beq.n	8007470 <UART_SetConfig+0x19c>
 800745e:	e00f      	b.n	8007480 <UART_SetConfig+0x1ac>
 8007460:	2300      	movs	r3, #0
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007466:	e012      	b.n	800748e <UART_SetConfig+0x1ba>
 8007468:	2302      	movs	r3, #2
 800746a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800746e:	e00e      	b.n	800748e <UART_SetConfig+0x1ba>
 8007470:	2304      	movs	r3, #4
 8007472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007476:	e00a      	b.n	800748e <UART_SetConfig+0x1ba>
 8007478:	2308      	movs	r3, #8
 800747a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800747e:	e006      	b.n	800748e <UART_SetConfig+0x1ba>
 8007480:	2310      	movs	r3, #16
 8007482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007486:	e002      	b.n	800748e <UART_SetConfig+0x1ba>
 8007488:	2310      	movs	r3, #16
 800748a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a51      	ldr	r2, [pc, #324]	@ (80075d8 <UART_SetConfig+0x304>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d17a      	bne.n	800758e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007498:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800749c:	2b08      	cmp	r3, #8
 800749e:	d824      	bhi.n	80074ea <UART_SetConfig+0x216>
 80074a0:	a201      	add	r2, pc, #4	@ (adr r2, 80074a8 <UART_SetConfig+0x1d4>)
 80074a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a6:	bf00      	nop
 80074a8:	080074cd 	.word	0x080074cd
 80074ac:	080074eb 	.word	0x080074eb
 80074b0:	080074d5 	.word	0x080074d5
 80074b4:	080074eb 	.word	0x080074eb
 80074b8:	080074db 	.word	0x080074db
 80074bc:	080074eb 	.word	0x080074eb
 80074c0:	080074eb 	.word	0x080074eb
 80074c4:	080074eb 	.word	0x080074eb
 80074c8:	080074e3 	.word	0x080074e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074cc:	f7fd fd04 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80074d0:	61f8      	str	r0, [r7, #28]
        break;
 80074d2:	e010      	b.n	80074f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d4:	4b44      	ldr	r3, [pc, #272]	@ (80075e8 <UART_SetConfig+0x314>)
 80074d6:	61fb      	str	r3, [r7, #28]
        break;
 80074d8:	e00d      	b.n	80074f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074da:	f7fd fc65 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 80074de:	61f8      	str	r0, [r7, #28]
        break;
 80074e0:	e009      	b.n	80074f6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e6:	61fb      	str	r3, [r7, #28]
        break;
 80074e8:	e005      	b.n	80074f6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 8107 	beq.w	800770c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	4613      	mov	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	4413      	add	r3, r2
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	429a      	cmp	r2, r3
 800750c:	d305      	bcc.n	800751a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	429a      	cmp	r2, r3
 8007518:	d903      	bls.n	8007522 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007520:	e0f4      	b.n	800770c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007522:	69fb      	ldr	r3, [r7, #28]
 8007524:	2200      	movs	r2, #0
 8007526:	461c      	mov	r4, r3
 8007528:	4615      	mov	r5, r2
 800752a:	f04f 0200 	mov.w	r2, #0
 800752e:	f04f 0300 	mov.w	r3, #0
 8007532:	022b      	lsls	r3, r5, #8
 8007534:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007538:	0222      	lsls	r2, r4, #8
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	6849      	ldr	r1, [r1, #4]
 800753e:	0849      	lsrs	r1, r1, #1
 8007540:	2000      	movs	r0, #0
 8007542:	4688      	mov	r8, r1
 8007544:	4681      	mov	r9, r0
 8007546:	eb12 0a08 	adds.w	sl, r2, r8
 800754a:	eb43 0b09 	adc.w	fp, r3, r9
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800755c:	4650      	mov	r0, sl
 800755e:	4659      	mov	r1, fp
 8007560:	f7f9 fb92 	bl	8000c88 <__aeabi_uldivmod>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4613      	mov	r3, r2
 800756a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007572:	d308      	bcc.n	8007586 <UART_SetConfig+0x2b2>
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800757a:	d204      	bcs.n	8007586 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	60da      	str	r2, [r3, #12]
 8007584:	e0c2      	b.n	800770c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800758c:	e0be      	b.n	800770c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007596:	d16a      	bne.n	800766e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007598:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800759c:	2b08      	cmp	r3, #8
 800759e:	d834      	bhi.n	800760a <UART_SetConfig+0x336>
 80075a0:	a201      	add	r2, pc, #4	@ (adr r2, 80075a8 <UART_SetConfig+0x2d4>)
 80075a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a6:	bf00      	nop
 80075a8:	080075cd 	.word	0x080075cd
 80075ac:	080075ed 	.word	0x080075ed
 80075b0:	080075f5 	.word	0x080075f5
 80075b4:	0800760b 	.word	0x0800760b
 80075b8:	080075fb 	.word	0x080075fb
 80075bc:	0800760b 	.word	0x0800760b
 80075c0:	0800760b 	.word	0x0800760b
 80075c4:	0800760b 	.word	0x0800760b
 80075c8:	08007603 	.word	0x08007603
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075cc:	f7fd fc84 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80075d0:	61f8      	str	r0, [r7, #28]
        break;
 80075d2:	e020      	b.n	8007616 <UART_SetConfig+0x342>
 80075d4:	efff69f3 	.word	0xefff69f3
 80075d8:	40008000 	.word	0x40008000
 80075dc:	40013800 	.word	0x40013800
 80075e0:	40021000 	.word	0x40021000
 80075e4:	40004400 	.word	0x40004400
 80075e8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ec:	f7fd fc8a 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 80075f0:	61f8      	str	r0, [r7, #28]
        break;
 80075f2:	e010      	b.n	8007616 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80075f4:	4b4c      	ldr	r3, [pc, #304]	@ (8007728 <UART_SetConfig+0x454>)
 80075f6:	61fb      	str	r3, [r7, #28]
        break;
 80075f8:	e00d      	b.n	8007616 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075fa:	f7fd fbd5 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 80075fe:	61f8      	str	r0, [r7, #28]
        break;
 8007600:	e009      	b.n	8007616 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007606:	61fb      	str	r3, [r7, #28]
        break;
 8007608:	e005      	b.n	8007616 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800760a:	2300      	movs	r3, #0
 800760c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007614:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d077      	beq.n	800770c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	005a      	lsls	r2, r3, #1
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	085b      	lsrs	r3, r3, #1
 8007626:	441a      	add	r2, r3
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007630:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	2b0f      	cmp	r3, #15
 8007636:	d916      	bls.n	8007666 <UART_SetConfig+0x392>
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800763e:	d212      	bcs.n	8007666 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	b29b      	uxth	r3, r3
 8007644:	f023 030f 	bic.w	r3, r3, #15
 8007648:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	085b      	lsrs	r3, r3, #1
 800764e:	b29b      	uxth	r3, r3
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	b29a      	uxth	r2, r3
 8007656:	8afb      	ldrh	r3, [r7, #22]
 8007658:	4313      	orrs	r3, r2
 800765a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	8afa      	ldrh	r2, [r7, #22]
 8007662:	60da      	str	r2, [r3, #12]
 8007664:	e052      	b.n	800770c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800766c:	e04e      	b.n	800770c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800766e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007672:	2b08      	cmp	r3, #8
 8007674:	d827      	bhi.n	80076c6 <UART_SetConfig+0x3f2>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <UART_SetConfig+0x3a8>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076a9 	.word	0x080076a9
 8007684:	080076b1 	.word	0x080076b1
 8007688:	080076c7 	.word	0x080076c7
 800768c:	080076b7 	.word	0x080076b7
 8007690:	080076c7 	.word	0x080076c7
 8007694:	080076c7 	.word	0x080076c7
 8007698:	080076c7 	.word	0x080076c7
 800769c:	080076bf 	.word	0x080076bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a0:	f7fd fc1a 	bl	8004ed8 <HAL_RCC_GetPCLK1Freq>
 80076a4:	61f8      	str	r0, [r7, #28]
        break;
 80076a6:	e014      	b.n	80076d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076a8:	f7fd fc2c 	bl	8004f04 <HAL_RCC_GetPCLK2Freq>
 80076ac:	61f8      	str	r0, [r7, #28]
        break;
 80076ae:	e010      	b.n	80076d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007728 <UART_SetConfig+0x454>)
 80076b2:	61fb      	str	r3, [r7, #28]
        break;
 80076b4:	e00d      	b.n	80076d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076b6:	f7fd fb77 	bl	8004da8 <HAL_RCC_GetSysClockFreq>
 80076ba:	61f8      	str	r0, [r7, #28]
        break;
 80076bc:	e009      	b.n	80076d2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076c2:	61fb      	str	r3, [r7, #28]
        break;
 80076c4:	e005      	b.n	80076d2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80076d0:	bf00      	nop
    }

    if (pclk != 0U)
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d019      	beq.n	800770c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	085a      	lsrs	r2, r3, #1
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	441a      	add	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80076ea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d909      	bls.n	8007706 <UART_SetConfig+0x432>
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f8:	d205      	bcs.n	8007706 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	60da      	str	r2, [r3, #12]
 8007704:	e002      	b.n	800770c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007718:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800771c:	4618      	mov	r0, r3
 800771e:	3728      	adds	r7, #40	@ 0x28
 8007720:	46bd      	mov	sp, r7
 8007722:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007726:	bf00      	nop
 8007728:	00f42400 	.word	0x00f42400

0800772c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007738:	f003 0308 	and.w	r3, r3, #8
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	430a      	orrs	r2, r1
 8007754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779e:	f003 0304 	and.w	r3, r3, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01a      	beq.n	8007842 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800782a:	d10a      	bne.n	8007842 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	605a      	str	r2, [r3, #4]
  }
}
 8007864:	bf00      	nop
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b098      	sub	sp, #96	@ 0x60
 8007874:	af02      	add	r7, sp, #8
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007880:	f7fa fd1c 	bl	80022bc <HAL_GetTick>
 8007884:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	2b08      	cmp	r3, #8
 8007892:	d12e      	bne.n	80078f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007894:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800789c:	2200      	movs	r2, #0
 800789e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f88c 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d021      	beq.n	80078f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b6:	e853 3f00 	ldrex	r3, [r3]
 80078ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80078cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078d4:	e841 2300 	strex	r3, r2, [r1]
 80078d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1e6      	bne.n	80078ae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2220      	movs	r2, #32
 80078e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e062      	b.n	80079b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0304 	and.w	r3, r3, #4
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d149      	bne.n	8007994 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007900:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007908:	2200      	movs	r2, #0
 800790a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f856 	bl	80079c0 <UART_WaitOnFlagUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d03c      	beq.n	8007994 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007922:	e853 3f00 	ldrex	r3, [r3]
 8007926:	623b      	str	r3, [r7, #32]
   return(result);
 8007928:	6a3b      	ldr	r3, [r7, #32]
 800792a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800792e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	461a      	mov	r2, r3
 8007936:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007938:	633b      	str	r3, [r7, #48]	@ 0x30
 800793a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800793e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007940:	e841 2300 	strex	r3, r2, [r1]
 8007944:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1e6      	bne.n	800791a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3308      	adds	r3, #8
 8007952:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	60fb      	str	r3, [r7, #12]
   return(result);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f023 0301 	bic.w	r3, r3, #1
 8007962:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	3308      	adds	r3, #8
 800796a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800796c:	61fa      	str	r2, [r7, #28]
 800796e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	69b9      	ldr	r1, [r7, #24]
 8007972:	69fa      	ldr	r2, [r7, #28]
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	617b      	str	r3, [r7, #20]
   return(result);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e5      	bne.n	800794c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e011      	b.n	80079b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2220      	movs	r2, #32
 8007998:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2220      	movs	r2, #32
 800799e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3758      	adds	r7, #88	@ 0x58
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079d0:	e049      	b.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d8:	d045      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079da:	f7fa fc6f 	bl	80022bc <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d302      	bcc.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e048      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0304 	and.w	r3, r3, #4
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d031      	beq.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	f003 0308 	and.w	r3, r3, #8
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d110      	bne.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2208      	movs	r2, #8
 8007a16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 f8ff 	bl	8007c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2208      	movs	r2, #8
 8007a22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e029      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007a40:	d111      	bne.n	8007a66 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f8e5 	bl	8007c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e00f      	b.n	8007a86 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69da      	ldr	r2, [r3, #28]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	4013      	ands	r3, r2
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	bf0c      	ite	eq
 8007a76:	2301      	moveq	r3, #1
 8007a78:	2300      	movne	r3, #0
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	79fb      	ldrb	r3, [r7, #7]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d0a6      	beq.n	80079d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b096      	sub	sp, #88	@ 0x58
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	88fa      	ldrh	r2, [r7, #6]
 8007aa8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2222      	movs	r2, #34	@ 0x22
 8007ab8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d028      	beq.n	8007b16 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ac8:	4a3e      	ldr	r2, [pc, #248]	@ (8007bc4 <UART_Start_Receive_DMA+0x134>)
 8007aca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad0:	4a3d      	ldr	r2, [pc, #244]	@ (8007bc8 <UART_Start_Receive_DMA+0x138>)
 8007ad2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ad8:	4a3c      	ldr	r2, [pc, #240]	@ (8007bcc <UART_Start_Receive_DMA+0x13c>)
 8007ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	3324      	adds	r3, #36	@ 0x24
 8007aee:	4619      	mov	r1, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007af4:	461a      	mov	r2, r3
 8007af6:	88fb      	ldrh	r3, [r7, #6]
 8007af8:	f7fc f8c6 	bl	8003c88 <HAL_DMA_Start_IT>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2210      	movs	r2, #16
 8007b06:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	2220      	movs	r2, #32
 8007b0e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e051      	b.n	8007bba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d018      	beq.n	8007b50 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b26:	e853 3f00 	ldrex	r3, [r3]
 8007b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b32:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b3e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b44:	e841 2300 	strex	r3, r2, [r1]
 8007b48:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e6      	bne.n	8007b1e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3308      	adds	r3, #8
 8007b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5a:	e853 3f00 	ldrex	r3, [r3]
 8007b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	f043 0301 	orr.w	r3, r3, #1
 8007b66:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007b70:	637a      	str	r2, [r7, #52]	@ 0x34
 8007b72:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e5      	bne.n	8007b50 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	e853 3f00 	ldrex	r3, [r3]
 8007b92:	613b      	str	r3, [r7, #16]
   return(result);
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ba4:	623a      	str	r2, [r7, #32]
 8007ba6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba8:	69f9      	ldr	r1, [r7, #28]
 8007baa:	6a3a      	ldr	r2, [r7, #32]
 8007bac:	e841 2300 	strex	r3, r2, [r1]
 8007bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1e5      	bne.n	8007b84 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3758      	adds	r7, #88	@ 0x58
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08007ce5 	.word	0x08007ce5
 8007bc8:	08007e11 	.word	0x08007e11
 8007bcc:	08007e4f 	.word	0x08007e4f

08007bd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b089      	sub	sp, #36	@ 0x24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007bec:	61fb      	str	r3, [r7, #28]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	61bb      	str	r3, [r7, #24]
 8007bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6979      	ldr	r1, [r7, #20]
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	613b      	str	r3, [r7, #16]
   return(result);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e6      	bne.n	8007bd8 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2220      	movs	r2, #32
 8007c0e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8007c10:	bf00      	nop
 8007c12:	3724      	adds	r7, #36	@ 0x24
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b095      	sub	sp, #84	@ 0x54
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c42:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c4a:	e841 2300 	strex	r3, r2, [r1]
 8007c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1e6      	bne.n	8007c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	f023 0301 	bic.w	r3, r3, #1
 8007c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d118      	bne.n	8007cc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	f023 0310 	bic.w	r3, r3, #16
 8007ca6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cb0:	61bb      	str	r3, [r7, #24]
 8007cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6979      	ldr	r1, [r7, #20]
 8007cb6:	69ba      	ldr	r2, [r7, #24]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007cd8:	bf00      	nop
 8007cda:	3754      	adds	r7, #84	@ 0x54
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b09c      	sub	sp, #112	@ 0x70
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0320 	and.w	r3, r3, #32
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d171      	bne.n	8007de4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8007d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e6      	bne.n	8007d08 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	3308      	adds	r3, #8
 8007d40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d44:	e853 3f00 	ldrex	r3, [r3]
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	3308      	adds	r3, #8
 8007d58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e5      	bne.n	8007d3a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3308      	adds	r3, #8
 8007d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d78:	e853 3f00 	ldrex	r3, [r3]
 8007d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007d8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d96:	e841 2300 	strex	r3, r2, [r1]
 8007d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1e5      	bne.n	8007d6e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007da2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007da4:	2220      	movs	r2, #32
 8007da6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d118      	bne.n	8007de4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	e853 3f00 	ldrex	r3, [r3]
 8007dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0310 	bic.w	r3, r3, #16
 8007dc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dd0:	61fb      	str	r3, [r7, #28]
 8007dd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	69b9      	ldr	r1, [r7, #24]
 8007dd6:	69fa      	ldr	r2, [r7, #28]
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e6      	bne.n	8007db2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007de4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007de6:	2200      	movs	r2, #0
 8007de8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d107      	bne.n	8007e02 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007df4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007dfc:	f7ff fa5e 	bl	80072bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e00:	e002      	b.n	8007e08 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007e02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007e04:	f7f9 fd68 	bl	80018d8 <HAL_UART_RxCpltCallback>
}
 8007e08:	bf00      	nop
 8007e0a:	3770      	adds	r7, #112	@ 0x70
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e1c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d109      	bne.n	8007e40 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007e32:	085b      	lsrs	r3, r3, #1
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	4619      	mov	r1, r3
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff fa3f 	bl	80072bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e3e:	e002      	b.n	8007e46 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7ff fa27 	bl	8007294 <HAL_UART_RxHalfCpltCallback>
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b086      	sub	sp, #24
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007e60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e74:	2b80      	cmp	r3, #128	@ 0x80
 8007e76:	d109      	bne.n	8007e8c <UART_DMAError+0x3e>
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	2b21      	cmp	r3, #33	@ 0x21
 8007e7c:	d106      	bne.n	8007e8c <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8007e86:	6978      	ldr	r0, [r7, #20]
 8007e88:	f7ff fea2 	bl	8007bd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e96:	2b40      	cmp	r3, #64	@ 0x40
 8007e98:	d109      	bne.n	8007eae <UART_DMAError+0x60>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2b22      	cmp	r3, #34	@ 0x22
 8007e9e:	d106      	bne.n	8007eae <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8007ea8:	6978      	ldr	r0, [r7, #20]
 8007eaa:	f7ff feb7 	bl	8007c1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007eb4:	f043 0210 	orr.w	r2, r3, #16
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ebe:	6978      	ldr	r0, [r7, #20]
 8007ec0:	f7ff f9f2 	bl	80072a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ec4:	bf00      	nop
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <sulp>:
 8007ecc:	b570      	push	{r4, r5, r6, lr}
 8007ece:	4604      	mov	r4, r0
 8007ed0:	460d      	mov	r5, r1
 8007ed2:	ec45 4b10 	vmov	d0, r4, r5
 8007ed6:	4616      	mov	r6, r2
 8007ed8:	f003 fb12 	bl	800b500 <__ulp>
 8007edc:	ec51 0b10 	vmov	r0, r1, d0
 8007ee0:	b17e      	cbz	r6, 8007f02 <sulp+0x36>
 8007ee2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007ee6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	dd09      	ble.n	8007f02 <sulp+0x36>
 8007eee:	051b      	lsls	r3, r3, #20
 8007ef0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007ef4:	2400      	movs	r4, #0
 8007ef6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007efa:	4622      	mov	r2, r4
 8007efc:	462b      	mov	r3, r5
 8007efe:	f7f8 fb7b 	bl	80005f8 <__aeabi_dmul>
 8007f02:	ec41 0b10 	vmov	d0, r0, r1
 8007f06:	bd70      	pop	{r4, r5, r6, pc}

08007f08 <_strtod_l>:
 8007f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f0c:	b09f      	sub	sp, #124	@ 0x7c
 8007f0e:	460c      	mov	r4, r1
 8007f10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007f12:	2200      	movs	r2, #0
 8007f14:	921a      	str	r2, [sp, #104]	@ 0x68
 8007f16:	9005      	str	r0, [sp, #20]
 8007f18:	f04f 0a00 	mov.w	sl, #0
 8007f1c:	f04f 0b00 	mov.w	fp, #0
 8007f20:	460a      	mov	r2, r1
 8007f22:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f24:	7811      	ldrb	r1, [r2, #0]
 8007f26:	292b      	cmp	r1, #43	@ 0x2b
 8007f28:	d04a      	beq.n	8007fc0 <_strtod_l+0xb8>
 8007f2a:	d838      	bhi.n	8007f9e <_strtod_l+0x96>
 8007f2c:	290d      	cmp	r1, #13
 8007f2e:	d832      	bhi.n	8007f96 <_strtod_l+0x8e>
 8007f30:	2908      	cmp	r1, #8
 8007f32:	d832      	bhi.n	8007f9a <_strtod_l+0x92>
 8007f34:	2900      	cmp	r1, #0
 8007f36:	d03b      	beq.n	8007fb0 <_strtod_l+0xa8>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007f3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007f3e:	782a      	ldrb	r2, [r5, #0]
 8007f40:	2a30      	cmp	r2, #48	@ 0x30
 8007f42:	f040 80b3 	bne.w	80080ac <_strtod_l+0x1a4>
 8007f46:	786a      	ldrb	r2, [r5, #1]
 8007f48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f4c:	2a58      	cmp	r2, #88	@ 0x58
 8007f4e:	d16e      	bne.n	800802e <_strtod_l+0x126>
 8007f50:	9302      	str	r3, [sp, #8]
 8007f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	ab1a      	add	r3, sp, #104	@ 0x68
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4a8e      	ldr	r2, [pc, #568]	@ (8008194 <_strtod_l+0x28c>)
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007f60:	a919      	add	r1, sp, #100	@ 0x64
 8007f62:	f002 fbbf 	bl	800a6e4 <__gethex>
 8007f66:	f010 060f 	ands.w	r6, r0, #15
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	d005      	beq.n	8007f7a <_strtod_l+0x72>
 8007f6e:	2e06      	cmp	r6, #6
 8007f70:	d128      	bne.n	8007fc4 <_strtod_l+0xbc>
 8007f72:	3501      	adds	r5, #1
 8007f74:	2300      	movs	r3, #0
 8007f76:	9519      	str	r5, [sp, #100]	@ 0x64
 8007f78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f040 858e 	bne.w	8008a9e <_strtod_l+0xb96>
 8007f82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f84:	b1cb      	cbz	r3, 8007fba <_strtod_l+0xb2>
 8007f86:	4652      	mov	r2, sl
 8007f88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007f8c:	ec43 2b10 	vmov	d0, r2, r3
 8007f90:	b01f      	add	sp, #124	@ 0x7c
 8007f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f96:	2920      	cmp	r1, #32
 8007f98:	d1ce      	bne.n	8007f38 <_strtod_l+0x30>
 8007f9a:	3201      	adds	r2, #1
 8007f9c:	e7c1      	b.n	8007f22 <_strtod_l+0x1a>
 8007f9e:	292d      	cmp	r1, #45	@ 0x2d
 8007fa0:	d1ca      	bne.n	8007f38 <_strtod_l+0x30>
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007fa6:	1c51      	adds	r1, r2, #1
 8007fa8:	9119      	str	r1, [sp, #100]	@ 0x64
 8007faa:	7852      	ldrb	r2, [r2, #1]
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	d1c5      	bne.n	8007f3c <_strtod_l+0x34>
 8007fb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fb2:	9419      	str	r4, [sp, #100]	@ 0x64
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f040 8570 	bne.w	8008a9a <_strtod_l+0xb92>
 8007fba:	4652      	mov	r2, sl
 8007fbc:	465b      	mov	r3, fp
 8007fbe:	e7e5      	b.n	8007f8c <_strtod_l+0x84>
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	e7ef      	b.n	8007fa4 <_strtod_l+0x9c>
 8007fc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007fc6:	b13a      	cbz	r2, 8007fd8 <_strtod_l+0xd0>
 8007fc8:	2135      	movs	r1, #53	@ 0x35
 8007fca:	a81c      	add	r0, sp, #112	@ 0x70
 8007fcc:	f003 fb92 	bl	800b6f4 <__copybits>
 8007fd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fd2:	9805      	ldr	r0, [sp, #20]
 8007fd4:	f002 ff60 	bl	800ae98 <_Bfree>
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007fdc:	2e04      	cmp	r6, #4
 8007fde:	d806      	bhi.n	8007fee <_strtod_l+0xe6>
 8007fe0:	e8df f006 	tbb	[pc, r6]
 8007fe4:	201d0314 	.word	0x201d0314
 8007fe8:	14          	.byte	0x14
 8007fe9:	00          	.byte	0x00
 8007fea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007fee:	05e1      	lsls	r1, r4, #23
 8007ff0:	bf48      	it	mi
 8007ff2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007ff6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ffa:	0d1b      	lsrs	r3, r3, #20
 8007ffc:	051b      	lsls	r3, r3, #20
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1bb      	bne.n	8007f7a <_strtod_l+0x72>
 8008002:	f001 fc23 	bl	800984c <__errno>
 8008006:	2322      	movs	r3, #34	@ 0x22
 8008008:	6003      	str	r3, [r0, #0]
 800800a:	e7b6      	b.n	8007f7a <_strtod_l+0x72>
 800800c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008010:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008014:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008018:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800801c:	e7e7      	b.n	8007fee <_strtod_l+0xe6>
 800801e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800819c <_strtod_l+0x294>
 8008022:	e7e4      	b.n	8007fee <_strtod_l+0xe6>
 8008024:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008028:	f04f 3aff 	mov.w	sl, #4294967295
 800802c:	e7df      	b.n	8007fee <_strtod_l+0xe6>
 800802e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008030:	1c5a      	adds	r2, r3, #1
 8008032:	9219      	str	r2, [sp, #100]	@ 0x64
 8008034:	785b      	ldrb	r3, [r3, #1]
 8008036:	2b30      	cmp	r3, #48	@ 0x30
 8008038:	d0f9      	beq.n	800802e <_strtod_l+0x126>
 800803a:	2b00      	cmp	r3, #0
 800803c:	d09d      	beq.n	8007f7a <_strtod_l+0x72>
 800803e:	2301      	movs	r3, #1
 8008040:	9309      	str	r3, [sp, #36]	@ 0x24
 8008042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008044:	930c      	str	r3, [sp, #48]	@ 0x30
 8008046:	2300      	movs	r3, #0
 8008048:	9308      	str	r3, [sp, #32]
 800804a:	930a      	str	r3, [sp, #40]	@ 0x28
 800804c:	461f      	mov	r7, r3
 800804e:	220a      	movs	r2, #10
 8008050:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008052:	7805      	ldrb	r5, [r0, #0]
 8008054:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008058:	b2d9      	uxtb	r1, r3
 800805a:	2909      	cmp	r1, #9
 800805c:	d928      	bls.n	80080b0 <_strtod_l+0x1a8>
 800805e:	494e      	ldr	r1, [pc, #312]	@ (8008198 <_strtod_l+0x290>)
 8008060:	2201      	movs	r2, #1
 8008062:	f001 fb96 	bl	8009792 <strncmp>
 8008066:	2800      	cmp	r0, #0
 8008068:	d032      	beq.n	80080d0 <_strtod_l+0x1c8>
 800806a:	2000      	movs	r0, #0
 800806c:	462a      	mov	r2, r5
 800806e:	4681      	mov	r9, r0
 8008070:	463d      	mov	r5, r7
 8008072:	4603      	mov	r3, r0
 8008074:	2a65      	cmp	r2, #101	@ 0x65
 8008076:	d001      	beq.n	800807c <_strtod_l+0x174>
 8008078:	2a45      	cmp	r2, #69	@ 0x45
 800807a:	d114      	bne.n	80080a6 <_strtod_l+0x19e>
 800807c:	b91d      	cbnz	r5, 8008086 <_strtod_l+0x17e>
 800807e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008080:	4302      	orrs	r2, r0
 8008082:	d095      	beq.n	8007fb0 <_strtod_l+0xa8>
 8008084:	2500      	movs	r5, #0
 8008086:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008088:	1c62      	adds	r2, r4, #1
 800808a:	9219      	str	r2, [sp, #100]	@ 0x64
 800808c:	7862      	ldrb	r2, [r4, #1]
 800808e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008090:	d077      	beq.n	8008182 <_strtod_l+0x27a>
 8008092:	2a2d      	cmp	r2, #45	@ 0x2d
 8008094:	d07b      	beq.n	800818e <_strtod_l+0x286>
 8008096:	f04f 0c00 	mov.w	ip, #0
 800809a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800809e:	2909      	cmp	r1, #9
 80080a0:	f240 8082 	bls.w	80081a8 <_strtod_l+0x2a0>
 80080a4:	9419      	str	r4, [sp, #100]	@ 0x64
 80080a6:	f04f 0800 	mov.w	r8, #0
 80080aa:	e0a2      	b.n	80081f2 <_strtod_l+0x2ea>
 80080ac:	2300      	movs	r3, #0
 80080ae:	e7c7      	b.n	8008040 <_strtod_l+0x138>
 80080b0:	2f08      	cmp	r7, #8
 80080b2:	bfd5      	itete	le
 80080b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80080b6:	9908      	ldrgt	r1, [sp, #32]
 80080b8:	fb02 3301 	mlale	r3, r2, r1, r3
 80080bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80080c0:	f100 0001 	add.w	r0, r0, #1
 80080c4:	bfd4      	ite	le
 80080c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80080c8:	9308      	strgt	r3, [sp, #32]
 80080ca:	3701      	adds	r7, #1
 80080cc:	9019      	str	r0, [sp, #100]	@ 0x64
 80080ce:	e7bf      	b.n	8008050 <_strtod_l+0x148>
 80080d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80080d6:	785a      	ldrb	r2, [r3, #1]
 80080d8:	b37f      	cbz	r7, 800813a <_strtod_l+0x232>
 80080da:	4681      	mov	r9, r0
 80080dc:	463d      	mov	r5, r7
 80080de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80080e2:	2b09      	cmp	r3, #9
 80080e4:	d912      	bls.n	800810c <_strtod_l+0x204>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e7c4      	b.n	8008074 <_strtod_l+0x16c>
 80080ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	9219      	str	r2, [sp, #100]	@ 0x64
 80080f0:	785a      	ldrb	r2, [r3, #1]
 80080f2:	3001      	adds	r0, #1
 80080f4:	2a30      	cmp	r2, #48	@ 0x30
 80080f6:	d0f8      	beq.n	80080ea <_strtod_l+0x1e2>
 80080f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	f200 84d3 	bhi.w	8008aa8 <_strtod_l+0xba0>
 8008102:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008104:	930c      	str	r3, [sp, #48]	@ 0x30
 8008106:	4681      	mov	r9, r0
 8008108:	2000      	movs	r0, #0
 800810a:	4605      	mov	r5, r0
 800810c:	3a30      	subs	r2, #48	@ 0x30
 800810e:	f100 0301 	add.w	r3, r0, #1
 8008112:	d02a      	beq.n	800816a <_strtod_l+0x262>
 8008114:	4499      	add	r9, r3
 8008116:	eb00 0c05 	add.w	ip, r0, r5
 800811a:	462b      	mov	r3, r5
 800811c:	210a      	movs	r1, #10
 800811e:	4563      	cmp	r3, ip
 8008120:	d10d      	bne.n	800813e <_strtod_l+0x236>
 8008122:	1c69      	adds	r1, r5, #1
 8008124:	4401      	add	r1, r0
 8008126:	4428      	add	r0, r5
 8008128:	2808      	cmp	r0, #8
 800812a:	dc16      	bgt.n	800815a <_strtod_l+0x252>
 800812c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800812e:	230a      	movs	r3, #10
 8008130:	fb03 2300 	mla	r3, r3, r0, r2
 8008134:	930a      	str	r3, [sp, #40]	@ 0x28
 8008136:	2300      	movs	r3, #0
 8008138:	e018      	b.n	800816c <_strtod_l+0x264>
 800813a:	4638      	mov	r0, r7
 800813c:	e7da      	b.n	80080f4 <_strtod_l+0x1ec>
 800813e:	2b08      	cmp	r3, #8
 8008140:	f103 0301 	add.w	r3, r3, #1
 8008144:	dc03      	bgt.n	800814e <_strtod_l+0x246>
 8008146:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008148:	434e      	muls	r6, r1
 800814a:	960a      	str	r6, [sp, #40]	@ 0x28
 800814c:	e7e7      	b.n	800811e <_strtod_l+0x216>
 800814e:	2b10      	cmp	r3, #16
 8008150:	bfde      	ittt	le
 8008152:	9e08      	ldrle	r6, [sp, #32]
 8008154:	434e      	mulle	r6, r1
 8008156:	9608      	strle	r6, [sp, #32]
 8008158:	e7e1      	b.n	800811e <_strtod_l+0x216>
 800815a:	280f      	cmp	r0, #15
 800815c:	dceb      	bgt.n	8008136 <_strtod_l+0x22e>
 800815e:	9808      	ldr	r0, [sp, #32]
 8008160:	230a      	movs	r3, #10
 8008162:	fb03 2300 	mla	r3, r3, r0, r2
 8008166:	9308      	str	r3, [sp, #32]
 8008168:	e7e5      	b.n	8008136 <_strtod_l+0x22e>
 800816a:	4629      	mov	r1, r5
 800816c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800816e:	1c50      	adds	r0, r2, #1
 8008170:	9019      	str	r0, [sp, #100]	@ 0x64
 8008172:	7852      	ldrb	r2, [r2, #1]
 8008174:	4618      	mov	r0, r3
 8008176:	460d      	mov	r5, r1
 8008178:	e7b1      	b.n	80080de <_strtod_l+0x1d6>
 800817a:	f04f 0900 	mov.w	r9, #0
 800817e:	2301      	movs	r3, #1
 8008180:	e77d      	b.n	800807e <_strtod_l+0x176>
 8008182:	f04f 0c00 	mov.w	ip, #0
 8008186:	1ca2      	adds	r2, r4, #2
 8008188:	9219      	str	r2, [sp, #100]	@ 0x64
 800818a:	78a2      	ldrb	r2, [r4, #2]
 800818c:	e785      	b.n	800809a <_strtod_l+0x192>
 800818e:	f04f 0c01 	mov.w	ip, #1
 8008192:	e7f8      	b.n	8008186 <_strtod_l+0x27e>
 8008194:	0800c2c4 	.word	0x0800c2c4
 8008198:	0800c2ac 	.word	0x0800c2ac
 800819c:	7ff00000 	.word	0x7ff00000
 80081a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081a2:	1c51      	adds	r1, r2, #1
 80081a4:	9119      	str	r1, [sp, #100]	@ 0x64
 80081a6:	7852      	ldrb	r2, [r2, #1]
 80081a8:	2a30      	cmp	r2, #48	@ 0x30
 80081aa:	d0f9      	beq.n	80081a0 <_strtod_l+0x298>
 80081ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80081b0:	2908      	cmp	r1, #8
 80081b2:	f63f af78 	bhi.w	80080a6 <_strtod_l+0x19e>
 80081b6:	3a30      	subs	r2, #48	@ 0x30
 80081b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80081ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80081be:	f04f 080a 	mov.w	r8, #10
 80081c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081c4:	1c56      	adds	r6, r2, #1
 80081c6:	9619      	str	r6, [sp, #100]	@ 0x64
 80081c8:	7852      	ldrb	r2, [r2, #1]
 80081ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80081ce:	f1be 0f09 	cmp.w	lr, #9
 80081d2:	d939      	bls.n	8008248 <_strtod_l+0x340>
 80081d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80081d6:	1a76      	subs	r6, r6, r1
 80081d8:	2e08      	cmp	r6, #8
 80081da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80081de:	dc03      	bgt.n	80081e8 <_strtod_l+0x2e0>
 80081e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80081e2:	4588      	cmp	r8, r1
 80081e4:	bfa8      	it	ge
 80081e6:	4688      	movge	r8, r1
 80081e8:	f1bc 0f00 	cmp.w	ip, #0
 80081ec:	d001      	beq.n	80081f2 <_strtod_l+0x2ea>
 80081ee:	f1c8 0800 	rsb	r8, r8, #0
 80081f2:	2d00      	cmp	r5, #0
 80081f4:	d14e      	bne.n	8008294 <_strtod_l+0x38c>
 80081f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80081f8:	4308      	orrs	r0, r1
 80081fa:	f47f aebe 	bne.w	8007f7a <_strtod_l+0x72>
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f47f aed6 	bne.w	8007fb0 <_strtod_l+0xa8>
 8008204:	2a69      	cmp	r2, #105	@ 0x69
 8008206:	d028      	beq.n	800825a <_strtod_l+0x352>
 8008208:	dc25      	bgt.n	8008256 <_strtod_l+0x34e>
 800820a:	2a49      	cmp	r2, #73	@ 0x49
 800820c:	d025      	beq.n	800825a <_strtod_l+0x352>
 800820e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008210:	f47f aece 	bne.w	8007fb0 <_strtod_l+0xa8>
 8008214:	499b      	ldr	r1, [pc, #620]	@ (8008484 <_strtod_l+0x57c>)
 8008216:	a819      	add	r0, sp, #100	@ 0x64
 8008218:	f002 fc86 	bl	800ab28 <__match>
 800821c:	2800      	cmp	r0, #0
 800821e:	f43f aec7 	beq.w	8007fb0 <_strtod_l+0xa8>
 8008222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	2b28      	cmp	r3, #40	@ 0x28
 8008228:	d12e      	bne.n	8008288 <_strtod_l+0x380>
 800822a:	4997      	ldr	r1, [pc, #604]	@ (8008488 <_strtod_l+0x580>)
 800822c:	aa1c      	add	r2, sp, #112	@ 0x70
 800822e:	a819      	add	r0, sp, #100	@ 0x64
 8008230:	f002 fc8e 	bl	800ab50 <__hexnan>
 8008234:	2805      	cmp	r0, #5
 8008236:	d127      	bne.n	8008288 <_strtod_l+0x380>
 8008238:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800823a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800823e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008242:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008246:	e698      	b.n	8007f7a <_strtod_l+0x72>
 8008248:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800824a:	fb08 2101 	mla	r1, r8, r1, r2
 800824e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008252:	920e      	str	r2, [sp, #56]	@ 0x38
 8008254:	e7b5      	b.n	80081c2 <_strtod_l+0x2ba>
 8008256:	2a6e      	cmp	r2, #110	@ 0x6e
 8008258:	e7da      	b.n	8008210 <_strtod_l+0x308>
 800825a:	498c      	ldr	r1, [pc, #560]	@ (800848c <_strtod_l+0x584>)
 800825c:	a819      	add	r0, sp, #100	@ 0x64
 800825e:	f002 fc63 	bl	800ab28 <__match>
 8008262:	2800      	cmp	r0, #0
 8008264:	f43f aea4 	beq.w	8007fb0 <_strtod_l+0xa8>
 8008268:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800826a:	4989      	ldr	r1, [pc, #548]	@ (8008490 <_strtod_l+0x588>)
 800826c:	3b01      	subs	r3, #1
 800826e:	a819      	add	r0, sp, #100	@ 0x64
 8008270:	9319      	str	r3, [sp, #100]	@ 0x64
 8008272:	f002 fc59 	bl	800ab28 <__match>
 8008276:	b910      	cbnz	r0, 800827e <_strtod_l+0x376>
 8008278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800827a:	3301      	adds	r3, #1
 800827c:	9319      	str	r3, [sp, #100]	@ 0x64
 800827e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80084a0 <_strtod_l+0x598>
 8008282:	f04f 0a00 	mov.w	sl, #0
 8008286:	e678      	b.n	8007f7a <_strtod_l+0x72>
 8008288:	4882      	ldr	r0, [pc, #520]	@ (8008494 <_strtod_l+0x58c>)
 800828a:	f001 fb1d 	bl	80098c8 <nan>
 800828e:	ec5b ab10 	vmov	sl, fp, d0
 8008292:	e672      	b.n	8007f7a <_strtod_l+0x72>
 8008294:	eba8 0309 	sub.w	r3, r8, r9
 8008298:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800829a:	9309      	str	r3, [sp, #36]	@ 0x24
 800829c:	2f00      	cmp	r7, #0
 800829e:	bf08      	it	eq
 80082a0:	462f      	moveq	r7, r5
 80082a2:	2d10      	cmp	r5, #16
 80082a4:	462c      	mov	r4, r5
 80082a6:	bfa8      	it	ge
 80082a8:	2410      	movge	r4, #16
 80082aa:	f7f8 f92b 	bl	8000504 <__aeabi_ui2d>
 80082ae:	2d09      	cmp	r5, #9
 80082b0:	4682      	mov	sl, r0
 80082b2:	468b      	mov	fp, r1
 80082b4:	dc13      	bgt.n	80082de <_strtod_l+0x3d6>
 80082b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	f43f ae5e 	beq.w	8007f7a <_strtod_l+0x72>
 80082be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c0:	dd78      	ble.n	80083b4 <_strtod_l+0x4ac>
 80082c2:	2b16      	cmp	r3, #22
 80082c4:	dc5f      	bgt.n	8008386 <_strtod_l+0x47e>
 80082c6:	4974      	ldr	r1, [pc, #464]	@ (8008498 <_strtod_l+0x590>)
 80082c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80082cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d0:	4652      	mov	r2, sl
 80082d2:	465b      	mov	r3, fp
 80082d4:	f7f8 f990 	bl	80005f8 <__aeabi_dmul>
 80082d8:	4682      	mov	sl, r0
 80082da:	468b      	mov	fp, r1
 80082dc:	e64d      	b.n	8007f7a <_strtod_l+0x72>
 80082de:	4b6e      	ldr	r3, [pc, #440]	@ (8008498 <_strtod_l+0x590>)
 80082e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80082e8:	f7f8 f986 	bl	80005f8 <__aeabi_dmul>
 80082ec:	4682      	mov	sl, r0
 80082ee:	9808      	ldr	r0, [sp, #32]
 80082f0:	468b      	mov	fp, r1
 80082f2:	f7f8 f907 	bl	8000504 <__aeabi_ui2d>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	f7f7 ffc5 	bl	800028c <__adddf3>
 8008302:	2d0f      	cmp	r5, #15
 8008304:	4682      	mov	sl, r0
 8008306:	468b      	mov	fp, r1
 8008308:	ddd5      	ble.n	80082b6 <_strtod_l+0x3ae>
 800830a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830c:	1b2c      	subs	r4, r5, r4
 800830e:	441c      	add	r4, r3
 8008310:	2c00      	cmp	r4, #0
 8008312:	f340 8096 	ble.w	8008442 <_strtod_l+0x53a>
 8008316:	f014 030f 	ands.w	r3, r4, #15
 800831a:	d00a      	beq.n	8008332 <_strtod_l+0x42a>
 800831c:	495e      	ldr	r1, [pc, #376]	@ (8008498 <_strtod_l+0x590>)
 800831e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008322:	4652      	mov	r2, sl
 8008324:	465b      	mov	r3, fp
 8008326:	e9d1 0100 	ldrd	r0, r1, [r1]
 800832a:	f7f8 f965 	bl	80005f8 <__aeabi_dmul>
 800832e:	4682      	mov	sl, r0
 8008330:	468b      	mov	fp, r1
 8008332:	f034 040f 	bics.w	r4, r4, #15
 8008336:	d073      	beq.n	8008420 <_strtod_l+0x518>
 8008338:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800833c:	dd48      	ble.n	80083d0 <_strtod_l+0x4c8>
 800833e:	2400      	movs	r4, #0
 8008340:	46a0      	mov	r8, r4
 8008342:	940a      	str	r4, [sp, #40]	@ 0x28
 8008344:	46a1      	mov	r9, r4
 8008346:	9a05      	ldr	r2, [sp, #20]
 8008348:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80084a0 <_strtod_l+0x598>
 800834c:	2322      	movs	r3, #34	@ 0x22
 800834e:	6013      	str	r3, [r2, #0]
 8008350:	f04f 0a00 	mov.w	sl, #0
 8008354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008356:	2b00      	cmp	r3, #0
 8008358:	f43f ae0f 	beq.w	8007f7a <_strtod_l+0x72>
 800835c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800835e:	9805      	ldr	r0, [sp, #20]
 8008360:	f002 fd9a 	bl	800ae98 <_Bfree>
 8008364:	9805      	ldr	r0, [sp, #20]
 8008366:	4649      	mov	r1, r9
 8008368:	f002 fd96 	bl	800ae98 <_Bfree>
 800836c:	9805      	ldr	r0, [sp, #20]
 800836e:	4641      	mov	r1, r8
 8008370:	f002 fd92 	bl	800ae98 <_Bfree>
 8008374:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008376:	9805      	ldr	r0, [sp, #20]
 8008378:	f002 fd8e 	bl	800ae98 <_Bfree>
 800837c:	9805      	ldr	r0, [sp, #20]
 800837e:	4621      	mov	r1, r4
 8008380:	f002 fd8a 	bl	800ae98 <_Bfree>
 8008384:	e5f9      	b.n	8007f7a <_strtod_l+0x72>
 8008386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008388:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800838c:	4293      	cmp	r3, r2
 800838e:	dbbc      	blt.n	800830a <_strtod_l+0x402>
 8008390:	4c41      	ldr	r4, [pc, #260]	@ (8008498 <_strtod_l+0x590>)
 8008392:	f1c5 050f 	rsb	r5, r5, #15
 8008396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800839a:	4652      	mov	r2, sl
 800839c:	465b      	mov	r3, fp
 800839e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a2:	f7f8 f929 	bl	80005f8 <__aeabi_dmul>
 80083a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a8:	1b5d      	subs	r5, r3, r5
 80083aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083b2:	e78f      	b.n	80082d4 <_strtod_l+0x3cc>
 80083b4:	3316      	adds	r3, #22
 80083b6:	dba8      	blt.n	800830a <_strtod_l+0x402>
 80083b8:	4b37      	ldr	r3, [pc, #220]	@ (8008498 <_strtod_l+0x590>)
 80083ba:	eba9 0808 	sub.w	r8, r9, r8
 80083be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80083c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80083c6:	4650      	mov	r0, sl
 80083c8:	4659      	mov	r1, fp
 80083ca:	f7f8 fa3f 	bl	800084c <__aeabi_ddiv>
 80083ce:	e783      	b.n	80082d8 <_strtod_l+0x3d0>
 80083d0:	4b32      	ldr	r3, [pc, #200]	@ (800849c <_strtod_l+0x594>)
 80083d2:	9308      	str	r3, [sp, #32]
 80083d4:	2300      	movs	r3, #0
 80083d6:	1124      	asrs	r4, r4, #4
 80083d8:	4650      	mov	r0, sl
 80083da:	4659      	mov	r1, fp
 80083dc:	461e      	mov	r6, r3
 80083de:	2c01      	cmp	r4, #1
 80083e0:	dc21      	bgt.n	8008426 <_strtod_l+0x51e>
 80083e2:	b10b      	cbz	r3, 80083e8 <_strtod_l+0x4e0>
 80083e4:	4682      	mov	sl, r0
 80083e6:	468b      	mov	fp, r1
 80083e8:	492c      	ldr	r1, [pc, #176]	@ (800849c <_strtod_l+0x594>)
 80083ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80083ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80083f2:	4652      	mov	r2, sl
 80083f4:	465b      	mov	r3, fp
 80083f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083fa:	f7f8 f8fd 	bl	80005f8 <__aeabi_dmul>
 80083fe:	4b28      	ldr	r3, [pc, #160]	@ (80084a0 <_strtod_l+0x598>)
 8008400:	460a      	mov	r2, r1
 8008402:	400b      	ands	r3, r1
 8008404:	4927      	ldr	r1, [pc, #156]	@ (80084a4 <_strtod_l+0x59c>)
 8008406:	428b      	cmp	r3, r1
 8008408:	4682      	mov	sl, r0
 800840a:	d898      	bhi.n	800833e <_strtod_l+0x436>
 800840c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008410:	428b      	cmp	r3, r1
 8008412:	bf86      	itte	hi
 8008414:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80084a8 <_strtod_l+0x5a0>
 8008418:	f04f 3aff 	movhi.w	sl, #4294967295
 800841c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008420:	2300      	movs	r3, #0
 8008422:	9308      	str	r3, [sp, #32]
 8008424:	e07a      	b.n	800851c <_strtod_l+0x614>
 8008426:	07e2      	lsls	r2, r4, #31
 8008428:	d505      	bpl.n	8008436 <_strtod_l+0x52e>
 800842a:	9b08      	ldr	r3, [sp, #32]
 800842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008430:	f7f8 f8e2 	bl	80005f8 <__aeabi_dmul>
 8008434:	2301      	movs	r3, #1
 8008436:	9a08      	ldr	r2, [sp, #32]
 8008438:	3208      	adds	r2, #8
 800843a:	3601      	adds	r6, #1
 800843c:	1064      	asrs	r4, r4, #1
 800843e:	9208      	str	r2, [sp, #32]
 8008440:	e7cd      	b.n	80083de <_strtod_l+0x4d6>
 8008442:	d0ed      	beq.n	8008420 <_strtod_l+0x518>
 8008444:	4264      	negs	r4, r4
 8008446:	f014 020f 	ands.w	r2, r4, #15
 800844a:	d00a      	beq.n	8008462 <_strtod_l+0x55a>
 800844c:	4b12      	ldr	r3, [pc, #72]	@ (8008498 <_strtod_l+0x590>)
 800844e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008452:	4650      	mov	r0, sl
 8008454:	4659      	mov	r1, fp
 8008456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845a:	f7f8 f9f7 	bl	800084c <__aeabi_ddiv>
 800845e:	4682      	mov	sl, r0
 8008460:	468b      	mov	fp, r1
 8008462:	1124      	asrs	r4, r4, #4
 8008464:	d0dc      	beq.n	8008420 <_strtod_l+0x518>
 8008466:	2c1f      	cmp	r4, #31
 8008468:	dd20      	ble.n	80084ac <_strtod_l+0x5a4>
 800846a:	2400      	movs	r4, #0
 800846c:	46a0      	mov	r8, r4
 800846e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008470:	46a1      	mov	r9, r4
 8008472:	9a05      	ldr	r2, [sp, #20]
 8008474:	2322      	movs	r3, #34	@ 0x22
 8008476:	f04f 0a00 	mov.w	sl, #0
 800847a:	f04f 0b00 	mov.w	fp, #0
 800847e:	6013      	str	r3, [r2, #0]
 8008480:	e768      	b.n	8008354 <_strtod_l+0x44c>
 8008482:	bf00      	nop
 8008484:	0800c40e 	.word	0x0800c40e
 8008488:	0800c2b0 	.word	0x0800c2b0
 800848c:	0800c406 	.word	0x0800c406
 8008490:	0800c440 	.word	0x0800c440
 8008494:	0800c6cc 	.word	0x0800c6cc
 8008498:	0800c5b8 	.word	0x0800c5b8
 800849c:	0800c590 	.word	0x0800c590
 80084a0:	7ff00000 	.word	0x7ff00000
 80084a4:	7ca00000 	.word	0x7ca00000
 80084a8:	7fefffff 	.word	0x7fefffff
 80084ac:	f014 0310 	ands.w	r3, r4, #16
 80084b0:	bf18      	it	ne
 80084b2:	236a      	movne	r3, #106	@ 0x6a
 80084b4:	4ea9      	ldr	r6, [pc, #676]	@ (800875c <_strtod_l+0x854>)
 80084b6:	9308      	str	r3, [sp, #32]
 80084b8:	4650      	mov	r0, sl
 80084ba:	4659      	mov	r1, fp
 80084bc:	2300      	movs	r3, #0
 80084be:	07e2      	lsls	r2, r4, #31
 80084c0:	d504      	bpl.n	80084cc <_strtod_l+0x5c4>
 80084c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084c6:	f7f8 f897 	bl	80005f8 <__aeabi_dmul>
 80084ca:	2301      	movs	r3, #1
 80084cc:	1064      	asrs	r4, r4, #1
 80084ce:	f106 0608 	add.w	r6, r6, #8
 80084d2:	d1f4      	bne.n	80084be <_strtod_l+0x5b6>
 80084d4:	b10b      	cbz	r3, 80084da <_strtod_l+0x5d2>
 80084d6:	4682      	mov	sl, r0
 80084d8:	468b      	mov	fp, r1
 80084da:	9b08      	ldr	r3, [sp, #32]
 80084dc:	b1b3      	cbz	r3, 800850c <_strtod_l+0x604>
 80084de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80084e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	4659      	mov	r1, fp
 80084ea:	dd0f      	ble.n	800850c <_strtod_l+0x604>
 80084ec:	2b1f      	cmp	r3, #31
 80084ee:	dd55      	ble.n	800859c <_strtod_l+0x694>
 80084f0:	2b34      	cmp	r3, #52	@ 0x34
 80084f2:	bfde      	ittt	le
 80084f4:	f04f 33ff 	movle.w	r3, #4294967295
 80084f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80084fc:	4093      	lslle	r3, r2
 80084fe:	f04f 0a00 	mov.w	sl, #0
 8008502:	bfcc      	ite	gt
 8008504:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008508:	ea03 0b01 	andle.w	fp, r3, r1
 800850c:	2200      	movs	r2, #0
 800850e:	2300      	movs	r3, #0
 8008510:	4650      	mov	r0, sl
 8008512:	4659      	mov	r1, fp
 8008514:	f7f8 fad8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008518:	2800      	cmp	r0, #0
 800851a:	d1a6      	bne.n	800846a <_strtod_l+0x562>
 800851c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008522:	9805      	ldr	r0, [sp, #20]
 8008524:	462b      	mov	r3, r5
 8008526:	463a      	mov	r2, r7
 8008528:	f002 fd1e 	bl	800af68 <__s2b>
 800852c:	900a      	str	r0, [sp, #40]	@ 0x28
 800852e:	2800      	cmp	r0, #0
 8008530:	f43f af05 	beq.w	800833e <_strtod_l+0x436>
 8008534:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008536:	2a00      	cmp	r2, #0
 8008538:	eba9 0308 	sub.w	r3, r9, r8
 800853c:	bfa8      	it	ge
 800853e:	2300      	movge	r3, #0
 8008540:	9312      	str	r3, [sp, #72]	@ 0x48
 8008542:	2400      	movs	r4, #0
 8008544:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008548:	9316      	str	r3, [sp, #88]	@ 0x58
 800854a:	46a0      	mov	r8, r4
 800854c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800854e:	9805      	ldr	r0, [sp, #20]
 8008550:	6859      	ldr	r1, [r3, #4]
 8008552:	f002 fc61 	bl	800ae18 <_Balloc>
 8008556:	4681      	mov	r9, r0
 8008558:	2800      	cmp	r0, #0
 800855a:	f43f aef4 	beq.w	8008346 <_strtod_l+0x43e>
 800855e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008560:	691a      	ldr	r2, [r3, #16]
 8008562:	3202      	adds	r2, #2
 8008564:	f103 010c 	add.w	r1, r3, #12
 8008568:	0092      	lsls	r2, r2, #2
 800856a:	300c      	adds	r0, #12
 800856c:	f001 f99b 	bl	80098a6 <memcpy>
 8008570:	ec4b ab10 	vmov	d0, sl, fp
 8008574:	9805      	ldr	r0, [sp, #20]
 8008576:	aa1c      	add	r2, sp, #112	@ 0x70
 8008578:	a91b      	add	r1, sp, #108	@ 0x6c
 800857a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800857e:	f003 f82f 	bl	800b5e0 <__d2b>
 8008582:	901a      	str	r0, [sp, #104]	@ 0x68
 8008584:	2800      	cmp	r0, #0
 8008586:	f43f aede 	beq.w	8008346 <_strtod_l+0x43e>
 800858a:	9805      	ldr	r0, [sp, #20]
 800858c:	2101      	movs	r1, #1
 800858e:	f002 fd81 	bl	800b094 <__i2b>
 8008592:	4680      	mov	r8, r0
 8008594:	b948      	cbnz	r0, 80085aa <_strtod_l+0x6a2>
 8008596:	f04f 0800 	mov.w	r8, #0
 800859a:	e6d4      	b.n	8008346 <_strtod_l+0x43e>
 800859c:	f04f 32ff 	mov.w	r2, #4294967295
 80085a0:	fa02 f303 	lsl.w	r3, r2, r3
 80085a4:	ea03 0a0a 	and.w	sl, r3, sl
 80085a8:	e7b0      	b.n	800850c <_strtod_l+0x604>
 80085aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80085ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	bfab      	itete	ge
 80085b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80085b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80085b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80085b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80085ba:	bfac      	ite	ge
 80085bc:	18ef      	addge	r7, r5, r3
 80085be:	1b5e      	sublt	r6, r3, r5
 80085c0:	9b08      	ldr	r3, [sp, #32]
 80085c2:	1aed      	subs	r5, r5, r3
 80085c4:	4415      	add	r5, r2
 80085c6:	4b66      	ldr	r3, [pc, #408]	@ (8008760 <_strtod_l+0x858>)
 80085c8:	3d01      	subs	r5, #1
 80085ca:	429d      	cmp	r5, r3
 80085cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80085d0:	da50      	bge.n	8008674 <_strtod_l+0x76c>
 80085d2:	1b5b      	subs	r3, r3, r5
 80085d4:	2b1f      	cmp	r3, #31
 80085d6:	eba2 0203 	sub.w	r2, r2, r3
 80085da:	f04f 0101 	mov.w	r1, #1
 80085de:	dc3d      	bgt.n	800865c <_strtod_l+0x754>
 80085e0:	fa01 f303 	lsl.w	r3, r1, r3
 80085e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085e6:	2300      	movs	r3, #0
 80085e8:	9310      	str	r3, [sp, #64]	@ 0x40
 80085ea:	18bd      	adds	r5, r7, r2
 80085ec:	9b08      	ldr	r3, [sp, #32]
 80085ee:	42af      	cmp	r7, r5
 80085f0:	4416      	add	r6, r2
 80085f2:	441e      	add	r6, r3
 80085f4:	463b      	mov	r3, r7
 80085f6:	bfa8      	it	ge
 80085f8:	462b      	movge	r3, r5
 80085fa:	42b3      	cmp	r3, r6
 80085fc:	bfa8      	it	ge
 80085fe:	4633      	movge	r3, r6
 8008600:	2b00      	cmp	r3, #0
 8008602:	bfc2      	ittt	gt
 8008604:	1aed      	subgt	r5, r5, r3
 8008606:	1af6      	subgt	r6, r6, r3
 8008608:	1aff      	subgt	r7, r7, r3
 800860a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800860c:	2b00      	cmp	r3, #0
 800860e:	dd16      	ble.n	800863e <_strtod_l+0x736>
 8008610:	4641      	mov	r1, r8
 8008612:	9805      	ldr	r0, [sp, #20]
 8008614:	461a      	mov	r2, r3
 8008616:	f002 fdfd 	bl	800b214 <__pow5mult>
 800861a:	4680      	mov	r8, r0
 800861c:	2800      	cmp	r0, #0
 800861e:	d0ba      	beq.n	8008596 <_strtod_l+0x68e>
 8008620:	4601      	mov	r1, r0
 8008622:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008624:	9805      	ldr	r0, [sp, #20]
 8008626:	f002 fd4b 	bl	800b0c0 <__multiply>
 800862a:	900e      	str	r0, [sp, #56]	@ 0x38
 800862c:	2800      	cmp	r0, #0
 800862e:	f43f ae8a 	beq.w	8008346 <_strtod_l+0x43e>
 8008632:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008634:	9805      	ldr	r0, [sp, #20]
 8008636:	f002 fc2f 	bl	800ae98 <_Bfree>
 800863a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800863c:	931a      	str	r3, [sp, #104]	@ 0x68
 800863e:	2d00      	cmp	r5, #0
 8008640:	dc1d      	bgt.n	800867e <_strtod_l+0x776>
 8008642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd23      	ble.n	8008690 <_strtod_l+0x788>
 8008648:	4649      	mov	r1, r9
 800864a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800864c:	9805      	ldr	r0, [sp, #20]
 800864e:	f002 fde1 	bl	800b214 <__pow5mult>
 8008652:	4681      	mov	r9, r0
 8008654:	b9e0      	cbnz	r0, 8008690 <_strtod_l+0x788>
 8008656:	f04f 0900 	mov.w	r9, #0
 800865a:	e674      	b.n	8008346 <_strtod_l+0x43e>
 800865c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008660:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008664:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008668:	35e2      	adds	r5, #226	@ 0xe2
 800866a:	fa01 f305 	lsl.w	r3, r1, r5
 800866e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008670:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008672:	e7ba      	b.n	80085ea <_strtod_l+0x6e2>
 8008674:	2300      	movs	r3, #0
 8008676:	9310      	str	r3, [sp, #64]	@ 0x40
 8008678:	2301      	movs	r3, #1
 800867a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800867c:	e7b5      	b.n	80085ea <_strtod_l+0x6e2>
 800867e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008680:	9805      	ldr	r0, [sp, #20]
 8008682:	462a      	mov	r2, r5
 8008684:	f002 fe20 	bl	800b2c8 <__lshift>
 8008688:	901a      	str	r0, [sp, #104]	@ 0x68
 800868a:	2800      	cmp	r0, #0
 800868c:	d1d9      	bne.n	8008642 <_strtod_l+0x73a>
 800868e:	e65a      	b.n	8008346 <_strtod_l+0x43e>
 8008690:	2e00      	cmp	r6, #0
 8008692:	dd07      	ble.n	80086a4 <_strtod_l+0x79c>
 8008694:	4649      	mov	r1, r9
 8008696:	9805      	ldr	r0, [sp, #20]
 8008698:	4632      	mov	r2, r6
 800869a:	f002 fe15 	bl	800b2c8 <__lshift>
 800869e:	4681      	mov	r9, r0
 80086a0:	2800      	cmp	r0, #0
 80086a2:	d0d8      	beq.n	8008656 <_strtod_l+0x74e>
 80086a4:	2f00      	cmp	r7, #0
 80086a6:	dd08      	ble.n	80086ba <_strtod_l+0x7b2>
 80086a8:	4641      	mov	r1, r8
 80086aa:	9805      	ldr	r0, [sp, #20]
 80086ac:	463a      	mov	r2, r7
 80086ae:	f002 fe0b 	bl	800b2c8 <__lshift>
 80086b2:	4680      	mov	r8, r0
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f43f ae46 	beq.w	8008346 <_strtod_l+0x43e>
 80086ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086bc:	9805      	ldr	r0, [sp, #20]
 80086be:	464a      	mov	r2, r9
 80086c0:	f002 fe8a 	bl	800b3d8 <__mdiff>
 80086c4:	4604      	mov	r4, r0
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f43f ae3d 	beq.w	8008346 <_strtod_l+0x43e>
 80086cc:	68c3      	ldr	r3, [r0, #12]
 80086ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086d0:	2300      	movs	r3, #0
 80086d2:	60c3      	str	r3, [r0, #12]
 80086d4:	4641      	mov	r1, r8
 80086d6:	f002 fe63 	bl	800b3a0 <__mcmp>
 80086da:	2800      	cmp	r0, #0
 80086dc:	da46      	bge.n	800876c <_strtod_l+0x864>
 80086de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086e0:	ea53 030a 	orrs.w	r3, r3, sl
 80086e4:	d16c      	bne.n	80087c0 <_strtod_l+0x8b8>
 80086e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d168      	bne.n	80087c0 <_strtod_l+0x8b8>
 80086ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80086f2:	0d1b      	lsrs	r3, r3, #20
 80086f4:	051b      	lsls	r3, r3, #20
 80086f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80086fa:	d961      	bls.n	80087c0 <_strtod_l+0x8b8>
 80086fc:	6963      	ldr	r3, [r4, #20]
 80086fe:	b913      	cbnz	r3, 8008706 <_strtod_l+0x7fe>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	2b01      	cmp	r3, #1
 8008704:	dd5c      	ble.n	80087c0 <_strtod_l+0x8b8>
 8008706:	4621      	mov	r1, r4
 8008708:	2201      	movs	r2, #1
 800870a:	9805      	ldr	r0, [sp, #20]
 800870c:	f002 fddc 	bl	800b2c8 <__lshift>
 8008710:	4641      	mov	r1, r8
 8008712:	4604      	mov	r4, r0
 8008714:	f002 fe44 	bl	800b3a0 <__mcmp>
 8008718:	2800      	cmp	r0, #0
 800871a:	dd51      	ble.n	80087c0 <_strtod_l+0x8b8>
 800871c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008720:	9a08      	ldr	r2, [sp, #32]
 8008722:	0d1b      	lsrs	r3, r3, #20
 8008724:	051b      	lsls	r3, r3, #20
 8008726:	2a00      	cmp	r2, #0
 8008728:	d06b      	beq.n	8008802 <_strtod_l+0x8fa>
 800872a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800872e:	d868      	bhi.n	8008802 <_strtod_l+0x8fa>
 8008730:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008734:	f67f ae9d 	bls.w	8008472 <_strtod_l+0x56a>
 8008738:	4b0a      	ldr	r3, [pc, #40]	@ (8008764 <_strtod_l+0x85c>)
 800873a:	4650      	mov	r0, sl
 800873c:	4659      	mov	r1, fp
 800873e:	2200      	movs	r2, #0
 8008740:	f7f7 ff5a 	bl	80005f8 <__aeabi_dmul>
 8008744:	4b08      	ldr	r3, [pc, #32]	@ (8008768 <_strtod_l+0x860>)
 8008746:	400b      	ands	r3, r1
 8008748:	4682      	mov	sl, r0
 800874a:	468b      	mov	fp, r1
 800874c:	2b00      	cmp	r3, #0
 800874e:	f47f ae05 	bne.w	800835c <_strtod_l+0x454>
 8008752:	9a05      	ldr	r2, [sp, #20]
 8008754:	2322      	movs	r3, #34	@ 0x22
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	e600      	b.n	800835c <_strtod_l+0x454>
 800875a:	bf00      	nop
 800875c:	0800c2d8 	.word	0x0800c2d8
 8008760:	fffffc02 	.word	0xfffffc02
 8008764:	39500000 	.word	0x39500000
 8008768:	7ff00000 	.word	0x7ff00000
 800876c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008770:	d165      	bne.n	800883e <_strtod_l+0x936>
 8008772:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008774:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008778:	b35a      	cbz	r2, 80087d2 <_strtod_l+0x8ca>
 800877a:	4a9f      	ldr	r2, [pc, #636]	@ (80089f8 <_strtod_l+0xaf0>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d12b      	bne.n	80087d8 <_strtod_l+0x8d0>
 8008780:	9b08      	ldr	r3, [sp, #32]
 8008782:	4651      	mov	r1, sl
 8008784:	b303      	cbz	r3, 80087c8 <_strtod_l+0x8c0>
 8008786:	4b9d      	ldr	r3, [pc, #628]	@ (80089fc <_strtod_l+0xaf4>)
 8008788:	465a      	mov	r2, fp
 800878a:	4013      	ands	r3, r2
 800878c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	d81b      	bhi.n	80087ce <_strtod_l+0x8c6>
 8008796:	0d1b      	lsrs	r3, r3, #20
 8008798:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800879c:	fa02 f303 	lsl.w	r3, r2, r3
 80087a0:	4299      	cmp	r1, r3
 80087a2:	d119      	bne.n	80087d8 <_strtod_l+0x8d0>
 80087a4:	4b96      	ldr	r3, [pc, #600]	@ (8008a00 <_strtod_l+0xaf8>)
 80087a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d102      	bne.n	80087b2 <_strtod_l+0x8aa>
 80087ac:	3101      	adds	r1, #1
 80087ae:	f43f adca 	beq.w	8008346 <_strtod_l+0x43e>
 80087b2:	4b92      	ldr	r3, [pc, #584]	@ (80089fc <_strtod_l+0xaf4>)
 80087b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087b6:	401a      	ands	r2, r3
 80087b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80087bc:	f04f 0a00 	mov.w	sl, #0
 80087c0:	9b08      	ldr	r3, [sp, #32]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1b8      	bne.n	8008738 <_strtod_l+0x830>
 80087c6:	e5c9      	b.n	800835c <_strtod_l+0x454>
 80087c8:	f04f 33ff 	mov.w	r3, #4294967295
 80087cc:	e7e8      	b.n	80087a0 <_strtod_l+0x898>
 80087ce:	4613      	mov	r3, r2
 80087d0:	e7e6      	b.n	80087a0 <_strtod_l+0x898>
 80087d2:	ea53 030a 	orrs.w	r3, r3, sl
 80087d6:	d0a1      	beq.n	800871c <_strtod_l+0x814>
 80087d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80087da:	b1db      	cbz	r3, 8008814 <_strtod_l+0x90c>
 80087dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087de:	4213      	tst	r3, r2
 80087e0:	d0ee      	beq.n	80087c0 <_strtod_l+0x8b8>
 80087e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087e4:	9a08      	ldr	r2, [sp, #32]
 80087e6:	4650      	mov	r0, sl
 80087e8:	4659      	mov	r1, fp
 80087ea:	b1bb      	cbz	r3, 800881c <_strtod_l+0x914>
 80087ec:	f7ff fb6e 	bl	8007ecc <sulp>
 80087f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087f4:	ec53 2b10 	vmov	r2, r3, d0
 80087f8:	f7f7 fd48 	bl	800028c <__adddf3>
 80087fc:	4682      	mov	sl, r0
 80087fe:	468b      	mov	fp, r1
 8008800:	e7de      	b.n	80087c0 <_strtod_l+0x8b8>
 8008802:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008806:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800880a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800880e:	f04f 3aff 	mov.w	sl, #4294967295
 8008812:	e7d5      	b.n	80087c0 <_strtod_l+0x8b8>
 8008814:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008816:	ea13 0f0a 	tst.w	r3, sl
 800881a:	e7e1      	b.n	80087e0 <_strtod_l+0x8d8>
 800881c:	f7ff fb56 	bl	8007ecc <sulp>
 8008820:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008824:	ec53 2b10 	vmov	r2, r3, d0
 8008828:	f7f7 fd2e 	bl	8000288 <__aeabi_dsub>
 800882c:	2200      	movs	r2, #0
 800882e:	2300      	movs	r3, #0
 8008830:	4682      	mov	sl, r0
 8008832:	468b      	mov	fp, r1
 8008834:	f7f8 f948 	bl	8000ac8 <__aeabi_dcmpeq>
 8008838:	2800      	cmp	r0, #0
 800883a:	d0c1      	beq.n	80087c0 <_strtod_l+0x8b8>
 800883c:	e619      	b.n	8008472 <_strtod_l+0x56a>
 800883e:	4641      	mov	r1, r8
 8008840:	4620      	mov	r0, r4
 8008842:	f002 ff25 	bl	800b690 <__ratio>
 8008846:	ec57 6b10 	vmov	r6, r7, d0
 800884a:	2200      	movs	r2, #0
 800884c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f8 f94c 	bl	8000af0 <__aeabi_dcmple>
 8008858:	2800      	cmp	r0, #0
 800885a:	d06f      	beq.n	800893c <_strtod_l+0xa34>
 800885c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800885e:	2b00      	cmp	r3, #0
 8008860:	d17a      	bne.n	8008958 <_strtod_l+0xa50>
 8008862:	f1ba 0f00 	cmp.w	sl, #0
 8008866:	d158      	bne.n	800891a <_strtod_l+0xa12>
 8008868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800886a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800886e:	2b00      	cmp	r3, #0
 8008870:	d15a      	bne.n	8008928 <_strtod_l+0xa20>
 8008872:	4b64      	ldr	r3, [pc, #400]	@ (8008a04 <_strtod_l+0xafc>)
 8008874:	2200      	movs	r2, #0
 8008876:	4630      	mov	r0, r6
 8008878:	4639      	mov	r1, r7
 800887a:	f7f8 f92f 	bl	8000adc <__aeabi_dcmplt>
 800887e:	2800      	cmp	r0, #0
 8008880:	d159      	bne.n	8008936 <_strtod_l+0xa2e>
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	4b60      	ldr	r3, [pc, #384]	@ (8008a08 <_strtod_l+0xb00>)
 8008888:	2200      	movs	r2, #0
 800888a:	f7f7 feb5 	bl	80005f8 <__aeabi_dmul>
 800888e:	4606      	mov	r6, r0
 8008890:	460f      	mov	r7, r1
 8008892:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008896:	9606      	str	r6, [sp, #24]
 8008898:	9307      	str	r3, [sp, #28]
 800889a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800889e:	4d57      	ldr	r5, [pc, #348]	@ (80089fc <_strtod_l+0xaf4>)
 80088a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80088a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088a6:	401d      	ands	r5, r3
 80088a8:	4b58      	ldr	r3, [pc, #352]	@ (8008a0c <_strtod_l+0xb04>)
 80088aa:	429d      	cmp	r5, r3
 80088ac:	f040 80b2 	bne.w	8008a14 <_strtod_l+0xb0c>
 80088b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80088b6:	ec4b ab10 	vmov	d0, sl, fp
 80088ba:	f002 fe21 	bl	800b500 <__ulp>
 80088be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088c2:	ec51 0b10 	vmov	r0, r1, d0
 80088c6:	f7f7 fe97 	bl	80005f8 <__aeabi_dmul>
 80088ca:	4652      	mov	r2, sl
 80088cc:	465b      	mov	r3, fp
 80088ce:	f7f7 fcdd 	bl	800028c <__adddf3>
 80088d2:	460b      	mov	r3, r1
 80088d4:	4949      	ldr	r1, [pc, #292]	@ (80089fc <_strtod_l+0xaf4>)
 80088d6:	4a4e      	ldr	r2, [pc, #312]	@ (8008a10 <_strtod_l+0xb08>)
 80088d8:	4019      	ands	r1, r3
 80088da:	4291      	cmp	r1, r2
 80088dc:	4682      	mov	sl, r0
 80088de:	d942      	bls.n	8008966 <_strtod_l+0xa5e>
 80088e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80088e2:	4b47      	ldr	r3, [pc, #284]	@ (8008a00 <_strtod_l+0xaf8>)
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d103      	bne.n	80088f0 <_strtod_l+0x9e8>
 80088e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088ea:	3301      	adds	r3, #1
 80088ec:	f43f ad2b 	beq.w	8008346 <_strtod_l+0x43e>
 80088f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008a00 <_strtod_l+0xaf8>
 80088f4:	f04f 3aff 	mov.w	sl, #4294967295
 80088f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80088fa:	9805      	ldr	r0, [sp, #20]
 80088fc:	f002 facc 	bl	800ae98 <_Bfree>
 8008900:	9805      	ldr	r0, [sp, #20]
 8008902:	4649      	mov	r1, r9
 8008904:	f002 fac8 	bl	800ae98 <_Bfree>
 8008908:	9805      	ldr	r0, [sp, #20]
 800890a:	4641      	mov	r1, r8
 800890c:	f002 fac4 	bl	800ae98 <_Bfree>
 8008910:	9805      	ldr	r0, [sp, #20]
 8008912:	4621      	mov	r1, r4
 8008914:	f002 fac0 	bl	800ae98 <_Bfree>
 8008918:	e618      	b.n	800854c <_strtod_l+0x644>
 800891a:	f1ba 0f01 	cmp.w	sl, #1
 800891e:	d103      	bne.n	8008928 <_strtod_l+0xa20>
 8008920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008922:	2b00      	cmp	r3, #0
 8008924:	f43f ada5 	beq.w	8008472 <_strtod_l+0x56a>
 8008928:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80089d8 <_strtod_l+0xad0>
 800892c:	4f35      	ldr	r7, [pc, #212]	@ (8008a04 <_strtod_l+0xafc>)
 800892e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008932:	2600      	movs	r6, #0
 8008934:	e7b1      	b.n	800889a <_strtod_l+0x992>
 8008936:	4f34      	ldr	r7, [pc, #208]	@ (8008a08 <_strtod_l+0xb00>)
 8008938:	2600      	movs	r6, #0
 800893a:	e7aa      	b.n	8008892 <_strtod_l+0x98a>
 800893c:	4b32      	ldr	r3, [pc, #200]	@ (8008a08 <_strtod_l+0xb00>)
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	2200      	movs	r2, #0
 8008944:	f7f7 fe58 	bl	80005f8 <__aeabi_dmul>
 8008948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800894a:	4606      	mov	r6, r0
 800894c:	460f      	mov	r7, r1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d09f      	beq.n	8008892 <_strtod_l+0x98a>
 8008952:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008956:	e7a0      	b.n	800889a <_strtod_l+0x992>
 8008958:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80089e0 <_strtod_l+0xad8>
 800895c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008960:	ec57 6b17 	vmov	r6, r7, d7
 8008964:	e799      	b.n	800889a <_strtod_l+0x992>
 8008966:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800896a:	9b08      	ldr	r3, [sp, #32]
 800896c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1c1      	bne.n	80088f8 <_strtod_l+0x9f0>
 8008974:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008978:	0d1b      	lsrs	r3, r3, #20
 800897a:	051b      	lsls	r3, r3, #20
 800897c:	429d      	cmp	r5, r3
 800897e:	d1bb      	bne.n	80088f8 <_strtod_l+0x9f0>
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f8 f998 	bl	8000cb8 <__aeabi_d2lz>
 8008988:	f7f7 fe08 	bl	800059c <__aeabi_l2d>
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc78 	bl	8000288 <__aeabi_dsub>
 8008998:	460b      	mov	r3, r1
 800899a:	4602      	mov	r2, r0
 800899c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80089a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80089a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089a6:	ea46 060a 	orr.w	r6, r6, sl
 80089aa:	431e      	orrs	r6, r3
 80089ac:	d06f      	beq.n	8008a8e <_strtod_l+0xb86>
 80089ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80089e8 <_strtod_l+0xae0>)
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f7f8 f892 	bl	8000adc <__aeabi_dcmplt>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	f47f accf 	bne.w	800835c <_strtod_l+0x454>
 80089be:	a30c      	add	r3, pc, #48	@ (adr r3, 80089f0 <_strtod_l+0xae8>)
 80089c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089c8:	f7f8 f8a6 	bl	8000b18 <__aeabi_dcmpgt>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d093      	beq.n	80088f8 <_strtod_l+0x9f0>
 80089d0:	e4c4      	b.n	800835c <_strtod_l+0x454>
 80089d2:	bf00      	nop
 80089d4:	f3af 8000 	nop.w
 80089d8:	00000000 	.word	0x00000000
 80089dc:	bff00000 	.word	0xbff00000
 80089e0:	00000000 	.word	0x00000000
 80089e4:	3ff00000 	.word	0x3ff00000
 80089e8:	94a03595 	.word	0x94a03595
 80089ec:	3fdfffff 	.word	0x3fdfffff
 80089f0:	35afe535 	.word	0x35afe535
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	000fffff 	.word	0x000fffff
 80089fc:	7ff00000 	.word	0x7ff00000
 8008a00:	7fefffff 	.word	0x7fefffff
 8008a04:	3ff00000 	.word	0x3ff00000
 8008a08:	3fe00000 	.word	0x3fe00000
 8008a0c:	7fe00000 	.word	0x7fe00000
 8008a10:	7c9fffff 	.word	0x7c9fffff
 8008a14:	9b08      	ldr	r3, [sp, #32]
 8008a16:	b323      	cbz	r3, 8008a62 <_strtod_l+0xb5a>
 8008a18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008a1c:	d821      	bhi.n	8008a62 <_strtod_l+0xb5a>
 8008a1e:	a328      	add	r3, pc, #160	@ (adr r3, 8008ac0 <_strtod_l+0xbb8>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f8 f862 	bl	8000af0 <__aeabi_dcmple>
 8008a2c:	b1a0      	cbz	r0, 8008a58 <_strtod_l+0xb50>
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4630      	mov	r0, r6
 8008a32:	f7f8 f8b9 	bl	8000ba8 <__aeabi_d2uiz>
 8008a36:	2801      	cmp	r0, #1
 8008a38:	bf38      	it	cc
 8008a3a:	2001      	movcc	r0, #1
 8008a3c:	f7f7 fd62 	bl	8000504 <__aeabi_ui2d>
 8008a40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	b9fb      	cbnz	r3, 8008a88 <_strtod_l+0xb80>
 8008a48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a4c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008a4e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008a54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008a5e:	1b5b      	subs	r3, r3, r5
 8008a60:	9311      	str	r3, [sp, #68]	@ 0x44
 8008a62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008a6a:	f002 fd49 	bl	800b500 <__ulp>
 8008a6e:	4650      	mov	r0, sl
 8008a70:	ec53 2b10 	vmov	r2, r3, d0
 8008a74:	4659      	mov	r1, fp
 8008a76:	f7f7 fdbf 	bl	80005f8 <__aeabi_dmul>
 8008a7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008a7e:	f7f7 fc05 	bl	800028c <__adddf3>
 8008a82:	4682      	mov	sl, r0
 8008a84:	468b      	mov	fp, r1
 8008a86:	e770      	b.n	800896a <_strtod_l+0xa62>
 8008a88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008a8c:	e7e0      	b.n	8008a50 <_strtod_l+0xb48>
 8008a8e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008ac8 <_strtod_l+0xbc0>)
 8008a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a94:	f7f8 f822 	bl	8000adc <__aeabi_dcmplt>
 8008a98:	e798      	b.n	80089cc <_strtod_l+0xac4>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008aa0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	f7ff ba6d 	b.w	8007f82 <_strtod_l+0x7a>
 8008aa8:	2a65      	cmp	r2, #101	@ 0x65
 8008aaa:	f43f ab66 	beq.w	800817a <_strtod_l+0x272>
 8008aae:	2a45      	cmp	r2, #69	@ 0x45
 8008ab0:	f43f ab63 	beq.w	800817a <_strtod_l+0x272>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	f7ff bb9e 	b.w	80081f6 <_strtod_l+0x2ee>
 8008aba:	bf00      	nop
 8008abc:	f3af 8000 	nop.w
 8008ac0:	ffc00000 	.word	0xffc00000
 8008ac4:	41dfffff 	.word	0x41dfffff
 8008ac8:	94a03595 	.word	0x94a03595
 8008acc:	3fcfffff 	.word	0x3fcfffff

08008ad0 <strtof>:
 8008ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad4:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8008b94 <strtof+0xc4>
 8008ad8:	4b29      	ldr	r3, [pc, #164]	@ (8008b80 <strtof+0xb0>)
 8008ada:	460a      	mov	r2, r1
 8008adc:	ed2d 8b02 	vpush	{d8}
 8008ae0:	4601      	mov	r1, r0
 8008ae2:	f8d8 0000 	ldr.w	r0, [r8]
 8008ae6:	f7ff fa0f 	bl	8007f08 <_strtod_l>
 8008aea:	ec55 4b10 	vmov	r4, r5, d0
 8008aee:	4622      	mov	r2, r4
 8008af0:	462b      	mov	r3, r5
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f8 f819 	bl	8000b2c <__aeabi_dcmpun>
 8008afa:	b190      	cbz	r0, 8008b22 <strtof+0x52>
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	4821      	ldr	r0, [pc, #132]	@ (8008b84 <strtof+0xb4>)
 8008b00:	da09      	bge.n	8008b16 <strtof+0x46>
 8008b02:	f000 fee9 	bl	80098d8 <nanf>
 8008b06:	eeb1 8a40 	vneg.f32	s16, s0
 8008b0a:	eeb0 0a48 	vmov.f32	s0, s16
 8008b0e:	ecbd 8b02 	vpop	{d8}
 8008b12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b16:	ecbd 8b02 	vpop	{d8}
 8008b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1e:	f000 bedb 	b.w	80098d8 <nanf>
 8008b22:	4620      	mov	r0, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7f8 f85f 	bl	8000be8 <__aeabi_d2f>
 8008b2a:	ee08 0a10 	vmov	s16, r0
 8008b2e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8008b88 <strtof+0xb8>
 8008b32:	eeb0 7ac8 	vabs.f32	s14, s16
 8008b36:	eeb4 7a67 	vcmp.f32	s14, s15
 8008b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3e:	dd11      	ble.n	8008b64 <strtof+0x94>
 8008b40:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8008b44:	4b11      	ldr	r3, [pc, #68]	@ (8008b8c <strtof+0xbc>)
 8008b46:	f04f 32ff 	mov.w	r2, #4294967295
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	f7f7 ffed 	bl	8000b2c <__aeabi_dcmpun>
 8008b52:	b980      	cbnz	r0, 8008b76 <strtof+0xa6>
 8008b54:	4b0d      	ldr	r3, [pc, #52]	@ (8008b8c <strtof+0xbc>)
 8008b56:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f7 ffc7 	bl	8000af0 <__aeabi_dcmple>
 8008b62:	b940      	cbnz	r0, 8008b76 <strtof+0xa6>
 8008b64:	ee18 3a10 	vmov	r3, s16
 8008b68:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008b6c:	d1cd      	bne.n	8008b0a <strtof+0x3a>
 8008b6e:	4b08      	ldr	r3, [pc, #32]	@ (8008b90 <strtof+0xc0>)
 8008b70:	402b      	ands	r3, r5
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d0c9      	beq.n	8008b0a <strtof+0x3a>
 8008b76:	f8d8 3000 	ldr.w	r3, [r8]
 8008b7a:	2222      	movs	r2, #34	@ 0x22
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e7c4      	b.n	8008b0a <strtof+0x3a>
 8008b80:	20000028 	.word	0x20000028
 8008b84:	0800c6cc 	.word	0x0800c6cc
 8008b88:	7f7fffff 	.word	0x7f7fffff
 8008b8c:	7fefffff 	.word	0x7fefffff
 8008b90:	7ff00000 	.word	0x7ff00000
 8008b94:	20000194 	.word	0x20000194

08008b98 <_strtoul_l.constprop.0>:
 8008b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b9c:	4e34      	ldr	r6, [pc, #208]	@ (8008c70 <_strtoul_l.constprop.0+0xd8>)
 8008b9e:	4686      	mov	lr, r0
 8008ba0:	460d      	mov	r5, r1
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ba8:	5d37      	ldrb	r7, [r6, r4]
 8008baa:	f017 0708 	ands.w	r7, r7, #8
 8008bae:	d1f8      	bne.n	8008ba2 <_strtoul_l.constprop.0+0xa>
 8008bb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8008bb2:	d12f      	bne.n	8008c14 <_strtoul_l.constprop.0+0x7c>
 8008bb4:	782c      	ldrb	r4, [r5, #0]
 8008bb6:	2701      	movs	r7, #1
 8008bb8:	1c85      	adds	r5, r0, #2
 8008bba:	f033 0010 	bics.w	r0, r3, #16
 8008bbe:	d109      	bne.n	8008bd4 <_strtoul_l.constprop.0+0x3c>
 8008bc0:	2c30      	cmp	r4, #48	@ 0x30
 8008bc2:	d12c      	bne.n	8008c1e <_strtoul_l.constprop.0+0x86>
 8008bc4:	7828      	ldrb	r0, [r5, #0]
 8008bc6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8008bca:	2858      	cmp	r0, #88	@ 0x58
 8008bcc:	d127      	bne.n	8008c1e <_strtoul_l.constprop.0+0x86>
 8008bce:	786c      	ldrb	r4, [r5, #1]
 8008bd0:	2310      	movs	r3, #16
 8008bd2:	3502      	adds	r5, #2
 8008bd4:	f04f 38ff 	mov.w	r8, #4294967295
 8008bd8:	2600      	movs	r6, #0
 8008bda:	fbb8 f8f3 	udiv	r8, r8, r3
 8008bde:	fb03 f908 	mul.w	r9, r3, r8
 8008be2:	ea6f 0909 	mvn.w	r9, r9
 8008be6:	4630      	mov	r0, r6
 8008be8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008bec:	f1bc 0f09 	cmp.w	ip, #9
 8008bf0:	d81c      	bhi.n	8008c2c <_strtoul_l.constprop.0+0x94>
 8008bf2:	4664      	mov	r4, ip
 8008bf4:	42a3      	cmp	r3, r4
 8008bf6:	dd2a      	ble.n	8008c4e <_strtoul_l.constprop.0+0xb6>
 8008bf8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008bfc:	d007      	beq.n	8008c0e <_strtoul_l.constprop.0+0x76>
 8008bfe:	4580      	cmp	r8, r0
 8008c00:	d322      	bcc.n	8008c48 <_strtoul_l.constprop.0+0xb0>
 8008c02:	d101      	bne.n	8008c08 <_strtoul_l.constprop.0+0x70>
 8008c04:	45a1      	cmp	r9, r4
 8008c06:	db1f      	blt.n	8008c48 <_strtoul_l.constprop.0+0xb0>
 8008c08:	fb00 4003 	mla	r0, r0, r3, r4
 8008c0c:	2601      	movs	r6, #1
 8008c0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c12:	e7e9      	b.n	8008be8 <_strtoul_l.constprop.0+0x50>
 8008c14:	2c2b      	cmp	r4, #43	@ 0x2b
 8008c16:	bf04      	itt	eq
 8008c18:	782c      	ldrbeq	r4, [r5, #0]
 8008c1a:	1c85      	addeq	r5, r0, #2
 8008c1c:	e7cd      	b.n	8008bba <_strtoul_l.constprop.0+0x22>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1d8      	bne.n	8008bd4 <_strtoul_l.constprop.0+0x3c>
 8008c22:	2c30      	cmp	r4, #48	@ 0x30
 8008c24:	bf0c      	ite	eq
 8008c26:	2308      	moveq	r3, #8
 8008c28:	230a      	movne	r3, #10
 8008c2a:	e7d3      	b.n	8008bd4 <_strtoul_l.constprop.0+0x3c>
 8008c2c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008c30:	f1bc 0f19 	cmp.w	ip, #25
 8008c34:	d801      	bhi.n	8008c3a <_strtoul_l.constprop.0+0xa2>
 8008c36:	3c37      	subs	r4, #55	@ 0x37
 8008c38:	e7dc      	b.n	8008bf4 <_strtoul_l.constprop.0+0x5c>
 8008c3a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008c3e:	f1bc 0f19 	cmp.w	ip, #25
 8008c42:	d804      	bhi.n	8008c4e <_strtoul_l.constprop.0+0xb6>
 8008c44:	3c57      	subs	r4, #87	@ 0x57
 8008c46:	e7d5      	b.n	8008bf4 <_strtoul_l.constprop.0+0x5c>
 8008c48:	f04f 36ff 	mov.w	r6, #4294967295
 8008c4c:	e7df      	b.n	8008c0e <_strtoul_l.constprop.0+0x76>
 8008c4e:	1c73      	adds	r3, r6, #1
 8008c50:	d106      	bne.n	8008c60 <_strtoul_l.constprop.0+0xc8>
 8008c52:	2322      	movs	r3, #34	@ 0x22
 8008c54:	f8ce 3000 	str.w	r3, [lr]
 8008c58:	4630      	mov	r0, r6
 8008c5a:	b932      	cbnz	r2, 8008c6a <_strtoul_l.constprop.0+0xd2>
 8008c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c60:	b107      	cbz	r7, 8008c64 <_strtoul_l.constprop.0+0xcc>
 8008c62:	4240      	negs	r0, r0
 8008c64:	2a00      	cmp	r2, #0
 8008c66:	d0f9      	beq.n	8008c5c <_strtoul_l.constprop.0+0xc4>
 8008c68:	b106      	cbz	r6, 8008c6c <_strtoul_l.constprop.0+0xd4>
 8008c6a:	1e69      	subs	r1, r5, #1
 8008c6c:	6011      	str	r1, [r2, #0]
 8008c6e:	e7f5      	b.n	8008c5c <_strtoul_l.constprop.0+0xc4>
 8008c70:	0800c301 	.word	0x0800c301

08008c74 <strtoul>:
 8008c74:	4613      	mov	r3, r2
 8008c76:	460a      	mov	r2, r1
 8008c78:	4601      	mov	r1, r0
 8008c7a:	4802      	ldr	r0, [pc, #8]	@ (8008c84 <strtoul+0x10>)
 8008c7c:	6800      	ldr	r0, [r0, #0]
 8008c7e:	f7ff bf8b 	b.w	8008b98 <_strtoul_l.constprop.0>
 8008c82:	bf00      	nop
 8008c84:	20000194 	.word	0x20000194

08008c88 <__cvt>:
 8008c88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8c:	ec57 6b10 	vmov	r6, r7, d0
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	460c      	mov	r4, r1
 8008c94:	4619      	mov	r1, r3
 8008c96:	463b      	mov	r3, r7
 8008c98:	bfbb      	ittet	lt
 8008c9a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008c9e:	461f      	movlt	r7, r3
 8008ca0:	2300      	movge	r3, #0
 8008ca2:	232d      	movlt	r3, #45	@ 0x2d
 8008ca4:	700b      	strb	r3, [r1, #0]
 8008ca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ca8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008cac:	4691      	mov	r9, r2
 8008cae:	f023 0820 	bic.w	r8, r3, #32
 8008cb2:	bfbc      	itt	lt
 8008cb4:	4632      	movlt	r2, r6
 8008cb6:	4616      	movlt	r6, r2
 8008cb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cbc:	d005      	beq.n	8008cca <__cvt+0x42>
 8008cbe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cc2:	d100      	bne.n	8008cc6 <__cvt+0x3e>
 8008cc4:	3401      	adds	r4, #1
 8008cc6:	2102      	movs	r1, #2
 8008cc8:	e000      	b.n	8008ccc <__cvt+0x44>
 8008cca:	2103      	movs	r1, #3
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	ab02      	add	r3, sp, #8
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	ec47 6b10 	vmov	d0, r6, r7
 8008cd8:	4653      	mov	r3, sl
 8008cda:	4622      	mov	r2, r4
 8008cdc:	f000 fe8c 	bl	80099f8 <_dtoa_r>
 8008ce0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008ce4:	4605      	mov	r5, r0
 8008ce6:	d119      	bne.n	8008d1c <__cvt+0x94>
 8008ce8:	f019 0f01 	tst.w	r9, #1
 8008cec:	d00e      	beq.n	8008d0c <__cvt+0x84>
 8008cee:	eb00 0904 	add.w	r9, r0, r4
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	f7f7 fee5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cfe:	b108      	cbz	r0, 8008d04 <__cvt+0x7c>
 8008d00:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d04:	2230      	movs	r2, #48	@ 0x30
 8008d06:	9b03      	ldr	r3, [sp, #12]
 8008d08:	454b      	cmp	r3, r9
 8008d0a:	d31e      	bcc.n	8008d4a <__cvt+0xc2>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d10:	1b5b      	subs	r3, r3, r5
 8008d12:	4628      	mov	r0, r5
 8008d14:	6013      	str	r3, [r2, #0]
 8008d16:	b004      	add	sp, #16
 8008d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d1c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d20:	eb00 0904 	add.w	r9, r0, r4
 8008d24:	d1e5      	bne.n	8008cf2 <__cvt+0x6a>
 8008d26:	7803      	ldrb	r3, [r0, #0]
 8008d28:	2b30      	cmp	r3, #48	@ 0x30
 8008d2a:	d10a      	bne.n	8008d42 <__cvt+0xba>
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2300      	movs	r3, #0
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	f7f7 fec8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d38:	b918      	cbnz	r0, 8008d42 <__cvt+0xba>
 8008d3a:	f1c4 0401 	rsb	r4, r4, #1
 8008d3e:	f8ca 4000 	str.w	r4, [sl]
 8008d42:	f8da 3000 	ldr.w	r3, [sl]
 8008d46:	4499      	add	r9, r3
 8008d48:	e7d3      	b.n	8008cf2 <__cvt+0x6a>
 8008d4a:	1c59      	adds	r1, r3, #1
 8008d4c:	9103      	str	r1, [sp, #12]
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	e7d9      	b.n	8008d06 <__cvt+0x7e>

08008d52 <__exponent>:
 8008d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d54:	2900      	cmp	r1, #0
 8008d56:	bfba      	itte	lt
 8008d58:	4249      	neglt	r1, r1
 8008d5a:	232d      	movlt	r3, #45	@ 0x2d
 8008d5c:	232b      	movge	r3, #43	@ 0x2b
 8008d5e:	2909      	cmp	r1, #9
 8008d60:	7002      	strb	r2, [r0, #0]
 8008d62:	7043      	strb	r3, [r0, #1]
 8008d64:	dd29      	ble.n	8008dba <__exponent+0x68>
 8008d66:	f10d 0307 	add.w	r3, sp, #7
 8008d6a:	461d      	mov	r5, r3
 8008d6c:	270a      	movs	r7, #10
 8008d6e:	461a      	mov	r2, r3
 8008d70:	fbb1 f6f7 	udiv	r6, r1, r7
 8008d74:	fb07 1416 	mls	r4, r7, r6, r1
 8008d78:	3430      	adds	r4, #48	@ 0x30
 8008d7a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2c63      	cmp	r4, #99	@ 0x63
 8008d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8008d86:	4631      	mov	r1, r6
 8008d88:	dcf1      	bgt.n	8008d6e <__exponent+0x1c>
 8008d8a:	3130      	adds	r1, #48	@ 0x30
 8008d8c:	1e94      	subs	r4, r2, #2
 8008d8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008d92:	1c41      	adds	r1, r0, #1
 8008d94:	4623      	mov	r3, r4
 8008d96:	42ab      	cmp	r3, r5
 8008d98:	d30a      	bcc.n	8008db0 <__exponent+0x5e>
 8008d9a:	f10d 0309 	add.w	r3, sp, #9
 8008d9e:	1a9b      	subs	r3, r3, r2
 8008da0:	42ac      	cmp	r4, r5
 8008da2:	bf88      	it	hi
 8008da4:	2300      	movhi	r3, #0
 8008da6:	3302      	adds	r3, #2
 8008da8:	4403      	add	r3, r0
 8008daa:	1a18      	subs	r0, r3, r0
 8008dac:	b003      	add	sp, #12
 8008dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008db0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008db4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008db8:	e7ed      	b.n	8008d96 <__exponent+0x44>
 8008dba:	2330      	movs	r3, #48	@ 0x30
 8008dbc:	3130      	adds	r1, #48	@ 0x30
 8008dbe:	7083      	strb	r3, [r0, #2]
 8008dc0:	70c1      	strb	r1, [r0, #3]
 8008dc2:	1d03      	adds	r3, r0, #4
 8008dc4:	e7f1      	b.n	8008daa <__exponent+0x58>
	...

08008dc8 <_printf_float>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	b08d      	sub	sp, #52	@ 0x34
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	461f      	mov	r7, r3
 8008dd8:	4605      	mov	r5, r0
 8008dda:	f000 fced 	bl	80097b8 <_localeconv_r>
 8008dde:	6803      	ldr	r3, [r0, #0]
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7f7 fa44 	bl	8000270 <strlen>
 8008de8:	2300      	movs	r3, #0
 8008dea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dec:	f8d8 3000 	ldr.w	r3, [r8]
 8008df0:	9005      	str	r0, [sp, #20]
 8008df2:	3307      	adds	r3, #7
 8008df4:	f023 0307 	bic.w	r3, r3, #7
 8008df8:	f103 0208 	add.w	r2, r3, #8
 8008dfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e00:	f8d4 b000 	ldr.w	fp, [r4]
 8008e04:	f8c8 2000 	str.w	r2, [r8]
 8008e08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e10:	9307      	str	r3, [sp, #28]
 8008e12:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e1e:	4b9c      	ldr	r3, [pc, #624]	@ (8009090 <_printf_float+0x2c8>)
 8008e20:	f04f 32ff 	mov.w	r2, #4294967295
 8008e24:	f7f7 fe82 	bl	8000b2c <__aeabi_dcmpun>
 8008e28:	bb70      	cbnz	r0, 8008e88 <_printf_float+0xc0>
 8008e2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e2e:	4b98      	ldr	r3, [pc, #608]	@ (8009090 <_printf_float+0x2c8>)
 8008e30:	f04f 32ff 	mov.w	r2, #4294967295
 8008e34:	f7f7 fe5c 	bl	8000af0 <__aeabi_dcmple>
 8008e38:	bb30      	cbnz	r0, 8008e88 <_printf_float+0xc0>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4640      	mov	r0, r8
 8008e40:	4649      	mov	r1, r9
 8008e42:	f7f7 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8008e46:	b110      	cbz	r0, 8008e4e <_printf_float+0x86>
 8008e48:	232d      	movs	r3, #45	@ 0x2d
 8008e4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e4e:	4a91      	ldr	r2, [pc, #580]	@ (8009094 <_printf_float+0x2cc>)
 8008e50:	4b91      	ldr	r3, [pc, #580]	@ (8009098 <_printf_float+0x2d0>)
 8008e52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e56:	bf94      	ite	ls
 8008e58:	4690      	movls	r8, r2
 8008e5a:	4698      	movhi	r8, r3
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	6123      	str	r3, [r4, #16]
 8008e60:	f02b 0304 	bic.w	r3, fp, #4
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	f04f 0900 	mov.w	r9, #0
 8008e6a:	9700      	str	r7, [sp, #0]
 8008e6c:	4633      	mov	r3, r6
 8008e6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f9d2 	bl	800921c <_printf_common>
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f040 808d 	bne.w	8008f98 <_printf_float+0x1d0>
 8008e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e82:	b00d      	add	sp, #52	@ 0x34
 8008e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	4642      	mov	r2, r8
 8008e8a:	464b      	mov	r3, r9
 8008e8c:	4640      	mov	r0, r8
 8008e8e:	4649      	mov	r1, r9
 8008e90:	f7f7 fe4c 	bl	8000b2c <__aeabi_dcmpun>
 8008e94:	b140      	cbz	r0, 8008ea8 <_printf_float+0xe0>
 8008e96:	464b      	mov	r3, r9
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	bfbc      	itt	lt
 8008e9c:	232d      	movlt	r3, #45	@ 0x2d
 8008e9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ea2:	4a7e      	ldr	r2, [pc, #504]	@ (800909c <_printf_float+0x2d4>)
 8008ea4:	4b7e      	ldr	r3, [pc, #504]	@ (80090a0 <_printf_float+0x2d8>)
 8008ea6:	e7d4      	b.n	8008e52 <_printf_float+0x8a>
 8008ea8:	6863      	ldr	r3, [r4, #4]
 8008eaa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008eae:	9206      	str	r2, [sp, #24]
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	d13b      	bne.n	8008f2c <_printf_float+0x164>
 8008eb4:	2306      	movs	r3, #6
 8008eb6:	6063      	str	r3, [r4, #4]
 8008eb8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	6022      	str	r2, [r4, #0]
 8008ec0:	9303      	str	r3, [sp, #12]
 8008ec2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ec4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008ec8:	ab09      	add	r3, sp, #36	@ 0x24
 8008eca:	9300      	str	r3, [sp, #0]
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	ec49 8b10 	vmov	d0, r8, r9
 8008ed2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	f7ff fed6 	bl	8008c88 <__cvt>
 8008edc:	9b06      	ldr	r3, [sp, #24]
 8008ede:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ee0:	2b47      	cmp	r3, #71	@ 0x47
 8008ee2:	4680      	mov	r8, r0
 8008ee4:	d129      	bne.n	8008f3a <_printf_float+0x172>
 8008ee6:	1cc8      	adds	r0, r1, #3
 8008ee8:	db02      	blt.n	8008ef0 <_printf_float+0x128>
 8008eea:	6863      	ldr	r3, [r4, #4]
 8008eec:	4299      	cmp	r1, r3
 8008eee:	dd41      	ble.n	8008f74 <_printf_float+0x1ac>
 8008ef0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008ef4:	fa5f fa8a 	uxtb.w	sl, sl
 8008ef8:	3901      	subs	r1, #1
 8008efa:	4652      	mov	r2, sl
 8008efc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f00:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f02:	f7ff ff26 	bl	8008d52 <__exponent>
 8008f06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f08:	1813      	adds	r3, r2, r0
 8008f0a:	2a01      	cmp	r2, #1
 8008f0c:	4681      	mov	r9, r0
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	dc02      	bgt.n	8008f18 <_printf_float+0x150>
 8008f12:	6822      	ldr	r2, [r4, #0]
 8008f14:	07d2      	lsls	r2, r2, #31
 8008f16:	d501      	bpl.n	8008f1c <_printf_float+0x154>
 8008f18:	3301      	adds	r3, #1
 8008f1a:	6123      	str	r3, [r4, #16]
 8008f1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0a2      	beq.n	8008e6a <_printf_float+0xa2>
 8008f24:	232d      	movs	r3, #45	@ 0x2d
 8008f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f2a:	e79e      	b.n	8008e6a <_printf_float+0xa2>
 8008f2c:	9a06      	ldr	r2, [sp, #24]
 8008f2e:	2a47      	cmp	r2, #71	@ 0x47
 8008f30:	d1c2      	bne.n	8008eb8 <_printf_float+0xf0>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1c0      	bne.n	8008eb8 <_printf_float+0xf0>
 8008f36:	2301      	movs	r3, #1
 8008f38:	e7bd      	b.n	8008eb6 <_printf_float+0xee>
 8008f3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f3e:	d9db      	bls.n	8008ef8 <_printf_float+0x130>
 8008f40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f44:	d118      	bne.n	8008f78 <_printf_float+0x1b0>
 8008f46:	2900      	cmp	r1, #0
 8008f48:	6863      	ldr	r3, [r4, #4]
 8008f4a:	dd0b      	ble.n	8008f64 <_printf_float+0x19c>
 8008f4c:	6121      	str	r1, [r4, #16]
 8008f4e:	b913      	cbnz	r3, 8008f56 <_printf_float+0x18e>
 8008f50:	6822      	ldr	r2, [r4, #0]
 8008f52:	07d0      	lsls	r0, r2, #31
 8008f54:	d502      	bpl.n	8008f5c <_printf_float+0x194>
 8008f56:	3301      	adds	r3, #1
 8008f58:	440b      	add	r3, r1
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f5e:	f04f 0900 	mov.w	r9, #0
 8008f62:	e7db      	b.n	8008f1c <_printf_float+0x154>
 8008f64:	b913      	cbnz	r3, 8008f6c <_printf_float+0x1a4>
 8008f66:	6822      	ldr	r2, [r4, #0]
 8008f68:	07d2      	lsls	r2, r2, #31
 8008f6a:	d501      	bpl.n	8008f70 <_printf_float+0x1a8>
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	e7f4      	b.n	8008f5a <_printf_float+0x192>
 8008f70:	2301      	movs	r3, #1
 8008f72:	e7f2      	b.n	8008f5a <_printf_float+0x192>
 8008f74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f7a:	4299      	cmp	r1, r3
 8008f7c:	db05      	blt.n	8008f8a <_printf_float+0x1c2>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	6121      	str	r1, [r4, #16]
 8008f82:	07d8      	lsls	r0, r3, #31
 8008f84:	d5ea      	bpl.n	8008f5c <_printf_float+0x194>
 8008f86:	1c4b      	adds	r3, r1, #1
 8008f88:	e7e7      	b.n	8008f5a <_printf_float+0x192>
 8008f8a:	2900      	cmp	r1, #0
 8008f8c:	bfd4      	ite	le
 8008f8e:	f1c1 0202 	rsble	r2, r1, #2
 8008f92:	2201      	movgt	r2, #1
 8008f94:	4413      	add	r3, r2
 8008f96:	e7e0      	b.n	8008f5a <_printf_float+0x192>
 8008f98:	6823      	ldr	r3, [r4, #0]
 8008f9a:	055a      	lsls	r2, r3, #21
 8008f9c:	d407      	bmi.n	8008fae <_printf_float+0x1e6>
 8008f9e:	6923      	ldr	r3, [r4, #16]
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d12b      	bne.n	8009004 <_printf_float+0x23c>
 8008fac:	e767      	b.n	8008e7e <_printf_float+0xb6>
 8008fae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fb2:	f240 80dd 	bls.w	8009170 <_printf_float+0x3a8>
 8008fb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	f7f7 fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d033      	beq.n	800902e <_printf_float+0x266>
 8008fc6:	4a37      	ldr	r2, [pc, #220]	@ (80090a4 <_printf_float+0x2dc>)
 8008fc8:	2301      	movs	r3, #1
 8008fca:	4631      	mov	r1, r6
 8008fcc:	4628      	mov	r0, r5
 8008fce:	47b8      	blx	r7
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	f43f af54 	beq.w	8008e7e <_printf_float+0xb6>
 8008fd6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008fda:	4543      	cmp	r3, r8
 8008fdc:	db02      	blt.n	8008fe4 <_printf_float+0x21c>
 8008fde:	6823      	ldr	r3, [r4, #0]
 8008fe0:	07d8      	lsls	r0, r3, #31
 8008fe2:	d50f      	bpl.n	8009004 <_printf_float+0x23c>
 8008fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fe8:	4631      	mov	r1, r6
 8008fea:	4628      	mov	r0, r5
 8008fec:	47b8      	blx	r7
 8008fee:	3001      	adds	r0, #1
 8008ff0:	f43f af45 	beq.w	8008e7e <_printf_float+0xb6>
 8008ff4:	f04f 0900 	mov.w	r9, #0
 8008ff8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ffc:	f104 0a1a 	add.w	sl, r4, #26
 8009000:	45c8      	cmp	r8, r9
 8009002:	dc09      	bgt.n	8009018 <_printf_float+0x250>
 8009004:	6823      	ldr	r3, [r4, #0]
 8009006:	079b      	lsls	r3, r3, #30
 8009008:	f100 8103 	bmi.w	8009212 <_printf_float+0x44a>
 800900c:	68e0      	ldr	r0, [r4, #12]
 800900e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009010:	4298      	cmp	r0, r3
 8009012:	bfb8      	it	lt
 8009014:	4618      	movlt	r0, r3
 8009016:	e734      	b.n	8008e82 <_printf_float+0xba>
 8009018:	2301      	movs	r3, #1
 800901a:	4652      	mov	r2, sl
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af2b 	beq.w	8008e7e <_printf_float+0xb6>
 8009028:	f109 0901 	add.w	r9, r9, #1
 800902c:	e7e8      	b.n	8009000 <_printf_float+0x238>
 800902e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	dc39      	bgt.n	80090a8 <_printf_float+0x2e0>
 8009034:	4a1b      	ldr	r2, [pc, #108]	@ (80090a4 <_printf_float+0x2dc>)
 8009036:	2301      	movs	r3, #1
 8009038:	4631      	mov	r1, r6
 800903a:	4628      	mov	r0, r5
 800903c:	47b8      	blx	r7
 800903e:	3001      	adds	r0, #1
 8009040:	f43f af1d 	beq.w	8008e7e <_printf_float+0xb6>
 8009044:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009048:	ea59 0303 	orrs.w	r3, r9, r3
 800904c:	d102      	bne.n	8009054 <_printf_float+0x28c>
 800904e:	6823      	ldr	r3, [r4, #0]
 8009050:	07d9      	lsls	r1, r3, #31
 8009052:	d5d7      	bpl.n	8009004 <_printf_float+0x23c>
 8009054:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af0d 	beq.w	8008e7e <_printf_float+0xb6>
 8009064:	f04f 0a00 	mov.w	sl, #0
 8009068:	f104 0b1a 	add.w	fp, r4, #26
 800906c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906e:	425b      	negs	r3, r3
 8009070:	4553      	cmp	r3, sl
 8009072:	dc01      	bgt.n	8009078 <_printf_float+0x2b0>
 8009074:	464b      	mov	r3, r9
 8009076:	e793      	b.n	8008fa0 <_printf_float+0x1d8>
 8009078:	2301      	movs	r3, #1
 800907a:	465a      	mov	r2, fp
 800907c:	4631      	mov	r1, r6
 800907e:	4628      	mov	r0, r5
 8009080:	47b8      	blx	r7
 8009082:	3001      	adds	r0, #1
 8009084:	f43f aefb 	beq.w	8008e7e <_printf_float+0xb6>
 8009088:	f10a 0a01 	add.w	sl, sl, #1
 800908c:	e7ee      	b.n	800906c <_printf_float+0x2a4>
 800908e:	bf00      	nop
 8009090:	7fefffff 	.word	0x7fefffff
 8009094:	0800c401 	.word	0x0800c401
 8009098:	0800c405 	.word	0x0800c405
 800909c:	0800c409 	.word	0x0800c409
 80090a0:	0800c40d 	.word	0x0800c40d
 80090a4:	0800c411 	.word	0x0800c411
 80090a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090ae:	4553      	cmp	r3, sl
 80090b0:	bfa8      	it	ge
 80090b2:	4653      	movge	r3, sl
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	4699      	mov	r9, r3
 80090b8:	dc36      	bgt.n	8009128 <_printf_float+0x360>
 80090ba:	f04f 0b00 	mov.w	fp, #0
 80090be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090c2:	f104 021a 	add.w	r2, r4, #26
 80090c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090c8:	9306      	str	r3, [sp, #24]
 80090ca:	eba3 0309 	sub.w	r3, r3, r9
 80090ce:	455b      	cmp	r3, fp
 80090d0:	dc31      	bgt.n	8009136 <_printf_float+0x36e>
 80090d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d4:	459a      	cmp	sl, r3
 80090d6:	dc3a      	bgt.n	800914e <_printf_float+0x386>
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	07da      	lsls	r2, r3, #31
 80090dc:	d437      	bmi.n	800914e <_printf_float+0x386>
 80090de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e0:	ebaa 0903 	sub.w	r9, sl, r3
 80090e4:	9b06      	ldr	r3, [sp, #24]
 80090e6:	ebaa 0303 	sub.w	r3, sl, r3
 80090ea:	4599      	cmp	r9, r3
 80090ec:	bfa8      	it	ge
 80090ee:	4699      	movge	r9, r3
 80090f0:	f1b9 0f00 	cmp.w	r9, #0
 80090f4:	dc33      	bgt.n	800915e <_printf_float+0x396>
 80090f6:	f04f 0800 	mov.w	r8, #0
 80090fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090fe:	f104 0b1a 	add.w	fp, r4, #26
 8009102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009104:	ebaa 0303 	sub.w	r3, sl, r3
 8009108:	eba3 0309 	sub.w	r3, r3, r9
 800910c:	4543      	cmp	r3, r8
 800910e:	f77f af79 	ble.w	8009004 <_printf_float+0x23c>
 8009112:	2301      	movs	r3, #1
 8009114:	465a      	mov	r2, fp
 8009116:	4631      	mov	r1, r6
 8009118:	4628      	mov	r0, r5
 800911a:	47b8      	blx	r7
 800911c:	3001      	adds	r0, #1
 800911e:	f43f aeae 	beq.w	8008e7e <_printf_float+0xb6>
 8009122:	f108 0801 	add.w	r8, r8, #1
 8009126:	e7ec      	b.n	8009102 <_printf_float+0x33a>
 8009128:	4642      	mov	r2, r8
 800912a:	4631      	mov	r1, r6
 800912c:	4628      	mov	r0, r5
 800912e:	47b8      	blx	r7
 8009130:	3001      	adds	r0, #1
 8009132:	d1c2      	bne.n	80090ba <_printf_float+0x2f2>
 8009134:	e6a3      	b.n	8008e7e <_printf_float+0xb6>
 8009136:	2301      	movs	r3, #1
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	9206      	str	r2, [sp, #24]
 800913e:	47b8      	blx	r7
 8009140:	3001      	adds	r0, #1
 8009142:	f43f ae9c 	beq.w	8008e7e <_printf_float+0xb6>
 8009146:	9a06      	ldr	r2, [sp, #24]
 8009148:	f10b 0b01 	add.w	fp, fp, #1
 800914c:	e7bb      	b.n	80090c6 <_printf_float+0x2fe>
 800914e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	d1c0      	bne.n	80090de <_printf_float+0x316>
 800915c:	e68f      	b.n	8008e7e <_printf_float+0xb6>
 800915e:	9a06      	ldr	r2, [sp, #24]
 8009160:	464b      	mov	r3, r9
 8009162:	4442      	add	r2, r8
 8009164:	4631      	mov	r1, r6
 8009166:	4628      	mov	r0, r5
 8009168:	47b8      	blx	r7
 800916a:	3001      	adds	r0, #1
 800916c:	d1c3      	bne.n	80090f6 <_printf_float+0x32e>
 800916e:	e686      	b.n	8008e7e <_printf_float+0xb6>
 8009170:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009174:	f1ba 0f01 	cmp.w	sl, #1
 8009178:	dc01      	bgt.n	800917e <_printf_float+0x3b6>
 800917a:	07db      	lsls	r3, r3, #31
 800917c:	d536      	bpl.n	80091ec <_printf_float+0x424>
 800917e:	2301      	movs	r3, #1
 8009180:	4642      	mov	r2, r8
 8009182:	4631      	mov	r1, r6
 8009184:	4628      	mov	r0, r5
 8009186:	47b8      	blx	r7
 8009188:	3001      	adds	r0, #1
 800918a:	f43f ae78 	beq.w	8008e7e <_printf_float+0xb6>
 800918e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f ae70 	beq.w	8008e7e <_printf_float+0xb6>
 800919e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091a2:	2200      	movs	r2, #0
 80091a4:	2300      	movs	r3, #0
 80091a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091aa:	f7f7 fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ae:	b9c0      	cbnz	r0, 80091e2 <_printf_float+0x41a>
 80091b0:	4653      	mov	r3, sl
 80091b2:	f108 0201 	add.w	r2, r8, #1
 80091b6:	4631      	mov	r1, r6
 80091b8:	4628      	mov	r0, r5
 80091ba:	47b8      	blx	r7
 80091bc:	3001      	adds	r0, #1
 80091be:	d10c      	bne.n	80091da <_printf_float+0x412>
 80091c0:	e65d      	b.n	8008e7e <_printf_float+0xb6>
 80091c2:	2301      	movs	r3, #1
 80091c4:	465a      	mov	r2, fp
 80091c6:	4631      	mov	r1, r6
 80091c8:	4628      	mov	r0, r5
 80091ca:	47b8      	blx	r7
 80091cc:	3001      	adds	r0, #1
 80091ce:	f43f ae56 	beq.w	8008e7e <_printf_float+0xb6>
 80091d2:	f108 0801 	add.w	r8, r8, #1
 80091d6:	45d0      	cmp	r8, sl
 80091d8:	dbf3      	blt.n	80091c2 <_printf_float+0x3fa>
 80091da:	464b      	mov	r3, r9
 80091dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80091e0:	e6df      	b.n	8008fa2 <_printf_float+0x1da>
 80091e2:	f04f 0800 	mov.w	r8, #0
 80091e6:	f104 0b1a 	add.w	fp, r4, #26
 80091ea:	e7f4      	b.n	80091d6 <_printf_float+0x40e>
 80091ec:	2301      	movs	r3, #1
 80091ee:	4642      	mov	r2, r8
 80091f0:	e7e1      	b.n	80091b6 <_printf_float+0x3ee>
 80091f2:	2301      	movs	r3, #1
 80091f4:	464a      	mov	r2, r9
 80091f6:	4631      	mov	r1, r6
 80091f8:	4628      	mov	r0, r5
 80091fa:	47b8      	blx	r7
 80091fc:	3001      	adds	r0, #1
 80091fe:	f43f ae3e 	beq.w	8008e7e <_printf_float+0xb6>
 8009202:	f108 0801 	add.w	r8, r8, #1
 8009206:	68e3      	ldr	r3, [r4, #12]
 8009208:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800920a:	1a5b      	subs	r3, r3, r1
 800920c:	4543      	cmp	r3, r8
 800920e:	dcf0      	bgt.n	80091f2 <_printf_float+0x42a>
 8009210:	e6fc      	b.n	800900c <_printf_float+0x244>
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	f104 0919 	add.w	r9, r4, #25
 800921a:	e7f4      	b.n	8009206 <_printf_float+0x43e>

0800921c <_printf_common>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	4616      	mov	r6, r2
 8009222:	4698      	mov	r8, r3
 8009224:	688a      	ldr	r2, [r1, #8]
 8009226:	690b      	ldr	r3, [r1, #16]
 8009228:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800922c:	4293      	cmp	r3, r2
 800922e:	bfb8      	it	lt
 8009230:	4613      	movlt	r3, r2
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009238:	4607      	mov	r7, r0
 800923a:	460c      	mov	r4, r1
 800923c:	b10a      	cbz	r2, 8009242 <_printf_common+0x26>
 800923e:	3301      	adds	r3, #1
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	0699      	lsls	r1, r3, #26
 8009246:	bf42      	ittt	mi
 8009248:	6833      	ldrmi	r3, [r6, #0]
 800924a:	3302      	addmi	r3, #2
 800924c:	6033      	strmi	r3, [r6, #0]
 800924e:	6825      	ldr	r5, [r4, #0]
 8009250:	f015 0506 	ands.w	r5, r5, #6
 8009254:	d106      	bne.n	8009264 <_printf_common+0x48>
 8009256:	f104 0a19 	add.w	sl, r4, #25
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	6832      	ldr	r2, [r6, #0]
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc26      	bgt.n	80092b2 <_printf_common+0x96>
 8009264:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009268:	6822      	ldr	r2, [r4, #0]
 800926a:	3b00      	subs	r3, #0
 800926c:	bf18      	it	ne
 800926e:	2301      	movne	r3, #1
 8009270:	0692      	lsls	r2, r2, #26
 8009272:	d42b      	bmi.n	80092cc <_printf_common+0xb0>
 8009274:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009278:	4641      	mov	r1, r8
 800927a:	4638      	mov	r0, r7
 800927c:	47c8      	blx	r9
 800927e:	3001      	adds	r0, #1
 8009280:	d01e      	beq.n	80092c0 <_printf_common+0xa4>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	f003 0306 	and.w	r3, r3, #6
 800928a:	2b04      	cmp	r3, #4
 800928c:	bf02      	ittt	eq
 800928e:	68e5      	ldreq	r5, [r4, #12]
 8009290:	6833      	ldreq	r3, [r6, #0]
 8009292:	1aed      	subeq	r5, r5, r3
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	bf0c      	ite	eq
 8009298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800929c:	2500      	movne	r5, #0
 800929e:	4293      	cmp	r3, r2
 80092a0:	bfc4      	itt	gt
 80092a2:	1a9b      	subgt	r3, r3, r2
 80092a4:	18ed      	addgt	r5, r5, r3
 80092a6:	2600      	movs	r6, #0
 80092a8:	341a      	adds	r4, #26
 80092aa:	42b5      	cmp	r5, r6
 80092ac:	d11a      	bne.n	80092e4 <_printf_common+0xc8>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e008      	b.n	80092c4 <_printf_common+0xa8>
 80092b2:	2301      	movs	r3, #1
 80092b4:	4652      	mov	r2, sl
 80092b6:	4641      	mov	r1, r8
 80092b8:	4638      	mov	r0, r7
 80092ba:	47c8      	blx	r9
 80092bc:	3001      	adds	r0, #1
 80092be:	d103      	bne.n	80092c8 <_printf_common+0xac>
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	3501      	adds	r5, #1
 80092ca:	e7c6      	b.n	800925a <_printf_common+0x3e>
 80092cc:	18e1      	adds	r1, r4, r3
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	2030      	movs	r0, #48	@ 0x30
 80092d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092d6:	4422      	add	r2, r4
 80092d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092e0:	3302      	adds	r3, #2
 80092e2:	e7c7      	b.n	8009274 <_printf_common+0x58>
 80092e4:	2301      	movs	r3, #1
 80092e6:	4622      	mov	r2, r4
 80092e8:	4641      	mov	r1, r8
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c8      	blx	r9
 80092ee:	3001      	adds	r0, #1
 80092f0:	d0e6      	beq.n	80092c0 <_printf_common+0xa4>
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7d9      	b.n	80092aa <_printf_common+0x8e>
	...

080092f8 <_printf_i>:
 80092f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	7e0f      	ldrb	r7, [r1, #24]
 80092fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009300:	2f78      	cmp	r7, #120	@ 0x78
 8009302:	4691      	mov	r9, r2
 8009304:	4680      	mov	r8, r0
 8009306:	460c      	mov	r4, r1
 8009308:	469a      	mov	sl, r3
 800930a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800930e:	d807      	bhi.n	8009320 <_printf_i+0x28>
 8009310:	2f62      	cmp	r7, #98	@ 0x62
 8009312:	d80a      	bhi.n	800932a <_printf_i+0x32>
 8009314:	2f00      	cmp	r7, #0
 8009316:	f000 80d2 	beq.w	80094be <_printf_i+0x1c6>
 800931a:	2f58      	cmp	r7, #88	@ 0x58
 800931c:	f000 80b9 	beq.w	8009492 <_printf_i+0x19a>
 8009320:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009324:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009328:	e03a      	b.n	80093a0 <_printf_i+0xa8>
 800932a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800932e:	2b15      	cmp	r3, #21
 8009330:	d8f6      	bhi.n	8009320 <_printf_i+0x28>
 8009332:	a101      	add	r1, pc, #4	@ (adr r1, 8009338 <_printf_i+0x40>)
 8009334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009338:	08009391 	.word	0x08009391
 800933c:	080093a5 	.word	0x080093a5
 8009340:	08009321 	.word	0x08009321
 8009344:	08009321 	.word	0x08009321
 8009348:	08009321 	.word	0x08009321
 800934c:	08009321 	.word	0x08009321
 8009350:	080093a5 	.word	0x080093a5
 8009354:	08009321 	.word	0x08009321
 8009358:	08009321 	.word	0x08009321
 800935c:	08009321 	.word	0x08009321
 8009360:	08009321 	.word	0x08009321
 8009364:	080094a5 	.word	0x080094a5
 8009368:	080093cf 	.word	0x080093cf
 800936c:	0800945f 	.word	0x0800945f
 8009370:	08009321 	.word	0x08009321
 8009374:	08009321 	.word	0x08009321
 8009378:	080094c7 	.word	0x080094c7
 800937c:	08009321 	.word	0x08009321
 8009380:	080093cf 	.word	0x080093cf
 8009384:	08009321 	.word	0x08009321
 8009388:	08009321 	.word	0x08009321
 800938c:	08009467 	.word	0x08009467
 8009390:	6833      	ldr	r3, [r6, #0]
 8009392:	1d1a      	adds	r2, r3, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	6032      	str	r2, [r6, #0]
 8009398:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800939c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093a0:	2301      	movs	r3, #1
 80093a2:	e09d      	b.n	80094e0 <_printf_i+0x1e8>
 80093a4:	6833      	ldr	r3, [r6, #0]
 80093a6:	6820      	ldr	r0, [r4, #0]
 80093a8:	1d19      	adds	r1, r3, #4
 80093aa:	6031      	str	r1, [r6, #0]
 80093ac:	0606      	lsls	r6, r0, #24
 80093ae:	d501      	bpl.n	80093b4 <_printf_i+0xbc>
 80093b0:	681d      	ldr	r5, [r3, #0]
 80093b2:	e003      	b.n	80093bc <_printf_i+0xc4>
 80093b4:	0645      	lsls	r5, r0, #25
 80093b6:	d5fb      	bpl.n	80093b0 <_printf_i+0xb8>
 80093b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093bc:	2d00      	cmp	r5, #0
 80093be:	da03      	bge.n	80093c8 <_printf_i+0xd0>
 80093c0:	232d      	movs	r3, #45	@ 0x2d
 80093c2:	426d      	negs	r5, r5
 80093c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093c8:	4859      	ldr	r0, [pc, #356]	@ (8009530 <_printf_i+0x238>)
 80093ca:	230a      	movs	r3, #10
 80093cc:	e011      	b.n	80093f2 <_printf_i+0xfa>
 80093ce:	6821      	ldr	r1, [r4, #0]
 80093d0:	6833      	ldr	r3, [r6, #0]
 80093d2:	0608      	lsls	r0, r1, #24
 80093d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80093d8:	d402      	bmi.n	80093e0 <_printf_i+0xe8>
 80093da:	0649      	lsls	r1, r1, #25
 80093dc:	bf48      	it	mi
 80093de:	b2ad      	uxthmi	r5, r5
 80093e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093e2:	4853      	ldr	r0, [pc, #332]	@ (8009530 <_printf_i+0x238>)
 80093e4:	6033      	str	r3, [r6, #0]
 80093e6:	bf14      	ite	ne
 80093e8:	230a      	movne	r3, #10
 80093ea:	2308      	moveq	r3, #8
 80093ec:	2100      	movs	r1, #0
 80093ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093f2:	6866      	ldr	r6, [r4, #4]
 80093f4:	60a6      	str	r6, [r4, #8]
 80093f6:	2e00      	cmp	r6, #0
 80093f8:	bfa2      	ittt	ge
 80093fa:	6821      	ldrge	r1, [r4, #0]
 80093fc:	f021 0104 	bicge.w	r1, r1, #4
 8009400:	6021      	strge	r1, [r4, #0]
 8009402:	b90d      	cbnz	r5, 8009408 <_printf_i+0x110>
 8009404:	2e00      	cmp	r6, #0
 8009406:	d04b      	beq.n	80094a0 <_printf_i+0x1a8>
 8009408:	4616      	mov	r6, r2
 800940a:	fbb5 f1f3 	udiv	r1, r5, r3
 800940e:	fb03 5711 	mls	r7, r3, r1, r5
 8009412:	5dc7      	ldrb	r7, [r0, r7]
 8009414:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009418:	462f      	mov	r7, r5
 800941a:	42bb      	cmp	r3, r7
 800941c:	460d      	mov	r5, r1
 800941e:	d9f4      	bls.n	800940a <_printf_i+0x112>
 8009420:	2b08      	cmp	r3, #8
 8009422:	d10b      	bne.n	800943c <_printf_i+0x144>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	07df      	lsls	r7, r3, #31
 8009428:	d508      	bpl.n	800943c <_printf_i+0x144>
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	6861      	ldr	r1, [r4, #4]
 800942e:	4299      	cmp	r1, r3
 8009430:	bfde      	ittt	le
 8009432:	2330      	movle	r3, #48	@ 0x30
 8009434:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009438:	f106 36ff 	addle.w	r6, r6, #4294967295
 800943c:	1b92      	subs	r2, r2, r6
 800943e:	6122      	str	r2, [r4, #16]
 8009440:	f8cd a000 	str.w	sl, [sp]
 8009444:	464b      	mov	r3, r9
 8009446:	aa03      	add	r2, sp, #12
 8009448:	4621      	mov	r1, r4
 800944a:	4640      	mov	r0, r8
 800944c:	f7ff fee6 	bl	800921c <_printf_common>
 8009450:	3001      	adds	r0, #1
 8009452:	d14a      	bne.n	80094ea <_printf_i+0x1f2>
 8009454:	f04f 30ff 	mov.w	r0, #4294967295
 8009458:	b004      	add	sp, #16
 800945a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800945e:	6823      	ldr	r3, [r4, #0]
 8009460:	f043 0320 	orr.w	r3, r3, #32
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	4833      	ldr	r0, [pc, #204]	@ (8009534 <_printf_i+0x23c>)
 8009468:	2778      	movs	r7, #120	@ 0x78
 800946a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	6831      	ldr	r1, [r6, #0]
 8009472:	061f      	lsls	r7, r3, #24
 8009474:	f851 5b04 	ldr.w	r5, [r1], #4
 8009478:	d402      	bmi.n	8009480 <_printf_i+0x188>
 800947a:	065f      	lsls	r7, r3, #25
 800947c:	bf48      	it	mi
 800947e:	b2ad      	uxthmi	r5, r5
 8009480:	6031      	str	r1, [r6, #0]
 8009482:	07d9      	lsls	r1, r3, #31
 8009484:	bf44      	itt	mi
 8009486:	f043 0320 	orrmi.w	r3, r3, #32
 800948a:	6023      	strmi	r3, [r4, #0]
 800948c:	b11d      	cbz	r5, 8009496 <_printf_i+0x19e>
 800948e:	2310      	movs	r3, #16
 8009490:	e7ac      	b.n	80093ec <_printf_i+0xf4>
 8009492:	4827      	ldr	r0, [pc, #156]	@ (8009530 <_printf_i+0x238>)
 8009494:	e7e9      	b.n	800946a <_printf_i+0x172>
 8009496:	6823      	ldr	r3, [r4, #0]
 8009498:	f023 0320 	bic.w	r3, r3, #32
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	e7f6      	b.n	800948e <_printf_i+0x196>
 80094a0:	4616      	mov	r6, r2
 80094a2:	e7bd      	b.n	8009420 <_printf_i+0x128>
 80094a4:	6833      	ldr	r3, [r6, #0]
 80094a6:	6825      	ldr	r5, [r4, #0]
 80094a8:	6961      	ldr	r1, [r4, #20]
 80094aa:	1d18      	adds	r0, r3, #4
 80094ac:	6030      	str	r0, [r6, #0]
 80094ae:	062e      	lsls	r6, r5, #24
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	d501      	bpl.n	80094b8 <_printf_i+0x1c0>
 80094b4:	6019      	str	r1, [r3, #0]
 80094b6:	e002      	b.n	80094be <_printf_i+0x1c6>
 80094b8:	0668      	lsls	r0, r5, #25
 80094ba:	d5fb      	bpl.n	80094b4 <_printf_i+0x1bc>
 80094bc:	8019      	strh	r1, [r3, #0]
 80094be:	2300      	movs	r3, #0
 80094c0:	6123      	str	r3, [r4, #16]
 80094c2:	4616      	mov	r6, r2
 80094c4:	e7bc      	b.n	8009440 <_printf_i+0x148>
 80094c6:	6833      	ldr	r3, [r6, #0]
 80094c8:	1d1a      	adds	r2, r3, #4
 80094ca:	6032      	str	r2, [r6, #0]
 80094cc:	681e      	ldr	r6, [r3, #0]
 80094ce:	6862      	ldr	r2, [r4, #4]
 80094d0:	2100      	movs	r1, #0
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7f6 fe7c 	bl	80001d0 <memchr>
 80094d8:	b108      	cbz	r0, 80094de <_printf_i+0x1e6>
 80094da:	1b80      	subs	r0, r0, r6
 80094dc:	6060      	str	r0, [r4, #4]
 80094de:	6863      	ldr	r3, [r4, #4]
 80094e0:	6123      	str	r3, [r4, #16]
 80094e2:	2300      	movs	r3, #0
 80094e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094e8:	e7aa      	b.n	8009440 <_printf_i+0x148>
 80094ea:	6923      	ldr	r3, [r4, #16]
 80094ec:	4632      	mov	r2, r6
 80094ee:	4649      	mov	r1, r9
 80094f0:	4640      	mov	r0, r8
 80094f2:	47d0      	blx	sl
 80094f4:	3001      	adds	r0, #1
 80094f6:	d0ad      	beq.n	8009454 <_printf_i+0x15c>
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	079b      	lsls	r3, r3, #30
 80094fc:	d413      	bmi.n	8009526 <_printf_i+0x22e>
 80094fe:	68e0      	ldr	r0, [r4, #12]
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	4298      	cmp	r0, r3
 8009504:	bfb8      	it	lt
 8009506:	4618      	movlt	r0, r3
 8009508:	e7a6      	b.n	8009458 <_printf_i+0x160>
 800950a:	2301      	movs	r3, #1
 800950c:	4632      	mov	r2, r6
 800950e:	4649      	mov	r1, r9
 8009510:	4640      	mov	r0, r8
 8009512:	47d0      	blx	sl
 8009514:	3001      	adds	r0, #1
 8009516:	d09d      	beq.n	8009454 <_printf_i+0x15c>
 8009518:	3501      	adds	r5, #1
 800951a:	68e3      	ldr	r3, [r4, #12]
 800951c:	9903      	ldr	r1, [sp, #12]
 800951e:	1a5b      	subs	r3, r3, r1
 8009520:	42ab      	cmp	r3, r5
 8009522:	dcf2      	bgt.n	800950a <_printf_i+0x212>
 8009524:	e7eb      	b.n	80094fe <_printf_i+0x206>
 8009526:	2500      	movs	r5, #0
 8009528:	f104 0619 	add.w	r6, r4, #25
 800952c:	e7f5      	b.n	800951a <_printf_i+0x222>
 800952e:	bf00      	nop
 8009530:	0800c413 	.word	0x0800c413
 8009534:	0800c424 	.word	0x0800c424

08009538 <std>:
 8009538:	2300      	movs	r3, #0
 800953a:	b510      	push	{r4, lr}
 800953c:	4604      	mov	r4, r0
 800953e:	e9c0 3300 	strd	r3, r3, [r0]
 8009542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009546:	6083      	str	r3, [r0, #8]
 8009548:	8181      	strh	r1, [r0, #12]
 800954a:	6643      	str	r3, [r0, #100]	@ 0x64
 800954c:	81c2      	strh	r2, [r0, #14]
 800954e:	6183      	str	r3, [r0, #24]
 8009550:	4619      	mov	r1, r3
 8009552:	2208      	movs	r2, #8
 8009554:	305c      	adds	r0, #92	@ 0x5c
 8009556:	f000 f914 	bl	8009782 <memset>
 800955a:	4b0d      	ldr	r3, [pc, #52]	@ (8009590 <std+0x58>)
 800955c:	6263      	str	r3, [r4, #36]	@ 0x24
 800955e:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <std+0x5c>)
 8009560:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009562:	4b0d      	ldr	r3, [pc, #52]	@ (8009598 <std+0x60>)
 8009564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009566:	4b0d      	ldr	r3, [pc, #52]	@ (800959c <std+0x64>)
 8009568:	6323      	str	r3, [r4, #48]	@ 0x30
 800956a:	4b0d      	ldr	r3, [pc, #52]	@ (80095a0 <std+0x68>)
 800956c:	6224      	str	r4, [r4, #32]
 800956e:	429c      	cmp	r4, r3
 8009570:	d006      	beq.n	8009580 <std+0x48>
 8009572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009576:	4294      	cmp	r4, r2
 8009578:	d002      	beq.n	8009580 <std+0x48>
 800957a:	33d0      	adds	r3, #208	@ 0xd0
 800957c:	429c      	cmp	r4, r3
 800957e:	d105      	bne.n	800958c <std+0x54>
 8009580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009588:	f000 b98a 	b.w	80098a0 <__retarget_lock_init_recursive>
 800958c:	bd10      	pop	{r4, pc}
 800958e:	bf00      	nop
 8009590:	080096fd 	.word	0x080096fd
 8009594:	0800971f 	.word	0x0800971f
 8009598:	08009757 	.word	0x08009757
 800959c:	0800977b 	.word	0x0800977b
 80095a0:	2000eed8 	.word	0x2000eed8

080095a4 <stdio_exit_handler>:
 80095a4:	4a02      	ldr	r2, [pc, #8]	@ (80095b0 <stdio_exit_handler+0xc>)
 80095a6:	4903      	ldr	r1, [pc, #12]	@ (80095b4 <stdio_exit_handler+0x10>)
 80095a8:	4803      	ldr	r0, [pc, #12]	@ (80095b8 <stdio_exit_handler+0x14>)
 80095aa:	f000 b869 	b.w	8009680 <_fwalk_sglue>
 80095ae:	bf00      	nop
 80095b0:	2000001c 	.word	0x2000001c
 80095b4:	0800bb4d 	.word	0x0800bb4d
 80095b8:	20000198 	.word	0x20000198

080095bc <cleanup_stdio>:
 80095bc:	6841      	ldr	r1, [r0, #4]
 80095be:	4b0c      	ldr	r3, [pc, #48]	@ (80095f0 <cleanup_stdio+0x34>)
 80095c0:	4299      	cmp	r1, r3
 80095c2:	b510      	push	{r4, lr}
 80095c4:	4604      	mov	r4, r0
 80095c6:	d001      	beq.n	80095cc <cleanup_stdio+0x10>
 80095c8:	f002 fac0 	bl	800bb4c <_fflush_r>
 80095cc:	68a1      	ldr	r1, [r4, #8]
 80095ce:	4b09      	ldr	r3, [pc, #36]	@ (80095f4 <cleanup_stdio+0x38>)
 80095d0:	4299      	cmp	r1, r3
 80095d2:	d002      	beq.n	80095da <cleanup_stdio+0x1e>
 80095d4:	4620      	mov	r0, r4
 80095d6:	f002 fab9 	bl	800bb4c <_fflush_r>
 80095da:	68e1      	ldr	r1, [r4, #12]
 80095dc:	4b06      	ldr	r3, [pc, #24]	@ (80095f8 <cleanup_stdio+0x3c>)
 80095de:	4299      	cmp	r1, r3
 80095e0:	d004      	beq.n	80095ec <cleanup_stdio+0x30>
 80095e2:	4620      	mov	r0, r4
 80095e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e8:	f002 bab0 	b.w	800bb4c <_fflush_r>
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	bf00      	nop
 80095f0:	2000eed8 	.word	0x2000eed8
 80095f4:	2000ef40 	.word	0x2000ef40
 80095f8:	2000efa8 	.word	0x2000efa8

080095fc <global_stdio_init.part.0>:
 80095fc:	b510      	push	{r4, lr}
 80095fe:	4b0b      	ldr	r3, [pc, #44]	@ (800962c <global_stdio_init.part.0+0x30>)
 8009600:	4c0b      	ldr	r4, [pc, #44]	@ (8009630 <global_stdio_init.part.0+0x34>)
 8009602:	4a0c      	ldr	r2, [pc, #48]	@ (8009634 <global_stdio_init.part.0+0x38>)
 8009604:	601a      	str	r2, [r3, #0]
 8009606:	4620      	mov	r0, r4
 8009608:	2200      	movs	r2, #0
 800960a:	2104      	movs	r1, #4
 800960c:	f7ff ff94 	bl	8009538 <std>
 8009610:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009614:	2201      	movs	r2, #1
 8009616:	2109      	movs	r1, #9
 8009618:	f7ff ff8e 	bl	8009538 <std>
 800961c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009620:	2202      	movs	r2, #2
 8009622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009626:	2112      	movs	r1, #18
 8009628:	f7ff bf86 	b.w	8009538 <std>
 800962c:	2000f010 	.word	0x2000f010
 8009630:	2000eed8 	.word	0x2000eed8
 8009634:	080095a5 	.word	0x080095a5

08009638 <__sfp_lock_acquire>:
 8009638:	4801      	ldr	r0, [pc, #4]	@ (8009640 <__sfp_lock_acquire+0x8>)
 800963a:	f000 b932 	b.w	80098a2 <__retarget_lock_acquire_recursive>
 800963e:	bf00      	nop
 8009640:	2000f019 	.word	0x2000f019

08009644 <__sfp_lock_release>:
 8009644:	4801      	ldr	r0, [pc, #4]	@ (800964c <__sfp_lock_release+0x8>)
 8009646:	f000 b92d 	b.w	80098a4 <__retarget_lock_release_recursive>
 800964a:	bf00      	nop
 800964c:	2000f019 	.word	0x2000f019

08009650 <__sinit>:
 8009650:	b510      	push	{r4, lr}
 8009652:	4604      	mov	r4, r0
 8009654:	f7ff fff0 	bl	8009638 <__sfp_lock_acquire>
 8009658:	6a23      	ldr	r3, [r4, #32]
 800965a:	b11b      	cbz	r3, 8009664 <__sinit+0x14>
 800965c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009660:	f7ff bff0 	b.w	8009644 <__sfp_lock_release>
 8009664:	4b04      	ldr	r3, [pc, #16]	@ (8009678 <__sinit+0x28>)
 8009666:	6223      	str	r3, [r4, #32]
 8009668:	4b04      	ldr	r3, [pc, #16]	@ (800967c <__sinit+0x2c>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1f5      	bne.n	800965c <__sinit+0xc>
 8009670:	f7ff ffc4 	bl	80095fc <global_stdio_init.part.0>
 8009674:	e7f2      	b.n	800965c <__sinit+0xc>
 8009676:	bf00      	nop
 8009678:	080095bd 	.word	0x080095bd
 800967c:	2000f010 	.word	0x2000f010

08009680 <_fwalk_sglue>:
 8009680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009684:	4607      	mov	r7, r0
 8009686:	4688      	mov	r8, r1
 8009688:	4614      	mov	r4, r2
 800968a:	2600      	movs	r6, #0
 800968c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009690:	f1b9 0901 	subs.w	r9, r9, #1
 8009694:	d505      	bpl.n	80096a2 <_fwalk_sglue+0x22>
 8009696:	6824      	ldr	r4, [r4, #0]
 8009698:	2c00      	cmp	r4, #0
 800969a:	d1f7      	bne.n	800968c <_fwalk_sglue+0xc>
 800969c:	4630      	mov	r0, r6
 800969e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096a2:	89ab      	ldrh	r3, [r5, #12]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d907      	bls.n	80096b8 <_fwalk_sglue+0x38>
 80096a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096ac:	3301      	adds	r3, #1
 80096ae:	d003      	beq.n	80096b8 <_fwalk_sglue+0x38>
 80096b0:	4629      	mov	r1, r5
 80096b2:	4638      	mov	r0, r7
 80096b4:	47c0      	blx	r8
 80096b6:	4306      	orrs	r6, r0
 80096b8:	3568      	adds	r5, #104	@ 0x68
 80096ba:	e7e9      	b.n	8009690 <_fwalk_sglue+0x10>

080096bc <siprintf>:
 80096bc:	b40e      	push	{r1, r2, r3}
 80096be:	b500      	push	{lr}
 80096c0:	b09c      	sub	sp, #112	@ 0x70
 80096c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80096c4:	9002      	str	r0, [sp, #8]
 80096c6:	9006      	str	r0, [sp, #24]
 80096c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096cc:	4809      	ldr	r0, [pc, #36]	@ (80096f4 <siprintf+0x38>)
 80096ce:	9107      	str	r1, [sp, #28]
 80096d0:	9104      	str	r1, [sp, #16]
 80096d2:	4909      	ldr	r1, [pc, #36]	@ (80096f8 <siprintf+0x3c>)
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	a902      	add	r1, sp, #8
 80096e0:	f002 f8b4 	bl	800b84c <_svfiprintf_r>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	b01c      	add	sp, #112	@ 0x70
 80096ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f0:	b003      	add	sp, #12
 80096f2:	4770      	bx	lr
 80096f4:	20000194 	.word	0x20000194
 80096f8:	ffff0208 	.word	0xffff0208

080096fc <__sread>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	460c      	mov	r4, r1
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	f000 f87e 	bl	8009804 <_read_r>
 8009708:	2800      	cmp	r0, #0
 800970a:	bfab      	itete	ge
 800970c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800970e:	89a3      	ldrhlt	r3, [r4, #12]
 8009710:	181b      	addge	r3, r3, r0
 8009712:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009716:	bfac      	ite	ge
 8009718:	6563      	strge	r3, [r4, #84]	@ 0x54
 800971a:	81a3      	strhlt	r3, [r4, #12]
 800971c:	bd10      	pop	{r4, pc}

0800971e <__swrite>:
 800971e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009722:	461f      	mov	r7, r3
 8009724:	898b      	ldrh	r3, [r1, #12]
 8009726:	05db      	lsls	r3, r3, #23
 8009728:	4605      	mov	r5, r0
 800972a:	460c      	mov	r4, r1
 800972c:	4616      	mov	r6, r2
 800972e:	d505      	bpl.n	800973c <__swrite+0x1e>
 8009730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009734:	2302      	movs	r3, #2
 8009736:	2200      	movs	r2, #0
 8009738:	f000 f852 	bl	80097e0 <_lseek_r>
 800973c:	89a3      	ldrh	r3, [r4, #12]
 800973e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009746:	81a3      	strh	r3, [r4, #12]
 8009748:	4632      	mov	r2, r6
 800974a:	463b      	mov	r3, r7
 800974c:	4628      	mov	r0, r5
 800974e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009752:	f000 b869 	b.w	8009828 <_write_r>

08009756 <__sseek>:
 8009756:	b510      	push	{r4, lr}
 8009758:	460c      	mov	r4, r1
 800975a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975e:	f000 f83f 	bl	80097e0 <_lseek_r>
 8009762:	1c43      	adds	r3, r0, #1
 8009764:	89a3      	ldrh	r3, [r4, #12]
 8009766:	bf15      	itete	ne
 8009768:	6560      	strne	r0, [r4, #84]	@ 0x54
 800976a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800976e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009772:	81a3      	strheq	r3, [r4, #12]
 8009774:	bf18      	it	ne
 8009776:	81a3      	strhne	r3, [r4, #12]
 8009778:	bd10      	pop	{r4, pc}

0800977a <__sclose>:
 800977a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977e:	f000 b81f 	b.w	80097c0 <_close_r>

08009782 <memset>:
 8009782:	4402      	add	r2, r0
 8009784:	4603      	mov	r3, r0
 8009786:	4293      	cmp	r3, r2
 8009788:	d100      	bne.n	800978c <memset+0xa>
 800978a:	4770      	bx	lr
 800978c:	f803 1b01 	strb.w	r1, [r3], #1
 8009790:	e7f9      	b.n	8009786 <memset+0x4>

08009792 <strncmp>:
 8009792:	b510      	push	{r4, lr}
 8009794:	b16a      	cbz	r2, 80097b2 <strncmp+0x20>
 8009796:	3901      	subs	r1, #1
 8009798:	1884      	adds	r4, r0, r2
 800979a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800979e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d103      	bne.n	80097ae <strncmp+0x1c>
 80097a6:	42a0      	cmp	r0, r4
 80097a8:	d001      	beq.n	80097ae <strncmp+0x1c>
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	d1f5      	bne.n	800979a <strncmp+0x8>
 80097ae:	1ad0      	subs	r0, r2, r3
 80097b0:	bd10      	pop	{r4, pc}
 80097b2:	4610      	mov	r0, r2
 80097b4:	e7fc      	b.n	80097b0 <strncmp+0x1e>
	...

080097b8 <_localeconv_r>:
 80097b8:	4800      	ldr	r0, [pc, #0]	@ (80097bc <_localeconv_r+0x4>)
 80097ba:	4770      	bx	lr
 80097bc:	20000118 	.word	0x20000118

080097c0 <_close_r>:
 80097c0:	b538      	push	{r3, r4, r5, lr}
 80097c2:	4d06      	ldr	r5, [pc, #24]	@ (80097dc <_close_r+0x1c>)
 80097c4:	2300      	movs	r3, #0
 80097c6:	4604      	mov	r4, r0
 80097c8:	4608      	mov	r0, r1
 80097ca:	602b      	str	r3, [r5, #0]
 80097cc:	f7f8 fc68 	bl	80020a0 <_close>
 80097d0:	1c43      	adds	r3, r0, #1
 80097d2:	d102      	bne.n	80097da <_close_r+0x1a>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	b103      	cbz	r3, 80097da <_close_r+0x1a>
 80097d8:	6023      	str	r3, [r4, #0]
 80097da:	bd38      	pop	{r3, r4, r5, pc}
 80097dc:	2000f014 	.word	0x2000f014

080097e0 <_lseek_r>:
 80097e0:	b538      	push	{r3, r4, r5, lr}
 80097e2:	4d07      	ldr	r5, [pc, #28]	@ (8009800 <_lseek_r+0x20>)
 80097e4:	4604      	mov	r4, r0
 80097e6:	4608      	mov	r0, r1
 80097e8:	4611      	mov	r1, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	602a      	str	r2, [r5, #0]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f7f8 fc7d 	bl	80020ee <_lseek>
 80097f4:	1c43      	adds	r3, r0, #1
 80097f6:	d102      	bne.n	80097fe <_lseek_r+0x1e>
 80097f8:	682b      	ldr	r3, [r5, #0]
 80097fa:	b103      	cbz	r3, 80097fe <_lseek_r+0x1e>
 80097fc:	6023      	str	r3, [r4, #0]
 80097fe:	bd38      	pop	{r3, r4, r5, pc}
 8009800:	2000f014 	.word	0x2000f014

08009804 <_read_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d07      	ldr	r5, [pc, #28]	@ (8009824 <_read_r+0x20>)
 8009808:	4604      	mov	r4, r0
 800980a:	4608      	mov	r0, r1
 800980c:	4611      	mov	r1, r2
 800980e:	2200      	movs	r2, #0
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	f7f8 fc0b 	bl	800202e <_read>
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	d102      	bne.n	8009822 <_read_r+0x1e>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	b103      	cbz	r3, 8009822 <_read_r+0x1e>
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	2000f014 	.word	0x2000f014

08009828 <_write_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	4d07      	ldr	r5, [pc, #28]	@ (8009848 <_write_r+0x20>)
 800982c:	4604      	mov	r4, r0
 800982e:	4608      	mov	r0, r1
 8009830:	4611      	mov	r1, r2
 8009832:	2200      	movs	r2, #0
 8009834:	602a      	str	r2, [r5, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	f7f8 fc16 	bl	8002068 <_write>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_write_r+0x1e>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_write_r+0x1e>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	2000f014 	.word	0x2000f014

0800984c <__errno>:
 800984c:	4b01      	ldr	r3, [pc, #4]	@ (8009854 <__errno+0x8>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000194 	.word	0x20000194

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4d0d      	ldr	r5, [pc, #52]	@ (8009890 <__libc_init_array+0x38>)
 800985c:	4c0d      	ldr	r4, [pc, #52]	@ (8009894 <__libc_init_array+0x3c>)
 800985e:	1b64      	subs	r4, r4, r5
 8009860:	10a4      	asrs	r4, r4, #2
 8009862:	2600      	movs	r6, #0
 8009864:	42a6      	cmp	r6, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	4d0b      	ldr	r5, [pc, #44]	@ (8009898 <__libc_init_array+0x40>)
 800986a:	4c0c      	ldr	r4, [pc, #48]	@ (800989c <__libc_init_array+0x44>)
 800986c:	f002 fcde 	bl	800c22c <_init>
 8009870:	1b64      	subs	r4, r4, r5
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	2600      	movs	r6, #0
 8009876:	42a6      	cmp	r6, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009880:	4798      	blx	r3
 8009882:	3601      	adds	r6, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f855 3b04 	ldr.w	r3, [r5], #4
 800988a:	4798      	blx	r3
 800988c:	3601      	adds	r6, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	0800c6d8 	.word	0x0800c6d8
 8009894:	0800c6d8 	.word	0x0800c6d8
 8009898:	0800c6d8 	.word	0x0800c6d8
 800989c:	0800c6dc 	.word	0x0800c6dc

080098a0 <__retarget_lock_init_recursive>:
 80098a0:	4770      	bx	lr

080098a2 <__retarget_lock_acquire_recursive>:
 80098a2:	4770      	bx	lr

080098a4 <__retarget_lock_release_recursive>:
 80098a4:	4770      	bx	lr

080098a6 <memcpy>:
 80098a6:	440a      	add	r2, r1
 80098a8:	4291      	cmp	r1, r2
 80098aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80098ae:	d100      	bne.n	80098b2 <memcpy+0xc>
 80098b0:	4770      	bx	lr
 80098b2:	b510      	push	{r4, lr}
 80098b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098bc:	4291      	cmp	r1, r2
 80098be:	d1f9      	bne.n	80098b4 <memcpy+0xe>
 80098c0:	bd10      	pop	{r4, pc}
 80098c2:	0000      	movs	r0, r0
 80098c4:	0000      	movs	r0, r0
	...

080098c8 <nan>:
 80098c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80098d0 <nan+0x8>
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	00000000 	.word	0x00000000
 80098d4:	7ff80000 	.word	0x7ff80000

080098d8 <nanf>:
 80098d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80098e0 <nanf+0x8>
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	7fc00000 	.word	0x7fc00000

080098e4 <quorem>:
 80098e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e8:	6903      	ldr	r3, [r0, #16]
 80098ea:	690c      	ldr	r4, [r1, #16]
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	4607      	mov	r7, r0
 80098f0:	db7e      	blt.n	80099f0 <quorem+0x10c>
 80098f2:	3c01      	subs	r4, #1
 80098f4:	f101 0814 	add.w	r8, r1, #20
 80098f8:	00a3      	lsls	r3, r4, #2
 80098fa:	f100 0514 	add.w	r5, r0, #20
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009904:	9301      	str	r3, [sp, #4]
 8009906:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800990a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800990e:	3301      	adds	r3, #1
 8009910:	429a      	cmp	r2, r3
 8009912:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009916:	fbb2 f6f3 	udiv	r6, r2, r3
 800991a:	d32e      	bcc.n	800997a <quorem+0x96>
 800991c:	f04f 0a00 	mov.w	sl, #0
 8009920:	46c4      	mov	ip, r8
 8009922:	46ae      	mov	lr, r5
 8009924:	46d3      	mov	fp, sl
 8009926:	f85c 3b04 	ldr.w	r3, [ip], #4
 800992a:	b298      	uxth	r0, r3
 800992c:	fb06 a000 	mla	r0, r6, r0, sl
 8009930:	0c02      	lsrs	r2, r0, #16
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	fb06 2303 	mla	r3, r6, r3, r2
 8009938:	f8de 2000 	ldr.w	r2, [lr]
 800993c:	b280      	uxth	r0, r0
 800993e:	b292      	uxth	r2, r2
 8009940:	1a12      	subs	r2, r2, r0
 8009942:	445a      	add	r2, fp
 8009944:	f8de 0000 	ldr.w	r0, [lr]
 8009948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800994c:	b29b      	uxth	r3, r3
 800994e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009952:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009956:	b292      	uxth	r2, r2
 8009958:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800995c:	45e1      	cmp	r9, ip
 800995e:	f84e 2b04 	str.w	r2, [lr], #4
 8009962:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009966:	d2de      	bcs.n	8009926 <quorem+0x42>
 8009968:	9b00      	ldr	r3, [sp, #0]
 800996a:	58eb      	ldr	r3, [r5, r3]
 800996c:	b92b      	cbnz	r3, 800997a <quorem+0x96>
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	3b04      	subs	r3, #4
 8009972:	429d      	cmp	r5, r3
 8009974:	461a      	mov	r2, r3
 8009976:	d32f      	bcc.n	80099d8 <quorem+0xf4>
 8009978:	613c      	str	r4, [r7, #16]
 800997a:	4638      	mov	r0, r7
 800997c:	f001 fd10 	bl	800b3a0 <__mcmp>
 8009980:	2800      	cmp	r0, #0
 8009982:	db25      	blt.n	80099d0 <quorem+0xec>
 8009984:	4629      	mov	r1, r5
 8009986:	2000      	movs	r0, #0
 8009988:	f858 2b04 	ldr.w	r2, [r8], #4
 800998c:	f8d1 c000 	ldr.w	ip, [r1]
 8009990:	fa1f fe82 	uxth.w	lr, r2
 8009994:	fa1f f38c 	uxth.w	r3, ip
 8009998:	eba3 030e 	sub.w	r3, r3, lr
 800999c:	4403      	add	r3, r0
 800999e:	0c12      	lsrs	r2, r2, #16
 80099a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80099a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ae:	45c1      	cmp	r9, r8
 80099b0:	f841 3b04 	str.w	r3, [r1], #4
 80099b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099b8:	d2e6      	bcs.n	8009988 <quorem+0xa4>
 80099ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099c2:	b922      	cbnz	r2, 80099ce <quorem+0xea>
 80099c4:	3b04      	subs	r3, #4
 80099c6:	429d      	cmp	r5, r3
 80099c8:	461a      	mov	r2, r3
 80099ca:	d30b      	bcc.n	80099e4 <quorem+0x100>
 80099cc:	613c      	str	r4, [r7, #16]
 80099ce:	3601      	adds	r6, #1
 80099d0:	4630      	mov	r0, r6
 80099d2:	b003      	add	sp, #12
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	3b04      	subs	r3, #4
 80099dc:	2a00      	cmp	r2, #0
 80099de:	d1cb      	bne.n	8009978 <quorem+0x94>
 80099e0:	3c01      	subs	r4, #1
 80099e2:	e7c6      	b.n	8009972 <quorem+0x8e>
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	3b04      	subs	r3, #4
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	d1ef      	bne.n	80099cc <quorem+0xe8>
 80099ec:	3c01      	subs	r4, #1
 80099ee:	e7ea      	b.n	80099c6 <quorem+0xe2>
 80099f0:	2000      	movs	r0, #0
 80099f2:	e7ee      	b.n	80099d2 <quorem+0xee>
 80099f4:	0000      	movs	r0, r0
	...

080099f8 <_dtoa_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	69c7      	ldr	r7, [r0, #28]
 80099fe:	b099      	sub	sp, #100	@ 0x64
 8009a00:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a04:	ec55 4b10 	vmov	r4, r5, d0
 8009a08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009a0a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a0c:	4683      	mov	fp, r0
 8009a0e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a12:	b97f      	cbnz	r7, 8009a34 <_dtoa_r+0x3c>
 8009a14:	2010      	movs	r0, #16
 8009a16:	f001 f937 	bl	800ac88 <malloc>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a20:	b920      	cbnz	r0, 8009a2c <_dtoa_r+0x34>
 8009a22:	4ba7      	ldr	r3, [pc, #668]	@ (8009cc0 <_dtoa_r+0x2c8>)
 8009a24:	21ef      	movs	r1, #239	@ 0xef
 8009a26:	48a7      	ldr	r0, [pc, #668]	@ (8009cc4 <_dtoa_r+0x2cc>)
 8009a28:	f002 f8e2 	bl	800bbf0 <__assert_func>
 8009a2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a30:	6007      	str	r7, [r0, #0]
 8009a32:	60c7      	str	r7, [r0, #12]
 8009a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a38:	6819      	ldr	r1, [r3, #0]
 8009a3a:	b159      	cbz	r1, 8009a54 <_dtoa_r+0x5c>
 8009a3c:	685a      	ldr	r2, [r3, #4]
 8009a3e:	604a      	str	r2, [r1, #4]
 8009a40:	2301      	movs	r3, #1
 8009a42:	4093      	lsls	r3, r2
 8009a44:	608b      	str	r3, [r1, #8]
 8009a46:	4658      	mov	r0, fp
 8009a48:	f001 fa26 	bl	800ae98 <_Bfree>
 8009a4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	1e2b      	subs	r3, r5, #0
 8009a56:	bfb9      	ittee	lt
 8009a58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a5c:	9303      	strlt	r3, [sp, #12]
 8009a5e:	2300      	movge	r3, #0
 8009a60:	6033      	strge	r3, [r6, #0]
 8009a62:	9f03      	ldr	r7, [sp, #12]
 8009a64:	4b98      	ldr	r3, [pc, #608]	@ (8009cc8 <_dtoa_r+0x2d0>)
 8009a66:	bfbc      	itt	lt
 8009a68:	2201      	movlt	r2, #1
 8009a6a:	6032      	strlt	r2, [r6, #0]
 8009a6c:	43bb      	bics	r3, r7
 8009a6e:	d112      	bne.n	8009a96 <_dtoa_r+0x9e>
 8009a70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a72:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a76:	6013      	str	r3, [r2, #0]
 8009a78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a7c:	4323      	orrs	r3, r4
 8009a7e:	f000 854d 	beq.w	800a51c <_dtoa_r+0xb24>
 8009a82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009cdc <_dtoa_r+0x2e4>
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 854f 	beq.w	800a52c <_dtoa_r+0xb34>
 8009a8e:	f10a 0303 	add.w	r3, sl, #3
 8009a92:	f000 bd49 	b.w	800a528 <_dtoa_r+0xb30>
 8009a96:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	ec51 0b17 	vmov	r0, r1, d7
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009aa6:	f7f7 f80f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009aaa:	4680      	mov	r8, r0
 8009aac:	b158      	cbz	r0, 8009ac6 <_dtoa_r+0xce>
 8009aae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ab6:	b113      	cbz	r3, 8009abe <_dtoa_r+0xc6>
 8009ab8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aba:	4b84      	ldr	r3, [pc, #528]	@ (8009ccc <_dtoa_r+0x2d4>)
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009ce0 <_dtoa_r+0x2e8>
 8009ac2:	f000 bd33 	b.w	800a52c <_dtoa_r+0xb34>
 8009ac6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009aca:	aa16      	add	r2, sp, #88	@ 0x58
 8009acc:	a917      	add	r1, sp, #92	@ 0x5c
 8009ace:	4658      	mov	r0, fp
 8009ad0:	f001 fd86 	bl	800b5e0 <__d2b>
 8009ad4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ad8:	4681      	mov	r9, r0
 8009ada:	2e00      	cmp	r6, #0
 8009adc:	d077      	beq.n	8009bce <_dtoa_r+0x1d6>
 8009ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ae0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009af0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009af4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009af8:	4619      	mov	r1, r3
 8009afa:	2200      	movs	r2, #0
 8009afc:	4b74      	ldr	r3, [pc, #464]	@ (8009cd0 <_dtoa_r+0x2d8>)
 8009afe:	f7f6 fbc3 	bl	8000288 <__aeabi_dsub>
 8009b02:	a369      	add	r3, pc, #420	@ (adr r3, 8009ca8 <_dtoa_r+0x2b0>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f7f6 fd76 	bl	80005f8 <__aeabi_dmul>
 8009b0c:	a368      	add	r3, pc, #416	@ (adr r3, 8009cb0 <_dtoa_r+0x2b8>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbbb 	bl	800028c <__adddf3>
 8009b16:	4604      	mov	r4, r0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	460d      	mov	r5, r1
 8009b1c:	f7f6 fd02 	bl	8000524 <__aeabi_i2d>
 8009b20:	a365      	add	r3, pc, #404	@ (adr r3, 8009cb8 <_dtoa_r+0x2c0>)
 8009b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b26:	f7f6 fd67 	bl	80005f8 <__aeabi_dmul>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	4629      	mov	r1, r5
 8009b32:	f7f6 fbab 	bl	800028c <__adddf3>
 8009b36:	4604      	mov	r4, r0
 8009b38:	460d      	mov	r5, r1
 8009b3a:	f7f7 f80d 	bl	8000b58 <__aeabi_d2iz>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	4607      	mov	r7, r0
 8009b42:	2300      	movs	r3, #0
 8009b44:	4620      	mov	r0, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	f7f6 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8009b4c:	b140      	cbz	r0, 8009b60 <_dtoa_r+0x168>
 8009b4e:	4638      	mov	r0, r7
 8009b50:	f7f6 fce8 	bl	8000524 <__aeabi_i2d>
 8009b54:	4622      	mov	r2, r4
 8009b56:	462b      	mov	r3, r5
 8009b58:	f7f6 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b5c:	b900      	cbnz	r0, 8009b60 <_dtoa_r+0x168>
 8009b5e:	3f01      	subs	r7, #1
 8009b60:	2f16      	cmp	r7, #22
 8009b62:	d851      	bhi.n	8009c08 <_dtoa_r+0x210>
 8009b64:	4b5b      	ldr	r3, [pc, #364]	@ (8009cd4 <_dtoa_r+0x2dc>)
 8009b66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b72:	f7f6 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8009b76:	2800      	cmp	r0, #0
 8009b78:	d048      	beq.n	8009c0c <_dtoa_r+0x214>
 8009b7a:	3f01      	subs	r7, #1
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b82:	1b9b      	subs	r3, r3, r6
 8009b84:	1e5a      	subs	r2, r3, #1
 8009b86:	bf44      	itt	mi
 8009b88:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b8c:	2300      	movmi	r3, #0
 8009b8e:	9208      	str	r2, [sp, #32]
 8009b90:	bf54      	ite	pl
 8009b92:	f04f 0800 	movpl.w	r8, #0
 8009b96:	9308      	strmi	r3, [sp, #32]
 8009b98:	2f00      	cmp	r7, #0
 8009b9a:	db39      	blt.n	8009c10 <_dtoa_r+0x218>
 8009b9c:	9b08      	ldr	r3, [sp, #32]
 8009b9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009ba0:	443b      	add	r3, r7
 8009ba2:	9308      	str	r3, [sp, #32]
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ba8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009baa:	2b09      	cmp	r3, #9
 8009bac:	d864      	bhi.n	8009c78 <_dtoa_r+0x280>
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	bfc4      	itt	gt
 8009bb2:	3b04      	subgt	r3, #4
 8009bb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009bb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bb8:	f1a3 0302 	sub.w	r3, r3, #2
 8009bbc:	bfcc      	ite	gt
 8009bbe:	2400      	movgt	r4, #0
 8009bc0:	2401      	movle	r4, #1
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d863      	bhi.n	8009c8e <_dtoa_r+0x296>
 8009bc6:	e8df f003 	tbb	[pc, r3]
 8009bca:	372a      	.short	0x372a
 8009bcc:	5535      	.short	0x5535
 8009bce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009bd2:	441e      	add	r6, r3
 8009bd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bd8:	2b20      	cmp	r3, #32
 8009bda:	bfc1      	itttt	gt
 8009bdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009be0:	409f      	lslgt	r7, r3
 8009be2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009be6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009bea:	bfd6      	itet	le
 8009bec:	f1c3 0320 	rsble	r3, r3, #32
 8009bf0:	ea47 0003 	orrgt.w	r0, r7, r3
 8009bf4:	fa04 f003 	lslle.w	r0, r4, r3
 8009bf8:	f7f6 fc84 	bl	8000504 <__aeabi_ui2d>
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009c02:	3e01      	subs	r6, #1
 8009c04:	9214      	str	r2, [sp, #80]	@ 0x50
 8009c06:	e777      	b.n	8009af8 <_dtoa_r+0x100>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e7b8      	b.n	8009b7e <_dtoa_r+0x186>
 8009c0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8009c0e:	e7b7      	b.n	8009b80 <_dtoa_r+0x188>
 8009c10:	427b      	negs	r3, r7
 8009c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c14:	2300      	movs	r3, #0
 8009c16:	eba8 0807 	sub.w	r8, r8, r7
 8009c1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c1c:	e7c4      	b.n	8009ba8 <_dtoa_r+0x1b0>
 8009c1e:	2300      	movs	r3, #0
 8009c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dc35      	bgt.n	8009c94 <_dtoa_r+0x29c>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	9307      	str	r3, [sp, #28]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c32:	e00b      	b.n	8009c4c <_dtoa_r+0x254>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e7f3      	b.n	8009c20 <_dtoa_r+0x228>
 8009c38:	2300      	movs	r3, #0
 8009c3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c3e:	18fb      	adds	r3, r7, r3
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	3301      	adds	r3, #1
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	9307      	str	r3, [sp, #28]
 8009c48:	bfb8      	it	lt
 8009c4a:	2301      	movlt	r3, #1
 8009c4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c50:	2100      	movs	r1, #0
 8009c52:	2204      	movs	r2, #4
 8009c54:	f102 0514 	add.w	r5, r2, #20
 8009c58:	429d      	cmp	r5, r3
 8009c5a:	d91f      	bls.n	8009c9c <_dtoa_r+0x2a4>
 8009c5c:	6041      	str	r1, [r0, #4]
 8009c5e:	4658      	mov	r0, fp
 8009c60:	f001 f8da 	bl	800ae18 <_Balloc>
 8009c64:	4682      	mov	sl, r0
 8009c66:	2800      	cmp	r0, #0
 8009c68:	d13c      	bne.n	8009ce4 <_dtoa_r+0x2ec>
 8009c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8009cd8 <_dtoa_r+0x2e0>)
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c72:	e6d8      	b.n	8009a26 <_dtoa_r+0x2e>
 8009c74:	2301      	movs	r3, #1
 8009c76:	e7e0      	b.n	8009c3a <_dtoa_r+0x242>
 8009c78:	2401      	movs	r4, #1
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c80:	f04f 33ff 	mov.w	r3, #4294967295
 8009c84:	9300      	str	r3, [sp, #0]
 8009c86:	9307      	str	r3, [sp, #28]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	2312      	movs	r3, #18
 8009c8c:	e7d0      	b.n	8009c30 <_dtoa_r+0x238>
 8009c8e:	2301      	movs	r3, #1
 8009c90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c92:	e7f5      	b.n	8009c80 <_dtoa_r+0x288>
 8009c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	9307      	str	r3, [sp, #28]
 8009c9a:	e7d7      	b.n	8009c4c <_dtoa_r+0x254>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	0052      	lsls	r2, r2, #1
 8009ca0:	e7d8      	b.n	8009c54 <_dtoa_r+0x25c>
 8009ca2:	bf00      	nop
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	636f4361 	.word	0x636f4361
 8009cac:	3fd287a7 	.word	0x3fd287a7
 8009cb0:	8b60c8b3 	.word	0x8b60c8b3
 8009cb4:	3fc68a28 	.word	0x3fc68a28
 8009cb8:	509f79fb 	.word	0x509f79fb
 8009cbc:	3fd34413 	.word	0x3fd34413
 8009cc0:	0800c44a 	.word	0x0800c44a
 8009cc4:	0800c461 	.word	0x0800c461
 8009cc8:	7ff00000 	.word	0x7ff00000
 8009ccc:	0800c412 	.word	0x0800c412
 8009cd0:	3ff80000 	.word	0x3ff80000
 8009cd4:	0800c5b8 	.word	0x0800c5b8
 8009cd8:	0800c4b9 	.word	0x0800c4b9
 8009cdc:	0800c446 	.word	0x0800c446
 8009ce0:	0800c411 	.word	0x0800c411
 8009ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ce8:	6018      	str	r0, [r3, #0]
 8009cea:	9b07      	ldr	r3, [sp, #28]
 8009cec:	2b0e      	cmp	r3, #14
 8009cee:	f200 80a4 	bhi.w	8009e3a <_dtoa_r+0x442>
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	f000 80a1 	beq.w	8009e3a <_dtoa_r+0x442>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	dd33      	ble.n	8009d64 <_dtoa_r+0x36c>
 8009cfc:	4bad      	ldr	r3, [pc, #692]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009cfe:	f007 020f 	and.w	r2, r7, #15
 8009d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d06:	ed93 7b00 	vldr	d7, [r3]
 8009d0a:	05f8      	lsls	r0, r7, #23
 8009d0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009d14:	d516      	bpl.n	8009d44 <_dtoa_r+0x34c>
 8009d16:	4ba8      	ldr	r3, [pc, #672]	@ (8009fb8 <_dtoa_r+0x5c0>)
 8009d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d20:	f7f6 fd94 	bl	800084c <__aeabi_ddiv>
 8009d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d28:	f004 040f 	and.w	r4, r4, #15
 8009d2c:	2603      	movs	r6, #3
 8009d2e:	4da2      	ldr	r5, [pc, #648]	@ (8009fb8 <_dtoa_r+0x5c0>)
 8009d30:	b954      	cbnz	r4, 8009d48 <_dtoa_r+0x350>
 8009d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d3a:	f7f6 fd87 	bl	800084c <__aeabi_ddiv>
 8009d3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d42:	e028      	b.n	8009d96 <_dtoa_r+0x39e>
 8009d44:	2602      	movs	r6, #2
 8009d46:	e7f2      	b.n	8009d2e <_dtoa_r+0x336>
 8009d48:	07e1      	lsls	r1, r4, #31
 8009d4a:	d508      	bpl.n	8009d5e <_dtoa_r+0x366>
 8009d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d54:	f7f6 fc50 	bl	80005f8 <__aeabi_dmul>
 8009d58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d5c:	3601      	adds	r6, #1
 8009d5e:	1064      	asrs	r4, r4, #1
 8009d60:	3508      	adds	r5, #8
 8009d62:	e7e5      	b.n	8009d30 <_dtoa_r+0x338>
 8009d64:	f000 80d2 	beq.w	8009f0c <_dtoa_r+0x514>
 8009d68:	427c      	negs	r4, r7
 8009d6a:	4b92      	ldr	r3, [pc, #584]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009d6c:	4d92      	ldr	r5, [pc, #584]	@ (8009fb8 <_dtoa_r+0x5c0>)
 8009d6e:	f004 020f 	and.w	r2, r4, #15
 8009d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d7e:	f7f6 fc3b 	bl	80005f8 <__aeabi_dmul>
 8009d82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d86:	1124      	asrs	r4, r4, #4
 8009d88:	2300      	movs	r3, #0
 8009d8a:	2602      	movs	r6, #2
 8009d8c:	2c00      	cmp	r4, #0
 8009d8e:	f040 80b2 	bne.w	8009ef6 <_dtoa_r+0x4fe>
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1d3      	bne.n	8009d3e <_dtoa_r+0x346>
 8009d96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 80b7 	beq.w	8009f10 <_dtoa_r+0x518>
 8009da2:	4b86      	ldr	r3, [pc, #536]	@ (8009fbc <_dtoa_r+0x5c4>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4620      	mov	r0, r4
 8009da8:	4629      	mov	r1, r5
 8009daa:	f7f6 fe97 	bl	8000adc <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	f000 80ae 	beq.w	8009f10 <_dtoa_r+0x518>
 8009db4:	9b07      	ldr	r3, [sp, #28]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f000 80aa 	beq.w	8009f10 <_dtoa_r+0x518>
 8009dbc:	9b00      	ldr	r3, [sp, #0]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	dd37      	ble.n	8009e32 <_dtoa_r+0x43a>
 8009dc2:	1e7b      	subs	r3, r7, #1
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8009fc0 <_dtoa_r+0x5c8>)
 8009dca:	2200      	movs	r2, #0
 8009dcc:	4629      	mov	r1, r5
 8009dce:	f7f6 fc13 	bl	80005f8 <__aeabi_dmul>
 8009dd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd6:	9c00      	ldr	r4, [sp, #0]
 8009dd8:	3601      	adds	r6, #1
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f7f6 fba2 	bl	8000524 <__aeabi_i2d>
 8009de0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009de4:	f7f6 fc08 	bl	80005f8 <__aeabi_dmul>
 8009de8:	4b76      	ldr	r3, [pc, #472]	@ (8009fc4 <_dtoa_r+0x5cc>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	f7f6 fa4e 	bl	800028c <__adddf3>
 8009df0:	4605      	mov	r5, r0
 8009df2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	f040 808d 	bne.w	8009f16 <_dtoa_r+0x51e>
 8009dfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e00:	4b71      	ldr	r3, [pc, #452]	@ (8009fc8 <_dtoa_r+0x5d0>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7f6 fa40 	bl	8000288 <__aeabi_dsub>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e10:	462a      	mov	r2, r5
 8009e12:	4633      	mov	r3, r6
 8009e14:	f7f6 fe80 	bl	8000b18 <__aeabi_dcmpgt>
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f040 828b 	bne.w	800a334 <_dtoa_r+0x93c>
 8009e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e22:	462a      	mov	r2, r5
 8009e24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e28:	f7f6 fe58 	bl	8000adc <__aeabi_dcmplt>
 8009e2c:	2800      	cmp	r0, #0
 8009e2e:	f040 8128 	bne.w	800a082 <_dtoa_r+0x68a>
 8009e32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f2c0 815a 	blt.w	800a0f6 <_dtoa_r+0x6fe>
 8009e42:	2f0e      	cmp	r7, #14
 8009e44:	f300 8157 	bgt.w	800a0f6 <_dtoa_r+0x6fe>
 8009e48:	4b5a      	ldr	r3, [pc, #360]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009e4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e4e:	ed93 7b00 	vldr	d7, [r3]
 8009e52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	ed8d 7b00 	vstr	d7, [sp]
 8009e5a:	da03      	bge.n	8009e64 <_dtoa_r+0x46c>
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f340 8101 	ble.w	800a066 <_dtoa_r+0x66e>
 8009e64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e68:	4656      	mov	r6, sl
 8009e6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6e:	4620      	mov	r0, r4
 8009e70:	4629      	mov	r1, r5
 8009e72:	f7f6 fceb 	bl	800084c <__aeabi_ddiv>
 8009e76:	f7f6 fe6f 	bl	8000b58 <__aeabi_d2iz>
 8009e7a:	4680      	mov	r8, r0
 8009e7c:	f7f6 fb52 	bl	8000524 <__aeabi_i2d>
 8009e80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e94:	f7f6 f9f8 	bl	8000288 <__aeabi_dsub>
 8009e98:	f806 4b01 	strb.w	r4, [r6], #1
 8009e9c:	9d07      	ldr	r5, [sp, #28]
 8009e9e:	eba6 040a 	sub.w	r4, r6, sl
 8009ea2:	42a5      	cmp	r5, r4
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	f040 8117 	bne.w	800a0da <_dtoa_r+0x6e2>
 8009eac:	f7f6 f9ee 	bl	800028c <__adddf3>
 8009eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	f7f6 fe2e 	bl	8000b18 <__aeabi_dcmpgt>
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f040 80f9 	bne.w	800a0b4 <_dtoa_r+0x6bc>
 8009ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	f7f6 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ece:	b118      	cbz	r0, 8009ed8 <_dtoa_r+0x4e0>
 8009ed0:	f018 0f01 	tst.w	r8, #1
 8009ed4:	f040 80ee 	bne.w	800a0b4 <_dtoa_r+0x6bc>
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4658      	mov	r0, fp
 8009edc:	f000 ffdc 	bl	800ae98 <_Bfree>
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	7033      	strb	r3, [r6, #0]
 8009ee4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ee6:	3701      	adds	r7, #1
 8009ee8:	601f      	str	r7, [r3, #0]
 8009eea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f000 831d 	beq.w	800a52c <_dtoa_r+0xb34>
 8009ef2:	601e      	str	r6, [r3, #0]
 8009ef4:	e31a      	b.n	800a52c <_dtoa_r+0xb34>
 8009ef6:	07e2      	lsls	r2, r4, #31
 8009ef8:	d505      	bpl.n	8009f06 <_dtoa_r+0x50e>
 8009efa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009efe:	f7f6 fb7b 	bl	80005f8 <__aeabi_dmul>
 8009f02:	3601      	adds	r6, #1
 8009f04:	2301      	movs	r3, #1
 8009f06:	1064      	asrs	r4, r4, #1
 8009f08:	3508      	adds	r5, #8
 8009f0a:	e73f      	b.n	8009d8c <_dtoa_r+0x394>
 8009f0c:	2602      	movs	r6, #2
 8009f0e:	e742      	b.n	8009d96 <_dtoa_r+0x39e>
 8009f10:	9c07      	ldr	r4, [sp, #28]
 8009f12:	9704      	str	r7, [sp, #16]
 8009f14:	e761      	b.n	8009dda <_dtoa_r+0x3e2>
 8009f16:	4b27      	ldr	r3, [pc, #156]	@ (8009fb4 <_dtoa_r+0x5bc>)
 8009f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f22:	4454      	add	r4, sl
 8009f24:	2900      	cmp	r1, #0
 8009f26:	d053      	beq.n	8009fd0 <_dtoa_r+0x5d8>
 8009f28:	4928      	ldr	r1, [pc, #160]	@ (8009fcc <_dtoa_r+0x5d4>)
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	f7f6 fc8e 	bl	800084c <__aeabi_ddiv>
 8009f30:	4633      	mov	r3, r6
 8009f32:	462a      	mov	r2, r5
 8009f34:	f7f6 f9a8 	bl	8000288 <__aeabi_dsub>
 8009f38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f3c:	4656      	mov	r6, sl
 8009f3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f42:	f7f6 fe09 	bl	8000b58 <__aeabi_d2iz>
 8009f46:	4605      	mov	r5, r0
 8009f48:	f7f6 faec 	bl	8000524 <__aeabi_i2d>
 8009f4c:	4602      	mov	r2, r0
 8009f4e:	460b      	mov	r3, r1
 8009f50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f54:	f7f6 f998 	bl	8000288 <__aeabi_dsub>
 8009f58:	3530      	adds	r5, #48	@ 0x30
 8009f5a:	4602      	mov	r2, r0
 8009f5c:	460b      	mov	r3, r1
 8009f5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f62:	f806 5b01 	strb.w	r5, [r6], #1
 8009f66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f6a:	f7f6 fdb7 	bl	8000adc <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d171      	bne.n	800a056 <_dtoa_r+0x65e>
 8009f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f76:	4911      	ldr	r1, [pc, #68]	@ (8009fbc <_dtoa_r+0x5c4>)
 8009f78:	2000      	movs	r0, #0
 8009f7a:	f7f6 f985 	bl	8000288 <__aeabi_dsub>
 8009f7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f82:	f7f6 fdab 	bl	8000adc <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	f040 8095 	bne.w	800a0b6 <_dtoa_r+0x6be>
 8009f8c:	42a6      	cmp	r6, r4
 8009f8e:	f43f af50 	beq.w	8009e32 <_dtoa_r+0x43a>
 8009f92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f96:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <_dtoa_r+0x5c8>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f7f6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8009f9e:	4b08      	ldr	r3, [pc, #32]	@ (8009fc0 <_dtoa_r+0x5c8>)
 8009fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009faa:	f7f6 fb25 	bl	80005f8 <__aeabi_dmul>
 8009fae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb2:	e7c4      	b.n	8009f3e <_dtoa_r+0x546>
 8009fb4:	0800c5b8 	.word	0x0800c5b8
 8009fb8:	0800c590 	.word	0x0800c590
 8009fbc:	3ff00000 	.word	0x3ff00000
 8009fc0:	40240000 	.word	0x40240000
 8009fc4:	401c0000 	.word	0x401c0000
 8009fc8:	40140000 	.word	0x40140000
 8009fcc:	3fe00000 	.word	0x3fe00000
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	f7f6 fb10 	bl	80005f8 <__aeabi_dmul>
 8009fd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fdc:	9415      	str	r4, [sp, #84]	@ 0x54
 8009fde:	4656      	mov	r6, sl
 8009fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fe4:	f7f6 fdb8 	bl	8000b58 <__aeabi_d2iz>
 8009fe8:	4605      	mov	r5, r0
 8009fea:	f7f6 fa9b 	bl	8000524 <__aeabi_i2d>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	460b      	mov	r3, r1
 8009ff2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ff6:	f7f6 f947 	bl	8000288 <__aeabi_dsub>
 8009ffa:	3530      	adds	r5, #48	@ 0x30
 8009ffc:	f806 5b01 	strb.w	r5, [r6], #1
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	42a6      	cmp	r6, r4
 800a006:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a00a:	f04f 0200 	mov.w	r2, #0
 800a00e:	d124      	bne.n	800a05a <_dtoa_r+0x662>
 800a010:	4bac      	ldr	r3, [pc, #688]	@ (800a2c4 <_dtoa_r+0x8cc>)
 800a012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a016:	f7f6 f939 	bl	800028c <__adddf3>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a022:	f7f6 fd79 	bl	8000b18 <__aeabi_dcmpgt>
 800a026:	2800      	cmp	r0, #0
 800a028:	d145      	bne.n	800a0b6 <_dtoa_r+0x6be>
 800a02a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a02e:	49a5      	ldr	r1, [pc, #660]	@ (800a2c4 <_dtoa_r+0x8cc>)
 800a030:	2000      	movs	r0, #0
 800a032:	f7f6 f929 	bl	8000288 <__aeabi_dsub>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a03e:	f7f6 fd4d 	bl	8000adc <__aeabi_dcmplt>
 800a042:	2800      	cmp	r0, #0
 800a044:	f43f aef5 	beq.w	8009e32 <_dtoa_r+0x43a>
 800a048:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a04a:	1e73      	subs	r3, r6, #1
 800a04c:	9315      	str	r3, [sp, #84]	@ 0x54
 800a04e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a052:	2b30      	cmp	r3, #48	@ 0x30
 800a054:	d0f8      	beq.n	800a048 <_dtoa_r+0x650>
 800a056:	9f04      	ldr	r7, [sp, #16]
 800a058:	e73e      	b.n	8009ed8 <_dtoa_r+0x4e0>
 800a05a:	4b9b      	ldr	r3, [pc, #620]	@ (800a2c8 <_dtoa_r+0x8d0>)
 800a05c:	f7f6 facc 	bl	80005f8 <__aeabi_dmul>
 800a060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a064:	e7bc      	b.n	8009fe0 <_dtoa_r+0x5e8>
 800a066:	d10c      	bne.n	800a082 <_dtoa_r+0x68a>
 800a068:	4b98      	ldr	r3, [pc, #608]	@ (800a2cc <_dtoa_r+0x8d4>)
 800a06a:	2200      	movs	r2, #0
 800a06c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a070:	f7f6 fac2 	bl	80005f8 <__aeabi_dmul>
 800a074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a078:	f7f6 fd44 	bl	8000b04 <__aeabi_dcmpge>
 800a07c:	2800      	cmp	r0, #0
 800a07e:	f000 8157 	beq.w	800a330 <_dtoa_r+0x938>
 800a082:	2400      	movs	r4, #0
 800a084:	4625      	mov	r5, r4
 800a086:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a088:	43db      	mvns	r3, r3
 800a08a:	9304      	str	r3, [sp, #16]
 800a08c:	4656      	mov	r6, sl
 800a08e:	2700      	movs	r7, #0
 800a090:	4621      	mov	r1, r4
 800a092:	4658      	mov	r0, fp
 800a094:	f000 ff00 	bl	800ae98 <_Bfree>
 800a098:	2d00      	cmp	r5, #0
 800a09a:	d0dc      	beq.n	800a056 <_dtoa_r+0x65e>
 800a09c:	b12f      	cbz	r7, 800a0aa <_dtoa_r+0x6b2>
 800a09e:	42af      	cmp	r7, r5
 800a0a0:	d003      	beq.n	800a0aa <_dtoa_r+0x6b2>
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	4658      	mov	r0, fp
 800a0a6:	f000 fef7 	bl	800ae98 <_Bfree>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4658      	mov	r0, fp
 800a0ae:	f000 fef3 	bl	800ae98 <_Bfree>
 800a0b2:	e7d0      	b.n	800a056 <_dtoa_r+0x65e>
 800a0b4:	9704      	str	r7, [sp, #16]
 800a0b6:	4633      	mov	r3, r6
 800a0b8:	461e      	mov	r6, r3
 800a0ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0be:	2a39      	cmp	r2, #57	@ 0x39
 800a0c0:	d107      	bne.n	800a0d2 <_dtoa_r+0x6da>
 800a0c2:	459a      	cmp	sl, r3
 800a0c4:	d1f8      	bne.n	800a0b8 <_dtoa_r+0x6c0>
 800a0c6:	9a04      	ldr	r2, [sp, #16]
 800a0c8:	3201      	adds	r2, #1
 800a0ca:	9204      	str	r2, [sp, #16]
 800a0cc:	2230      	movs	r2, #48	@ 0x30
 800a0ce:	f88a 2000 	strb.w	r2, [sl]
 800a0d2:	781a      	ldrb	r2, [r3, #0]
 800a0d4:	3201      	adds	r2, #1
 800a0d6:	701a      	strb	r2, [r3, #0]
 800a0d8:	e7bd      	b.n	800a056 <_dtoa_r+0x65e>
 800a0da:	4b7b      	ldr	r3, [pc, #492]	@ (800a2c8 <_dtoa_r+0x8d0>)
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f7f6 fa8b 	bl	80005f8 <__aeabi_dmul>
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	f7f6 fced 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f43f aebb 	beq.w	8009e6a <_dtoa_r+0x472>
 800a0f4:	e6f0      	b.n	8009ed8 <_dtoa_r+0x4e0>
 800a0f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0f8:	2a00      	cmp	r2, #0
 800a0fa:	f000 80db 	beq.w	800a2b4 <_dtoa_r+0x8bc>
 800a0fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a100:	2a01      	cmp	r2, #1
 800a102:	f300 80bf 	bgt.w	800a284 <_dtoa_r+0x88c>
 800a106:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a108:	2a00      	cmp	r2, #0
 800a10a:	f000 80b7 	beq.w	800a27c <_dtoa_r+0x884>
 800a10e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a112:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a114:	4646      	mov	r6, r8
 800a116:	9a08      	ldr	r2, [sp, #32]
 800a118:	2101      	movs	r1, #1
 800a11a:	441a      	add	r2, r3
 800a11c:	4658      	mov	r0, fp
 800a11e:	4498      	add	r8, r3
 800a120:	9208      	str	r2, [sp, #32]
 800a122:	f000 ffb7 	bl	800b094 <__i2b>
 800a126:	4605      	mov	r5, r0
 800a128:	b15e      	cbz	r6, 800a142 <_dtoa_r+0x74a>
 800a12a:	9b08      	ldr	r3, [sp, #32]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	dd08      	ble.n	800a142 <_dtoa_r+0x74a>
 800a130:	42b3      	cmp	r3, r6
 800a132:	9a08      	ldr	r2, [sp, #32]
 800a134:	bfa8      	it	ge
 800a136:	4633      	movge	r3, r6
 800a138:	eba8 0803 	sub.w	r8, r8, r3
 800a13c:	1af6      	subs	r6, r6, r3
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	9308      	str	r3, [sp, #32]
 800a142:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a144:	b1f3      	cbz	r3, 800a184 <_dtoa_r+0x78c>
 800a146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 80b7 	beq.w	800a2bc <_dtoa_r+0x8c4>
 800a14e:	b18c      	cbz	r4, 800a174 <_dtoa_r+0x77c>
 800a150:	4629      	mov	r1, r5
 800a152:	4622      	mov	r2, r4
 800a154:	4658      	mov	r0, fp
 800a156:	f001 f85d 	bl	800b214 <__pow5mult>
 800a15a:	464a      	mov	r2, r9
 800a15c:	4601      	mov	r1, r0
 800a15e:	4605      	mov	r5, r0
 800a160:	4658      	mov	r0, fp
 800a162:	f000 ffad 	bl	800b0c0 <__multiply>
 800a166:	4649      	mov	r1, r9
 800a168:	9004      	str	r0, [sp, #16]
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fe94 	bl	800ae98 <_Bfree>
 800a170:	9b04      	ldr	r3, [sp, #16]
 800a172:	4699      	mov	r9, r3
 800a174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a176:	1b1a      	subs	r2, r3, r4
 800a178:	d004      	beq.n	800a184 <_dtoa_r+0x78c>
 800a17a:	4649      	mov	r1, r9
 800a17c:	4658      	mov	r0, fp
 800a17e:	f001 f849 	bl	800b214 <__pow5mult>
 800a182:	4681      	mov	r9, r0
 800a184:	2101      	movs	r1, #1
 800a186:	4658      	mov	r0, fp
 800a188:	f000 ff84 	bl	800b094 <__i2b>
 800a18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a18e:	4604      	mov	r4, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	f000 81cf 	beq.w	800a534 <_dtoa_r+0xb3c>
 800a196:	461a      	mov	r2, r3
 800a198:	4601      	mov	r1, r0
 800a19a:	4658      	mov	r0, fp
 800a19c:	f001 f83a 	bl	800b214 <__pow5mult>
 800a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	f300 8095 	bgt.w	800a2d4 <_dtoa_r+0x8dc>
 800a1aa:	9b02      	ldr	r3, [sp, #8]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f040 8087 	bne.w	800a2c0 <_dtoa_r+0x8c8>
 800a1b2:	9b03      	ldr	r3, [sp, #12]
 800a1b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f040 8089 	bne.w	800a2d0 <_dtoa_r+0x8d8>
 800a1be:	9b03      	ldr	r3, [sp, #12]
 800a1c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1c4:	0d1b      	lsrs	r3, r3, #20
 800a1c6:	051b      	lsls	r3, r3, #20
 800a1c8:	b12b      	cbz	r3, 800a1d6 <_dtoa_r+0x7de>
 800a1ca:	9b08      	ldr	r3, [sp, #32]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	9308      	str	r3, [sp, #32]
 800a1d0:	f108 0801 	add.w	r8, r8, #1
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 81b0 	beq.w	800a540 <_dtoa_r+0xb48>
 800a1e0:	6923      	ldr	r3, [r4, #16]
 800a1e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1e6:	6918      	ldr	r0, [r3, #16]
 800a1e8:	f000 ff08 	bl	800affc <__hi0bits>
 800a1ec:	f1c0 0020 	rsb	r0, r0, #32
 800a1f0:	9b08      	ldr	r3, [sp, #32]
 800a1f2:	4418      	add	r0, r3
 800a1f4:	f010 001f 	ands.w	r0, r0, #31
 800a1f8:	d077      	beq.n	800a2ea <_dtoa_r+0x8f2>
 800a1fa:	f1c0 0320 	rsb	r3, r0, #32
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	dd6b      	ble.n	800a2da <_dtoa_r+0x8e2>
 800a202:	9b08      	ldr	r3, [sp, #32]
 800a204:	f1c0 001c 	rsb	r0, r0, #28
 800a208:	4403      	add	r3, r0
 800a20a:	4480      	add	r8, r0
 800a20c:	4406      	add	r6, r0
 800a20e:	9308      	str	r3, [sp, #32]
 800a210:	f1b8 0f00 	cmp.w	r8, #0
 800a214:	dd05      	ble.n	800a222 <_dtoa_r+0x82a>
 800a216:	4649      	mov	r1, r9
 800a218:	4642      	mov	r2, r8
 800a21a:	4658      	mov	r0, fp
 800a21c:	f001 f854 	bl	800b2c8 <__lshift>
 800a220:	4681      	mov	r9, r0
 800a222:	9b08      	ldr	r3, [sp, #32]
 800a224:	2b00      	cmp	r3, #0
 800a226:	dd05      	ble.n	800a234 <_dtoa_r+0x83c>
 800a228:	4621      	mov	r1, r4
 800a22a:	461a      	mov	r2, r3
 800a22c:	4658      	mov	r0, fp
 800a22e:	f001 f84b 	bl	800b2c8 <__lshift>
 800a232:	4604      	mov	r4, r0
 800a234:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a236:	2b00      	cmp	r3, #0
 800a238:	d059      	beq.n	800a2ee <_dtoa_r+0x8f6>
 800a23a:	4621      	mov	r1, r4
 800a23c:	4648      	mov	r0, r9
 800a23e:	f001 f8af 	bl	800b3a0 <__mcmp>
 800a242:	2800      	cmp	r0, #0
 800a244:	da53      	bge.n	800a2ee <_dtoa_r+0x8f6>
 800a246:	1e7b      	subs	r3, r7, #1
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	4649      	mov	r1, r9
 800a24c:	2300      	movs	r3, #0
 800a24e:	220a      	movs	r2, #10
 800a250:	4658      	mov	r0, fp
 800a252:	f000 fe43 	bl	800aedc <__multadd>
 800a256:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a258:	4681      	mov	r9, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 8172 	beq.w	800a544 <_dtoa_r+0xb4c>
 800a260:	2300      	movs	r3, #0
 800a262:	4629      	mov	r1, r5
 800a264:	220a      	movs	r2, #10
 800a266:	4658      	mov	r0, fp
 800a268:	f000 fe38 	bl	800aedc <__multadd>
 800a26c:	9b00      	ldr	r3, [sp, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	4605      	mov	r5, r0
 800a272:	dc67      	bgt.n	800a344 <_dtoa_r+0x94c>
 800a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a276:	2b02      	cmp	r3, #2
 800a278:	dc41      	bgt.n	800a2fe <_dtoa_r+0x906>
 800a27a:	e063      	b.n	800a344 <_dtoa_r+0x94c>
 800a27c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a27e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a282:	e746      	b.n	800a112 <_dtoa_r+0x71a>
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	1e5c      	subs	r4, r3, #1
 800a288:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a28a:	42a3      	cmp	r3, r4
 800a28c:	bfbf      	itttt	lt
 800a28e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a290:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a292:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a294:	1ae3      	sublt	r3, r4, r3
 800a296:	bfb4      	ite	lt
 800a298:	18d2      	addlt	r2, r2, r3
 800a29a:	1b1c      	subge	r4, r3, r4
 800a29c:	9b07      	ldr	r3, [sp, #28]
 800a29e:	bfbc      	itt	lt
 800a2a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a2a2:	2400      	movlt	r4, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb5      	itete	lt
 800a2a8:	eba8 0603 	sublt.w	r6, r8, r3
 800a2ac:	9b07      	ldrge	r3, [sp, #28]
 800a2ae:	2300      	movlt	r3, #0
 800a2b0:	4646      	movge	r6, r8
 800a2b2:	e730      	b.n	800a116 <_dtoa_r+0x71e>
 800a2b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2b8:	4646      	mov	r6, r8
 800a2ba:	e735      	b.n	800a128 <_dtoa_r+0x730>
 800a2bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2be:	e75c      	b.n	800a17a <_dtoa_r+0x782>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	e788      	b.n	800a1d6 <_dtoa_r+0x7de>
 800a2c4:	3fe00000 	.word	0x3fe00000
 800a2c8:	40240000 	.word	0x40240000
 800a2cc:	40140000 	.word	0x40140000
 800a2d0:	9b02      	ldr	r3, [sp, #8]
 800a2d2:	e780      	b.n	800a1d6 <_dtoa_r+0x7de>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2d8:	e782      	b.n	800a1e0 <_dtoa_r+0x7e8>
 800a2da:	d099      	beq.n	800a210 <_dtoa_r+0x818>
 800a2dc:	9a08      	ldr	r2, [sp, #32]
 800a2de:	331c      	adds	r3, #28
 800a2e0:	441a      	add	r2, r3
 800a2e2:	4498      	add	r8, r3
 800a2e4:	441e      	add	r6, r3
 800a2e6:	9208      	str	r2, [sp, #32]
 800a2e8:	e792      	b.n	800a210 <_dtoa_r+0x818>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	e7f6      	b.n	800a2dc <_dtoa_r+0x8e4>
 800a2ee:	9b07      	ldr	r3, [sp, #28]
 800a2f0:	9704      	str	r7, [sp, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dc20      	bgt.n	800a338 <_dtoa_r+0x940>
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2fa:	2b02      	cmp	r3, #2
 800a2fc:	dd1e      	ble.n	800a33c <_dtoa_r+0x944>
 800a2fe:	9b00      	ldr	r3, [sp, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	f47f aec0 	bne.w	800a086 <_dtoa_r+0x68e>
 800a306:	4621      	mov	r1, r4
 800a308:	2205      	movs	r2, #5
 800a30a:	4658      	mov	r0, fp
 800a30c:	f000 fde6 	bl	800aedc <__multadd>
 800a310:	4601      	mov	r1, r0
 800a312:	4604      	mov	r4, r0
 800a314:	4648      	mov	r0, r9
 800a316:	f001 f843 	bl	800b3a0 <__mcmp>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	f77f aeb3 	ble.w	800a086 <_dtoa_r+0x68e>
 800a320:	4656      	mov	r6, sl
 800a322:	2331      	movs	r3, #49	@ 0x31
 800a324:	f806 3b01 	strb.w	r3, [r6], #1
 800a328:	9b04      	ldr	r3, [sp, #16]
 800a32a:	3301      	adds	r3, #1
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	e6ae      	b.n	800a08e <_dtoa_r+0x696>
 800a330:	9c07      	ldr	r4, [sp, #28]
 800a332:	9704      	str	r7, [sp, #16]
 800a334:	4625      	mov	r5, r4
 800a336:	e7f3      	b.n	800a320 <_dtoa_r+0x928>
 800a338:	9b07      	ldr	r3, [sp, #28]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 8104 	beq.w	800a54c <_dtoa_r+0xb54>
 800a344:	2e00      	cmp	r6, #0
 800a346:	dd05      	ble.n	800a354 <_dtoa_r+0x95c>
 800a348:	4629      	mov	r1, r5
 800a34a:	4632      	mov	r2, r6
 800a34c:	4658      	mov	r0, fp
 800a34e:	f000 ffbb 	bl	800b2c8 <__lshift>
 800a352:	4605      	mov	r5, r0
 800a354:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a356:	2b00      	cmp	r3, #0
 800a358:	d05a      	beq.n	800a410 <_dtoa_r+0xa18>
 800a35a:	6869      	ldr	r1, [r5, #4]
 800a35c:	4658      	mov	r0, fp
 800a35e:	f000 fd5b 	bl	800ae18 <_Balloc>
 800a362:	4606      	mov	r6, r0
 800a364:	b928      	cbnz	r0, 800a372 <_dtoa_r+0x97a>
 800a366:	4b84      	ldr	r3, [pc, #528]	@ (800a578 <_dtoa_r+0xb80>)
 800a368:	4602      	mov	r2, r0
 800a36a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a36e:	f7ff bb5a 	b.w	8009a26 <_dtoa_r+0x2e>
 800a372:	692a      	ldr	r2, [r5, #16]
 800a374:	3202      	adds	r2, #2
 800a376:	0092      	lsls	r2, r2, #2
 800a378:	f105 010c 	add.w	r1, r5, #12
 800a37c:	300c      	adds	r0, #12
 800a37e:	f7ff fa92 	bl	80098a6 <memcpy>
 800a382:	2201      	movs	r2, #1
 800a384:	4631      	mov	r1, r6
 800a386:	4658      	mov	r0, fp
 800a388:	f000 ff9e 	bl	800b2c8 <__lshift>
 800a38c:	f10a 0301 	add.w	r3, sl, #1
 800a390:	9307      	str	r3, [sp, #28]
 800a392:	9b00      	ldr	r3, [sp, #0]
 800a394:	4453      	add	r3, sl
 800a396:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a398:	9b02      	ldr	r3, [sp, #8]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	462f      	mov	r7, r5
 800a3a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3a2:	4605      	mov	r5, r0
 800a3a4:	9b07      	ldr	r3, [sp, #28]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	4648      	mov	r0, r9
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	f7ff fa99 	bl	80098e4 <quorem>
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	9002      	str	r0, [sp, #8]
 800a3b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3ba:	4648      	mov	r0, r9
 800a3bc:	f000 fff0 	bl	800b3a0 <__mcmp>
 800a3c0:	462a      	mov	r2, r5
 800a3c2:	9008      	str	r0, [sp, #32]
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	f001 f806 	bl	800b3d8 <__mdiff>
 800a3cc:	68c2      	ldr	r2, [r0, #12]
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	bb02      	cbnz	r2, 800a414 <_dtoa_r+0xa1c>
 800a3d2:	4601      	mov	r1, r0
 800a3d4:	4648      	mov	r0, r9
 800a3d6:	f000 ffe3 	bl	800b3a0 <__mcmp>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4631      	mov	r1, r6
 800a3de:	4658      	mov	r0, fp
 800a3e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3e2:	f000 fd59 	bl	800ae98 <_Bfree>
 800a3e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3ea:	9e07      	ldr	r6, [sp, #28]
 800a3ec:	ea43 0102 	orr.w	r1, r3, r2
 800a3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f2:	4319      	orrs	r1, r3
 800a3f4:	d110      	bne.n	800a418 <_dtoa_r+0xa20>
 800a3f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3fa:	d029      	beq.n	800a450 <_dtoa_r+0xa58>
 800a3fc:	9b08      	ldr	r3, [sp, #32]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dd02      	ble.n	800a408 <_dtoa_r+0xa10>
 800a402:	9b02      	ldr	r3, [sp, #8]
 800a404:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a408:	9b00      	ldr	r3, [sp, #0]
 800a40a:	f883 8000 	strb.w	r8, [r3]
 800a40e:	e63f      	b.n	800a090 <_dtoa_r+0x698>
 800a410:	4628      	mov	r0, r5
 800a412:	e7bb      	b.n	800a38c <_dtoa_r+0x994>
 800a414:	2201      	movs	r2, #1
 800a416:	e7e1      	b.n	800a3dc <_dtoa_r+0x9e4>
 800a418:	9b08      	ldr	r3, [sp, #32]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	db04      	blt.n	800a428 <_dtoa_r+0xa30>
 800a41e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a420:	430b      	orrs	r3, r1
 800a422:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a424:	430b      	orrs	r3, r1
 800a426:	d120      	bne.n	800a46a <_dtoa_r+0xa72>
 800a428:	2a00      	cmp	r2, #0
 800a42a:	dded      	ble.n	800a408 <_dtoa_r+0xa10>
 800a42c:	4649      	mov	r1, r9
 800a42e:	2201      	movs	r2, #1
 800a430:	4658      	mov	r0, fp
 800a432:	f000 ff49 	bl	800b2c8 <__lshift>
 800a436:	4621      	mov	r1, r4
 800a438:	4681      	mov	r9, r0
 800a43a:	f000 ffb1 	bl	800b3a0 <__mcmp>
 800a43e:	2800      	cmp	r0, #0
 800a440:	dc03      	bgt.n	800a44a <_dtoa_r+0xa52>
 800a442:	d1e1      	bne.n	800a408 <_dtoa_r+0xa10>
 800a444:	f018 0f01 	tst.w	r8, #1
 800a448:	d0de      	beq.n	800a408 <_dtoa_r+0xa10>
 800a44a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a44e:	d1d8      	bne.n	800a402 <_dtoa_r+0xa0a>
 800a450:	9a00      	ldr	r2, [sp, #0]
 800a452:	2339      	movs	r3, #57	@ 0x39
 800a454:	7013      	strb	r3, [r2, #0]
 800a456:	4633      	mov	r3, r6
 800a458:	461e      	mov	r6, r3
 800a45a:	3b01      	subs	r3, #1
 800a45c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a460:	2a39      	cmp	r2, #57	@ 0x39
 800a462:	d052      	beq.n	800a50a <_dtoa_r+0xb12>
 800a464:	3201      	adds	r2, #1
 800a466:	701a      	strb	r2, [r3, #0]
 800a468:	e612      	b.n	800a090 <_dtoa_r+0x698>
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	dd07      	ble.n	800a47e <_dtoa_r+0xa86>
 800a46e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a472:	d0ed      	beq.n	800a450 <_dtoa_r+0xa58>
 800a474:	9a00      	ldr	r2, [sp, #0]
 800a476:	f108 0301 	add.w	r3, r8, #1
 800a47a:	7013      	strb	r3, [r2, #0]
 800a47c:	e608      	b.n	800a090 <_dtoa_r+0x698>
 800a47e:	9b07      	ldr	r3, [sp, #28]
 800a480:	9a07      	ldr	r2, [sp, #28]
 800a482:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a488:	4293      	cmp	r3, r2
 800a48a:	d028      	beq.n	800a4de <_dtoa_r+0xae6>
 800a48c:	4649      	mov	r1, r9
 800a48e:	2300      	movs	r3, #0
 800a490:	220a      	movs	r2, #10
 800a492:	4658      	mov	r0, fp
 800a494:	f000 fd22 	bl	800aedc <__multadd>
 800a498:	42af      	cmp	r7, r5
 800a49a:	4681      	mov	r9, r0
 800a49c:	f04f 0300 	mov.w	r3, #0
 800a4a0:	f04f 020a 	mov.w	r2, #10
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	4658      	mov	r0, fp
 800a4a8:	d107      	bne.n	800a4ba <_dtoa_r+0xac2>
 800a4aa:	f000 fd17 	bl	800aedc <__multadd>
 800a4ae:	4607      	mov	r7, r0
 800a4b0:	4605      	mov	r5, r0
 800a4b2:	9b07      	ldr	r3, [sp, #28]
 800a4b4:	3301      	adds	r3, #1
 800a4b6:	9307      	str	r3, [sp, #28]
 800a4b8:	e774      	b.n	800a3a4 <_dtoa_r+0x9ac>
 800a4ba:	f000 fd0f 	bl	800aedc <__multadd>
 800a4be:	4629      	mov	r1, r5
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	220a      	movs	r2, #10
 800a4c6:	4658      	mov	r0, fp
 800a4c8:	f000 fd08 	bl	800aedc <__multadd>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	e7f0      	b.n	800a4b2 <_dtoa_r+0xaba>
 800a4d0:	9b00      	ldr	r3, [sp, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	bfcc      	ite	gt
 800a4d6:	461e      	movgt	r6, r3
 800a4d8:	2601      	movle	r6, #1
 800a4da:	4456      	add	r6, sl
 800a4dc:	2700      	movs	r7, #0
 800a4de:	4649      	mov	r1, r9
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	4658      	mov	r0, fp
 800a4e4:	f000 fef0 	bl	800b2c8 <__lshift>
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	4681      	mov	r9, r0
 800a4ec:	f000 ff58 	bl	800b3a0 <__mcmp>
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	dcb0      	bgt.n	800a456 <_dtoa_r+0xa5e>
 800a4f4:	d102      	bne.n	800a4fc <_dtoa_r+0xb04>
 800a4f6:	f018 0f01 	tst.w	r8, #1
 800a4fa:	d1ac      	bne.n	800a456 <_dtoa_r+0xa5e>
 800a4fc:	4633      	mov	r3, r6
 800a4fe:	461e      	mov	r6, r3
 800a500:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a504:	2a30      	cmp	r2, #48	@ 0x30
 800a506:	d0fa      	beq.n	800a4fe <_dtoa_r+0xb06>
 800a508:	e5c2      	b.n	800a090 <_dtoa_r+0x698>
 800a50a:	459a      	cmp	sl, r3
 800a50c:	d1a4      	bne.n	800a458 <_dtoa_r+0xa60>
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	2331      	movs	r3, #49	@ 0x31
 800a516:	f88a 3000 	strb.w	r3, [sl]
 800a51a:	e5b9      	b.n	800a090 <_dtoa_r+0x698>
 800a51c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a51e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a57c <_dtoa_r+0xb84>
 800a522:	b11b      	cbz	r3, 800a52c <_dtoa_r+0xb34>
 800a524:	f10a 0308 	add.w	r3, sl, #8
 800a528:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a52a:	6013      	str	r3, [r2, #0]
 800a52c:	4650      	mov	r0, sl
 800a52e:	b019      	add	sp, #100	@ 0x64
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a536:	2b01      	cmp	r3, #1
 800a538:	f77f ae37 	ble.w	800a1aa <_dtoa_r+0x7b2>
 800a53c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a53e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a540:	2001      	movs	r0, #1
 800a542:	e655      	b.n	800a1f0 <_dtoa_r+0x7f8>
 800a544:	9b00      	ldr	r3, [sp, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f77f aed6 	ble.w	800a2f8 <_dtoa_r+0x900>
 800a54c:	4656      	mov	r6, sl
 800a54e:	4621      	mov	r1, r4
 800a550:	4648      	mov	r0, r9
 800a552:	f7ff f9c7 	bl	80098e4 <quorem>
 800a556:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a55a:	f806 8b01 	strb.w	r8, [r6], #1
 800a55e:	9b00      	ldr	r3, [sp, #0]
 800a560:	eba6 020a 	sub.w	r2, r6, sl
 800a564:	4293      	cmp	r3, r2
 800a566:	ddb3      	ble.n	800a4d0 <_dtoa_r+0xad8>
 800a568:	4649      	mov	r1, r9
 800a56a:	2300      	movs	r3, #0
 800a56c:	220a      	movs	r2, #10
 800a56e:	4658      	mov	r0, fp
 800a570:	f000 fcb4 	bl	800aedc <__multadd>
 800a574:	4681      	mov	r9, r0
 800a576:	e7ea      	b.n	800a54e <_dtoa_r+0xb56>
 800a578:	0800c4b9 	.word	0x0800c4b9
 800a57c:	0800c43d 	.word	0x0800c43d

0800a580 <_free_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4605      	mov	r5, r0
 800a584:	2900      	cmp	r1, #0
 800a586:	d041      	beq.n	800a60c <_free_r+0x8c>
 800a588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a58c:	1f0c      	subs	r4, r1, #4
 800a58e:	2b00      	cmp	r3, #0
 800a590:	bfb8      	it	lt
 800a592:	18e4      	addlt	r4, r4, r3
 800a594:	f000 fc34 	bl	800ae00 <__malloc_lock>
 800a598:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <_free_r+0x90>)
 800a59a:	6813      	ldr	r3, [r2, #0]
 800a59c:	b933      	cbnz	r3, 800a5ac <_free_r+0x2c>
 800a59e:	6063      	str	r3, [r4, #4]
 800a5a0:	6014      	str	r4, [r2, #0]
 800a5a2:	4628      	mov	r0, r5
 800a5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a8:	f000 bc30 	b.w	800ae0c <__malloc_unlock>
 800a5ac:	42a3      	cmp	r3, r4
 800a5ae:	d908      	bls.n	800a5c2 <_free_r+0x42>
 800a5b0:	6820      	ldr	r0, [r4, #0]
 800a5b2:	1821      	adds	r1, r4, r0
 800a5b4:	428b      	cmp	r3, r1
 800a5b6:	bf01      	itttt	eq
 800a5b8:	6819      	ldreq	r1, [r3, #0]
 800a5ba:	685b      	ldreq	r3, [r3, #4]
 800a5bc:	1809      	addeq	r1, r1, r0
 800a5be:	6021      	streq	r1, [r4, #0]
 800a5c0:	e7ed      	b.n	800a59e <_free_r+0x1e>
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	b10b      	cbz	r3, 800a5cc <_free_r+0x4c>
 800a5c8:	42a3      	cmp	r3, r4
 800a5ca:	d9fa      	bls.n	800a5c2 <_free_r+0x42>
 800a5cc:	6811      	ldr	r1, [r2, #0]
 800a5ce:	1850      	adds	r0, r2, r1
 800a5d0:	42a0      	cmp	r0, r4
 800a5d2:	d10b      	bne.n	800a5ec <_free_r+0x6c>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	4401      	add	r1, r0
 800a5d8:	1850      	adds	r0, r2, r1
 800a5da:	4283      	cmp	r3, r0
 800a5dc:	6011      	str	r1, [r2, #0]
 800a5de:	d1e0      	bne.n	800a5a2 <_free_r+0x22>
 800a5e0:	6818      	ldr	r0, [r3, #0]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	6053      	str	r3, [r2, #4]
 800a5e6:	4408      	add	r0, r1
 800a5e8:	6010      	str	r0, [r2, #0]
 800a5ea:	e7da      	b.n	800a5a2 <_free_r+0x22>
 800a5ec:	d902      	bls.n	800a5f4 <_free_r+0x74>
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	602b      	str	r3, [r5, #0]
 800a5f2:	e7d6      	b.n	800a5a2 <_free_r+0x22>
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	1821      	adds	r1, r4, r0
 800a5f8:	428b      	cmp	r3, r1
 800a5fa:	bf04      	itt	eq
 800a5fc:	6819      	ldreq	r1, [r3, #0]
 800a5fe:	685b      	ldreq	r3, [r3, #4]
 800a600:	6063      	str	r3, [r4, #4]
 800a602:	bf04      	itt	eq
 800a604:	1809      	addeq	r1, r1, r0
 800a606:	6021      	streq	r1, [r4, #0]
 800a608:	6054      	str	r4, [r2, #4]
 800a60a:	e7ca      	b.n	800a5a2 <_free_r+0x22>
 800a60c:	bd38      	pop	{r3, r4, r5, pc}
 800a60e:	bf00      	nop
 800a610:	2000f020 	.word	0x2000f020

0800a614 <rshift>:
 800a614:	6903      	ldr	r3, [r0, #16]
 800a616:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a61a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a61e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a622:	f100 0414 	add.w	r4, r0, #20
 800a626:	dd45      	ble.n	800a6b4 <rshift+0xa0>
 800a628:	f011 011f 	ands.w	r1, r1, #31
 800a62c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a630:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a634:	d10c      	bne.n	800a650 <rshift+0x3c>
 800a636:	f100 0710 	add.w	r7, r0, #16
 800a63a:	4629      	mov	r1, r5
 800a63c:	42b1      	cmp	r1, r6
 800a63e:	d334      	bcc.n	800a6aa <rshift+0x96>
 800a640:	1a9b      	subs	r3, r3, r2
 800a642:	009b      	lsls	r3, r3, #2
 800a644:	1eea      	subs	r2, r5, #3
 800a646:	4296      	cmp	r6, r2
 800a648:	bf38      	it	cc
 800a64a:	2300      	movcc	r3, #0
 800a64c:	4423      	add	r3, r4
 800a64e:	e015      	b.n	800a67c <rshift+0x68>
 800a650:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a654:	f1c1 0820 	rsb	r8, r1, #32
 800a658:	40cf      	lsrs	r7, r1
 800a65a:	f105 0e04 	add.w	lr, r5, #4
 800a65e:	46a1      	mov	r9, r4
 800a660:	4576      	cmp	r6, lr
 800a662:	46f4      	mov	ip, lr
 800a664:	d815      	bhi.n	800a692 <rshift+0x7e>
 800a666:	1a9a      	subs	r2, r3, r2
 800a668:	0092      	lsls	r2, r2, #2
 800a66a:	3a04      	subs	r2, #4
 800a66c:	3501      	adds	r5, #1
 800a66e:	42ae      	cmp	r6, r5
 800a670:	bf38      	it	cc
 800a672:	2200      	movcc	r2, #0
 800a674:	18a3      	adds	r3, r4, r2
 800a676:	50a7      	str	r7, [r4, r2]
 800a678:	b107      	cbz	r7, 800a67c <rshift+0x68>
 800a67a:	3304      	adds	r3, #4
 800a67c:	1b1a      	subs	r2, r3, r4
 800a67e:	42a3      	cmp	r3, r4
 800a680:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a684:	bf08      	it	eq
 800a686:	2300      	moveq	r3, #0
 800a688:	6102      	str	r2, [r0, #16]
 800a68a:	bf08      	it	eq
 800a68c:	6143      	streq	r3, [r0, #20]
 800a68e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a692:	f8dc c000 	ldr.w	ip, [ip]
 800a696:	fa0c fc08 	lsl.w	ip, ip, r8
 800a69a:	ea4c 0707 	orr.w	r7, ip, r7
 800a69e:	f849 7b04 	str.w	r7, [r9], #4
 800a6a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a6a6:	40cf      	lsrs	r7, r1
 800a6a8:	e7da      	b.n	800a660 <rshift+0x4c>
 800a6aa:	f851 cb04 	ldr.w	ip, [r1], #4
 800a6ae:	f847 cf04 	str.w	ip, [r7, #4]!
 800a6b2:	e7c3      	b.n	800a63c <rshift+0x28>
 800a6b4:	4623      	mov	r3, r4
 800a6b6:	e7e1      	b.n	800a67c <rshift+0x68>

0800a6b8 <__hexdig_fun>:
 800a6b8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a6bc:	2b09      	cmp	r3, #9
 800a6be:	d802      	bhi.n	800a6c6 <__hexdig_fun+0xe>
 800a6c0:	3820      	subs	r0, #32
 800a6c2:	b2c0      	uxtb	r0, r0
 800a6c4:	4770      	bx	lr
 800a6c6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a6ca:	2b05      	cmp	r3, #5
 800a6cc:	d801      	bhi.n	800a6d2 <__hexdig_fun+0x1a>
 800a6ce:	3847      	subs	r0, #71	@ 0x47
 800a6d0:	e7f7      	b.n	800a6c2 <__hexdig_fun+0xa>
 800a6d2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a6d6:	2b05      	cmp	r3, #5
 800a6d8:	d801      	bhi.n	800a6de <__hexdig_fun+0x26>
 800a6da:	3827      	subs	r0, #39	@ 0x27
 800a6dc:	e7f1      	b.n	800a6c2 <__hexdig_fun+0xa>
 800a6de:	2000      	movs	r0, #0
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <__gethex>:
 800a6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	b085      	sub	sp, #20
 800a6ea:	468a      	mov	sl, r1
 800a6ec:	9302      	str	r3, [sp, #8]
 800a6ee:	680b      	ldr	r3, [r1, #0]
 800a6f0:	9001      	str	r0, [sp, #4]
 800a6f2:	4690      	mov	r8, r2
 800a6f4:	1c9c      	adds	r4, r3, #2
 800a6f6:	46a1      	mov	r9, r4
 800a6f8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a6fc:	2830      	cmp	r0, #48	@ 0x30
 800a6fe:	d0fa      	beq.n	800a6f6 <__gethex+0x12>
 800a700:	eba9 0303 	sub.w	r3, r9, r3
 800a704:	f1a3 0b02 	sub.w	fp, r3, #2
 800a708:	f7ff ffd6 	bl	800a6b8 <__hexdig_fun>
 800a70c:	4605      	mov	r5, r0
 800a70e:	2800      	cmp	r0, #0
 800a710:	d168      	bne.n	800a7e4 <__gethex+0x100>
 800a712:	49a0      	ldr	r1, [pc, #640]	@ (800a994 <__gethex+0x2b0>)
 800a714:	2201      	movs	r2, #1
 800a716:	4648      	mov	r0, r9
 800a718:	f7ff f83b 	bl	8009792 <strncmp>
 800a71c:	4607      	mov	r7, r0
 800a71e:	2800      	cmp	r0, #0
 800a720:	d167      	bne.n	800a7f2 <__gethex+0x10e>
 800a722:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a726:	4626      	mov	r6, r4
 800a728:	f7ff ffc6 	bl	800a6b8 <__hexdig_fun>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d062      	beq.n	800a7f6 <__gethex+0x112>
 800a730:	4623      	mov	r3, r4
 800a732:	7818      	ldrb	r0, [r3, #0]
 800a734:	2830      	cmp	r0, #48	@ 0x30
 800a736:	4699      	mov	r9, r3
 800a738:	f103 0301 	add.w	r3, r3, #1
 800a73c:	d0f9      	beq.n	800a732 <__gethex+0x4e>
 800a73e:	f7ff ffbb 	bl	800a6b8 <__hexdig_fun>
 800a742:	fab0 f580 	clz	r5, r0
 800a746:	096d      	lsrs	r5, r5, #5
 800a748:	f04f 0b01 	mov.w	fp, #1
 800a74c:	464a      	mov	r2, r9
 800a74e:	4616      	mov	r6, r2
 800a750:	3201      	adds	r2, #1
 800a752:	7830      	ldrb	r0, [r6, #0]
 800a754:	f7ff ffb0 	bl	800a6b8 <__hexdig_fun>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d1f8      	bne.n	800a74e <__gethex+0x6a>
 800a75c:	498d      	ldr	r1, [pc, #564]	@ (800a994 <__gethex+0x2b0>)
 800a75e:	2201      	movs	r2, #1
 800a760:	4630      	mov	r0, r6
 800a762:	f7ff f816 	bl	8009792 <strncmp>
 800a766:	2800      	cmp	r0, #0
 800a768:	d13f      	bne.n	800a7ea <__gethex+0x106>
 800a76a:	b944      	cbnz	r4, 800a77e <__gethex+0x9a>
 800a76c:	1c74      	adds	r4, r6, #1
 800a76e:	4622      	mov	r2, r4
 800a770:	4616      	mov	r6, r2
 800a772:	3201      	adds	r2, #1
 800a774:	7830      	ldrb	r0, [r6, #0]
 800a776:	f7ff ff9f 	bl	800a6b8 <__hexdig_fun>
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d1f8      	bne.n	800a770 <__gethex+0x8c>
 800a77e:	1ba4      	subs	r4, r4, r6
 800a780:	00a7      	lsls	r7, r4, #2
 800a782:	7833      	ldrb	r3, [r6, #0]
 800a784:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a788:	2b50      	cmp	r3, #80	@ 0x50
 800a78a:	d13e      	bne.n	800a80a <__gethex+0x126>
 800a78c:	7873      	ldrb	r3, [r6, #1]
 800a78e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a790:	d033      	beq.n	800a7fa <__gethex+0x116>
 800a792:	2b2d      	cmp	r3, #45	@ 0x2d
 800a794:	d034      	beq.n	800a800 <__gethex+0x11c>
 800a796:	1c71      	adds	r1, r6, #1
 800a798:	2400      	movs	r4, #0
 800a79a:	7808      	ldrb	r0, [r1, #0]
 800a79c:	f7ff ff8c 	bl	800a6b8 <__hexdig_fun>
 800a7a0:	1e43      	subs	r3, r0, #1
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	2b18      	cmp	r3, #24
 800a7a6:	d830      	bhi.n	800a80a <__gethex+0x126>
 800a7a8:	f1a0 0210 	sub.w	r2, r0, #16
 800a7ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a7b0:	f7ff ff82 	bl	800a6b8 <__hexdig_fun>
 800a7b4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a7b8:	fa5f fc8c 	uxtb.w	ip, ip
 800a7bc:	f1bc 0f18 	cmp.w	ip, #24
 800a7c0:	f04f 030a 	mov.w	r3, #10
 800a7c4:	d91e      	bls.n	800a804 <__gethex+0x120>
 800a7c6:	b104      	cbz	r4, 800a7ca <__gethex+0xe6>
 800a7c8:	4252      	negs	r2, r2
 800a7ca:	4417      	add	r7, r2
 800a7cc:	f8ca 1000 	str.w	r1, [sl]
 800a7d0:	b1ed      	cbz	r5, 800a80e <__gethex+0x12a>
 800a7d2:	f1bb 0f00 	cmp.w	fp, #0
 800a7d6:	bf0c      	ite	eq
 800a7d8:	2506      	moveq	r5, #6
 800a7da:	2500      	movne	r5, #0
 800a7dc:	4628      	mov	r0, r5
 800a7de:	b005      	add	sp, #20
 800a7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e4:	2500      	movs	r5, #0
 800a7e6:	462c      	mov	r4, r5
 800a7e8:	e7b0      	b.n	800a74c <__gethex+0x68>
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	d1c7      	bne.n	800a77e <__gethex+0x9a>
 800a7ee:	4627      	mov	r7, r4
 800a7f0:	e7c7      	b.n	800a782 <__gethex+0x9e>
 800a7f2:	464e      	mov	r6, r9
 800a7f4:	462f      	mov	r7, r5
 800a7f6:	2501      	movs	r5, #1
 800a7f8:	e7c3      	b.n	800a782 <__gethex+0x9e>
 800a7fa:	2400      	movs	r4, #0
 800a7fc:	1cb1      	adds	r1, r6, #2
 800a7fe:	e7cc      	b.n	800a79a <__gethex+0xb6>
 800a800:	2401      	movs	r4, #1
 800a802:	e7fb      	b.n	800a7fc <__gethex+0x118>
 800a804:	fb03 0002 	mla	r0, r3, r2, r0
 800a808:	e7ce      	b.n	800a7a8 <__gethex+0xc4>
 800a80a:	4631      	mov	r1, r6
 800a80c:	e7de      	b.n	800a7cc <__gethex+0xe8>
 800a80e:	eba6 0309 	sub.w	r3, r6, r9
 800a812:	3b01      	subs	r3, #1
 800a814:	4629      	mov	r1, r5
 800a816:	2b07      	cmp	r3, #7
 800a818:	dc0a      	bgt.n	800a830 <__gethex+0x14c>
 800a81a:	9801      	ldr	r0, [sp, #4]
 800a81c:	f000 fafc 	bl	800ae18 <_Balloc>
 800a820:	4604      	mov	r4, r0
 800a822:	b940      	cbnz	r0, 800a836 <__gethex+0x152>
 800a824:	4b5c      	ldr	r3, [pc, #368]	@ (800a998 <__gethex+0x2b4>)
 800a826:	4602      	mov	r2, r0
 800a828:	21e4      	movs	r1, #228	@ 0xe4
 800a82a:	485c      	ldr	r0, [pc, #368]	@ (800a99c <__gethex+0x2b8>)
 800a82c:	f001 f9e0 	bl	800bbf0 <__assert_func>
 800a830:	3101      	adds	r1, #1
 800a832:	105b      	asrs	r3, r3, #1
 800a834:	e7ef      	b.n	800a816 <__gethex+0x132>
 800a836:	f100 0a14 	add.w	sl, r0, #20
 800a83a:	2300      	movs	r3, #0
 800a83c:	4655      	mov	r5, sl
 800a83e:	469b      	mov	fp, r3
 800a840:	45b1      	cmp	r9, r6
 800a842:	d337      	bcc.n	800a8b4 <__gethex+0x1d0>
 800a844:	f845 bb04 	str.w	fp, [r5], #4
 800a848:	eba5 050a 	sub.w	r5, r5, sl
 800a84c:	10ad      	asrs	r5, r5, #2
 800a84e:	6125      	str	r5, [r4, #16]
 800a850:	4658      	mov	r0, fp
 800a852:	f000 fbd3 	bl	800affc <__hi0bits>
 800a856:	016d      	lsls	r5, r5, #5
 800a858:	f8d8 6000 	ldr.w	r6, [r8]
 800a85c:	1a2d      	subs	r5, r5, r0
 800a85e:	42b5      	cmp	r5, r6
 800a860:	dd54      	ble.n	800a90c <__gethex+0x228>
 800a862:	1bad      	subs	r5, r5, r6
 800a864:	4629      	mov	r1, r5
 800a866:	4620      	mov	r0, r4
 800a868:	f000 ff67 	bl	800b73a <__any_on>
 800a86c:	4681      	mov	r9, r0
 800a86e:	b178      	cbz	r0, 800a890 <__gethex+0x1ac>
 800a870:	1e6b      	subs	r3, r5, #1
 800a872:	1159      	asrs	r1, r3, #5
 800a874:	f003 021f 	and.w	r2, r3, #31
 800a878:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a87c:	f04f 0901 	mov.w	r9, #1
 800a880:	fa09 f202 	lsl.w	r2, r9, r2
 800a884:	420a      	tst	r2, r1
 800a886:	d003      	beq.n	800a890 <__gethex+0x1ac>
 800a888:	454b      	cmp	r3, r9
 800a88a:	dc36      	bgt.n	800a8fa <__gethex+0x216>
 800a88c:	f04f 0902 	mov.w	r9, #2
 800a890:	4629      	mov	r1, r5
 800a892:	4620      	mov	r0, r4
 800a894:	f7ff febe 	bl	800a614 <rshift>
 800a898:	442f      	add	r7, r5
 800a89a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a89e:	42bb      	cmp	r3, r7
 800a8a0:	da42      	bge.n	800a928 <__gethex+0x244>
 800a8a2:	9801      	ldr	r0, [sp, #4]
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	f000 faf7 	bl	800ae98 <_Bfree>
 800a8aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	25a3      	movs	r5, #163	@ 0xa3
 800a8b2:	e793      	b.n	800a7dc <__gethex+0xf8>
 800a8b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a8b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a8ba:	d012      	beq.n	800a8e2 <__gethex+0x1fe>
 800a8bc:	2b20      	cmp	r3, #32
 800a8be:	d104      	bne.n	800a8ca <__gethex+0x1e6>
 800a8c0:	f845 bb04 	str.w	fp, [r5], #4
 800a8c4:	f04f 0b00 	mov.w	fp, #0
 800a8c8:	465b      	mov	r3, fp
 800a8ca:	7830      	ldrb	r0, [r6, #0]
 800a8cc:	9303      	str	r3, [sp, #12]
 800a8ce:	f7ff fef3 	bl	800a6b8 <__hexdig_fun>
 800a8d2:	9b03      	ldr	r3, [sp, #12]
 800a8d4:	f000 000f 	and.w	r0, r0, #15
 800a8d8:	4098      	lsls	r0, r3
 800a8da:	ea4b 0b00 	orr.w	fp, fp, r0
 800a8de:	3304      	adds	r3, #4
 800a8e0:	e7ae      	b.n	800a840 <__gethex+0x15c>
 800a8e2:	45b1      	cmp	r9, r6
 800a8e4:	d8ea      	bhi.n	800a8bc <__gethex+0x1d8>
 800a8e6:	492b      	ldr	r1, [pc, #172]	@ (800a994 <__gethex+0x2b0>)
 800a8e8:	9303      	str	r3, [sp, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f7fe ff50 	bl	8009792 <strncmp>
 800a8f2:	9b03      	ldr	r3, [sp, #12]
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d1e1      	bne.n	800a8bc <__gethex+0x1d8>
 800a8f8:	e7a2      	b.n	800a840 <__gethex+0x15c>
 800a8fa:	1ea9      	subs	r1, r5, #2
 800a8fc:	4620      	mov	r0, r4
 800a8fe:	f000 ff1c 	bl	800b73a <__any_on>
 800a902:	2800      	cmp	r0, #0
 800a904:	d0c2      	beq.n	800a88c <__gethex+0x1a8>
 800a906:	f04f 0903 	mov.w	r9, #3
 800a90a:	e7c1      	b.n	800a890 <__gethex+0x1ac>
 800a90c:	da09      	bge.n	800a922 <__gethex+0x23e>
 800a90e:	1b75      	subs	r5, r6, r5
 800a910:	4621      	mov	r1, r4
 800a912:	9801      	ldr	r0, [sp, #4]
 800a914:	462a      	mov	r2, r5
 800a916:	f000 fcd7 	bl	800b2c8 <__lshift>
 800a91a:	1b7f      	subs	r7, r7, r5
 800a91c:	4604      	mov	r4, r0
 800a91e:	f100 0a14 	add.w	sl, r0, #20
 800a922:	f04f 0900 	mov.w	r9, #0
 800a926:	e7b8      	b.n	800a89a <__gethex+0x1b6>
 800a928:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a92c:	42bd      	cmp	r5, r7
 800a92e:	dd6f      	ble.n	800aa10 <__gethex+0x32c>
 800a930:	1bed      	subs	r5, r5, r7
 800a932:	42ae      	cmp	r6, r5
 800a934:	dc34      	bgt.n	800a9a0 <__gethex+0x2bc>
 800a936:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a93a:	2b02      	cmp	r3, #2
 800a93c:	d022      	beq.n	800a984 <__gethex+0x2a0>
 800a93e:	2b03      	cmp	r3, #3
 800a940:	d024      	beq.n	800a98c <__gethex+0x2a8>
 800a942:	2b01      	cmp	r3, #1
 800a944:	d115      	bne.n	800a972 <__gethex+0x28e>
 800a946:	42ae      	cmp	r6, r5
 800a948:	d113      	bne.n	800a972 <__gethex+0x28e>
 800a94a:	2e01      	cmp	r6, #1
 800a94c:	d10b      	bne.n	800a966 <__gethex+0x282>
 800a94e:	9a02      	ldr	r2, [sp, #8]
 800a950:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a954:	6013      	str	r3, [r2, #0]
 800a956:	2301      	movs	r3, #1
 800a958:	6123      	str	r3, [r4, #16]
 800a95a:	f8ca 3000 	str.w	r3, [sl]
 800a95e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a960:	2562      	movs	r5, #98	@ 0x62
 800a962:	601c      	str	r4, [r3, #0]
 800a964:	e73a      	b.n	800a7dc <__gethex+0xf8>
 800a966:	1e71      	subs	r1, r6, #1
 800a968:	4620      	mov	r0, r4
 800a96a:	f000 fee6 	bl	800b73a <__any_on>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d1ed      	bne.n	800a94e <__gethex+0x26a>
 800a972:	9801      	ldr	r0, [sp, #4]
 800a974:	4621      	mov	r1, r4
 800a976:	f000 fa8f 	bl	800ae98 <_Bfree>
 800a97a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a97c:	2300      	movs	r3, #0
 800a97e:	6013      	str	r3, [r2, #0]
 800a980:	2550      	movs	r5, #80	@ 0x50
 800a982:	e72b      	b.n	800a7dc <__gethex+0xf8>
 800a984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d1f3      	bne.n	800a972 <__gethex+0x28e>
 800a98a:	e7e0      	b.n	800a94e <__gethex+0x26a>
 800a98c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1dd      	bne.n	800a94e <__gethex+0x26a>
 800a992:	e7ee      	b.n	800a972 <__gethex+0x28e>
 800a994:	0800c2ac 	.word	0x0800c2ac
 800a998:	0800c4b9 	.word	0x0800c4b9
 800a99c:	0800c4ca 	.word	0x0800c4ca
 800a9a0:	1e6f      	subs	r7, r5, #1
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	d130      	bne.n	800aa0a <__gethex+0x326>
 800a9a8:	b127      	cbz	r7, 800a9b4 <__gethex+0x2d0>
 800a9aa:	4639      	mov	r1, r7
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	f000 fec4 	bl	800b73a <__any_on>
 800a9b2:	4681      	mov	r9, r0
 800a9b4:	117a      	asrs	r2, r7, #5
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a9bc:	f007 071f 	and.w	r7, r7, #31
 800a9c0:	40bb      	lsls	r3, r7
 800a9c2:	4213      	tst	r3, r2
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	bf18      	it	ne
 800a9ca:	f049 0902 	orrne.w	r9, r9, #2
 800a9ce:	f7ff fe21 	bl	800a614 <rshift>
 800a9d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a9d6:	1b76      	subs	r6, r6, r5
 800a9d8:	2502      	movs	r5, #2
 800a9da:	f1b9 0f00 	cmp.w	r9, #0
 800a9de:	d047      	beq.n	800aa70 <__gethex+0x38c>
 800a9e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9e4:	2b02      	cmp	r3, #2
 800a9e6:	d015      	beq.n	800aa14 <__gethex+0x330>
 800a9e8:	2b03      	cmp	r3, #3
 800a9ea:	d017      	beq.n	800aa1c <__gethex+0x338>
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d109      	bne.n	800aa04 <__gethex+0x320>
 800a9f0:	f019 0f02 	tst.w	r9, #2
 800a9f4:	d006      	beq.n	800aa04 <__gethex+0x320>
 800a9f6:	f8da 3000 	ldr.w	r3, [sl]
 800a9fa:	ea49 0903 	orr.w	r9, r9, r3
 800a9fe:	f019 0f01 	tst.w	r9, #1
 800aa02:	d10e      	bne.n	800aa22 <__gethex+0x33e>
 800aa04:	f045 0510 	orr.w	r5, r5, #16
 800aa08:	e032      	b.n	800aa70 <__gethex+0x38c>
 800aa0a:	f04f 0901 	mov.w	r9, #1
 800aa0e:	e7d1      	b.n	800a9b4 <__gethex+0x2d0>
 800aa10:	2501      	movs	r5, #1
 800aa12:	e7e2      	b.n	800a9da <__gethex+0x2f6>
 800aa14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa16:	f1c3 0301 	rsb	r3, r3, #1
 800aa1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d0f0      	beq.n	800aa04 <__gethex+0x320>
 800aa22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aa26:	f104 0314 	add.w	r3, r4, #20
 800aa2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aa2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aa32:	f04f 0c00 	mov.w	ip, #0
 800aa36:	4618      	mov	r0, r3
 800aa38:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aa40:	d01b      	beq.n	800aa7a <__gethex+0x396>
 800aa42:	3201      	adds	r2, #1
 800aa44:	6002      	str	r2, [r0, #0]
 800aa46:	2d02      	cmp	r5, #2
 800aa48:	f104 0314 	add.w	r3, r4, #20
 800aa4c:	d13c      	bne.n	800aac8 <__gethex+0x3e4>
 800aa4e:	f8d8 2000 	ldr.w	r2, [r8]
 800aa52:	3a01      	subs	r2, #1
 800aa54:	42b2      	cmp	r2, r6
 800aa56:	d109      	bne.n	800aa6c <__gethex+0x388>
 800aa58:	1171      	asrs	r1, r6, #5
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aa60:	f006 061f 	and.w	r6, r6, #31
 800aa64:	fa02 f606 	lsl.w	r6, r2, r6
 800aa68:	421e      	tst	r6, r3
 800aa6a:	d13a      	bne.n	800aae2 <__gethex+0x3fe>
 800aa6c:	f045 0520 	orr.w	r5, r5, #32
 800aa70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa72:	601c      	str	r4, [r3, #0]
 800aa74:	9b02      	ldr	r3, [sp, #8]
 800aa76:	601f      	str	r7, [r3, #0]
 800aa78:	e6b0      	b.n	800a7dc <__gethex+0xf8>
 800aa7a:	4299      	cmp	r1, r3
 800aa7c:	f843 cc04 	str.w	ip, [r3, #-4]
 800aa80:	d8d9      	bhi.n	800aa36 <__gethex+0x352>
 800aa82:	68a3      	ldr	r3, [r4, #8]
 800aa84:	459b      	cmp	fp, r3
 800aa86:	db17      	blt.n	800aab8 <__gethex+0x3d4>
 800aa88:	6861      	ldr	r1, [r4, #4]
 800aa8a:	9801      	ldr	r0, [sp, #4]
 800aa8c:	3101      	adds	r1, #1
 800aa8e:	f000 f9c3 	bl	800ae18 <_Balloc>
 800aa92:	4681      	mov	r9, r0
 800aa94:	b918      	cbnz	r0, 800aa9e <__gethex+0x3ba>
 800aa96:	4b1a      	ldr	r3, [pc, #104]	@ (800ab00 <__gethex+0x41c>)
 800aa98:	4602      	mov	r2, r0
 800aa9a:	2184      	movs	r1, #132	@ 0x84
 800aa9c:	e6c5      	b.n	800a82a <__gethex+0x146>
 800aa9e:	6922      	ldr	r2, [r4, #16]
 800aaa0:	3202      	adds	r2, #2
 800aaa2:	f104 010c 	add.w	r1, r4, #12
 800aaa6:	0092      	lsls	r2, r2, #2
 800aaa8:	300c      	adds	r0, #12
 800aaaa:	f7fe fefc 	bl	80098a6 <memcpy>
 800aaae:	4621      	mov	r1, r4
 800aab0:	9801      	ldr	r0, [sp, #4]
 800aab2:	f000 f9f1 	bl	800ae98 <_Bfree>
 800aab6:	464c      	mov	r4, r9
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aac0:	6122      	str	r2, [r4, #16]
 800aac2:	2201      	movs	r2, #1
 800aac4:	615a      	str	r2, [r3, #20]
 800aac6:	e7be      	b.n	800aa46 <__gethex+0x362>
 800aac8:	6922      	ldr	r2, [r4, #16]
 800aaca:	455a      	cmp	r2, fp
 800aacc:	dd0b      	ble.n	800aae6 <__gethex+0x402>
 800aace:	2101      	movs	r1, #1
 800aad0:	4620      	mov	r0, r4
 800aad2:	f7ff fd9f 	bl	800a614 <rshift>
 800aad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aada:	3701      	adds	r7, #1
 800aadc:	42bb      	cmp	r3, r7
 800aade:	f6ff aee0 	blt.w	800a8a2 <__gethex+0x1be>
 800aae2:	2501      	movs	r5, #1
 800aae4:	e7c2      	b.n	800aa6c <__gethex+0x388>
 800aae6:	f016 061f 	ands.w	r6, r6, #31
 800aaea:	d0fa      	beq.n	800aae2 <__gethex+0x3fe>
 800aaec:	4453      	add	r3, sl
 800aaee:	f1c6 0620 	rsb	r6, r6, #32
 800aaf2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aaf6:	f000 fa81 	bl	800affc <__hi0bits>
 800aafa:	42b0      	cmp	r0, r6
 800aafc:	dbe7      	blt.n	800aace <__gethex+0x3ea>
 800aafe:	e7f0      	b.n	800aae2 <__gethex+0x3fe>
 800ab00:	0800c4b9 	.word	0x0800c4b9

0800ab04 <L_shift>:
 800ab04:	f1c2 0208 	rsb	r2, r2, #8
 800ab08:	0092      	lsls	r2, r2, #2
 800ab0a:	b570      	push	{r4, r5, r6, lr}
 800ab0c:	f1c2 0620 	rsb	r6, r2, #32
 800ab10:	6843      	ldr	r3, [r0, #4]
 800ab12:	6804      	ldr	r4, [r0, #0]
 800ab14:	fa03 f506 	lsl.w	r5, r3, r6
 800ab18:	432c      	orrs	r4, r5
 800ab1a:	40d3      	lsrs	r3, r2
 800ab1c:	6004      	str	r4, [r0, #0]
 800ab1e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ab22:	4288      	cmp	r0, r1
 800ab24:	d3f4      	bcc.n	800ab10 <L_shift+0xc>
 800ab26:	bd70      	pop	{r4, r5, r6, pc}

0800ab28 <__match>:
 800ab28:	b530      	push	{r4, r5, lr}
 800ab2a:	6803      	ldr	r3, [r0, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab32:	b914      	cbnz	r4, 800ab3a <__match+0x12>
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	2001      	movs	r0, #1
 800ab38:	bd30      	pop	{r4, r5, pc}
 800ab3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab3e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ab42:	2d19      	cmp	r5, #25
 800ab44:	bf98      	it	ls
 800ab46:	3220      	addls	r2, #32
 800ab48:	42a2      	cmp	r2, r4
 800ab4a:	d0f0      	beq.n	800ab2e <__match+0x6>
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	e7f3      	b.n	800ab38 <__match+0x10>

0800ab50 <__hexnan>:
 800ab50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	680b      	ldr	r3, [r1, #0]
 800ab56:	6801      	ldr	r1, [r0, #0]
 800ab58:	115e      	asrs	r6, r3, #5
 800ab5a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ab5e:	f013 031f 	ands.w	r3, r3, #31
 800ab62:	b087      	sub	sp, #28
 800ab64:	bf18      	it	ne
 800ab66:	3604      	addne	r6, #4
 800ab68:	2500      	movs	r5, #0
 800ab6a:	1f37      	subs	r7, r6, #4
 800ab6c:	4682      	mov	sl, r0
 800ab6e:	4690      	mov	r8, r2
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	f846 5c04 	str.w	r5, [r6, #-4]
 800ab76:	46b9      	mov	r9, r7
 800ab78:	463c      	mov	r4, r7
 800ab7a:	9502      	str	r5, [sp, #8]
 800ab7c:	46ab      	mov	fp, r5
 800ab7e:	784a      	ldrb	r2, [r1, #1]
 800ab80:	1c4b      	adds	r3, r1, #1
 800ab82:	9303      	str	r3, [sp, #12]
 800ab84:	b342      	cbz	r2, 800abd8 <__hexnan+0x88>
 800ab86:	4610      	mov	r0, r2
 800ab88:	9105      	str	r1, [sp, #20]
 800ab8a:	9204      	str	r2, [sp, #16]
 800ab8c:	f7ff fd94 	bl	800a6b8 <__hexdig_fun>
 800ab90:	2800      	cmp	r0, #0
 800ab92:	d151      	bne.n	800ac38 <__hexnan+0xe8>
 800ab94:	9a04      	ldr	r2, [sp, #16]
 800ab96:	9905      	ldr	r1, [sp, #20]
 800ab98:	2a20      	cmp	r2, #32
 800ab9a:	d818      	bhi.n	800abce <__hexnan+0x7e>
 800ab9c:	9b02      	ldr	r3, [sp, #8]
 800ab9e:	459b      	cmp	fp, r3
 800aba0:	dd13      	ble.n	800abca <__hexnan+0x7a>
 800aba2:	454c      	cmp	r4, r9
 800aba4:	d206      	bcs.n	800abb4 <__hexnan+0x64>
 800aba6:	2d07      	cmp	r5, #7
 800aba8:	dc04      	bgt.n	800abb4 <__hexnan+0x64>
 800abaa:	462a      	mov	r2, r5
 800abac:	4649      	mov	r1, r9
 800abae:	4620      	mov	r0, r4
 800abb0:	f7ff ffa8 	bl	800ab04 <L_shift>
 800abb4:	4544      	cmp	r4, r8
 800abb6:	d952      	bls.n	800ac5e <__hexnan+0x10e>
 800abb8:	2300      	movs	r3, #0
 800abba:	f1a4 0904 	sub.w	r9, r4, #4
 800abbe:	f844 3c04 	str.w	r3, [r4, #-4]
 800abc2:	f8cd b008 	str.w	fp, [sp, #8]
 800abc6:	464c      	mov	r4, r9
 800abc8:	461d      	mov	r5, r3
 800abca:	9903      	ldr	r1, [sp, #12]
 800abcc:	e7d7      	b.n	800ab7e <__hexnan+0x2e>
 800abce:	2a29      	cmp	r2, #41	@ 0x29
 800abd0:	d157      	bne.n	800ac82 <__hexnan+0x132>
 800abd2:	3102      	adds	r1, #2
 800abd4:	f8ca 1000 	str.w	r1, [sl]
 800abd8:	f1bb 0f00 	cmp.w	fp, #0
 800abdc:	d051      	beq.n	800ac82 <__hexnan+0x132>
 800abde:	454c      	cmp	r4, r9
 800abe0:	d206      	bcs.n	800abf0 <__hexnan+0xa0>
 800abe2:	2d07      	cmp	r5, #7
 800abe4:	dc04      	bgt.n	800abf0 <__hexnan+0xa0>
 800abe6:	462a      	mov	r2, r5
 800abe8:	4649      	mov	r1, r9
 800abea:	4620      	mov	r0, r4
 800abec:	f7ff ff8a 	bl	800ab04 <L_shift>
 800abf0:	4544      	cmp	r4, r8
 800abf2:	d936      	bls.n	800ac62 <__hexnan+0x112>
 800abf4:	f1a8 0204 	sub.w	r2, r8, #4
 800abf8:	4623      	mov	r3, r4
 800abfa:	f853 1b04 	ldr.w	r1, [r3], #4
 800abfe:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac02:	429f      	cmp	r7, r3
 800ac04:	d2f9      	bcs.n	800abfa <__hexnan+0xaa>
 800ac06:	1b3b      	subs	r3, r7, r4
 800ac08:	f023 0303 	bic.w	r3, r3, #3
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	3401      	adds	r4, #1
 800ac10:	3e03      	subs	r6, #3
 800ac12:	42b4      	cmp	r4, r6
 800ac14:	bf88      	it	hi
 800ac16:	2304      	movhi	r3, #4
 800ac18:	4443      	add	r3, r8
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f843 2b04 	str.w	r2, [r3], #4
 800ac20:	429f      	cmp	r7, r3
 800ac22:	d2fb      	bcs.n	800ac1c <__hexnan+0xcc>
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	b91b      	cbnz	r3, 800ac30 <__hexnan+0xe0>
 800ac28:	4547      	cmp	r7, r8
 800ac2a:	d128      	bne.n	800ac7e <__hexnan+0x12e>
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	603b      	str	r3, [r7, #0]
 800ac30:	2005      	movs	r0, #5
 800ac32:	b007      	add	sp, #28
 800ac34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac38:	3501      	adds	r5, #1
 800ac3a:	2d08      	cmp	r5, #8
 800ac3c:	f10b 0b01 	add.w	fp, fp, #1
 800ac40:	dd06      	ble.n	800ac50 <__hexnan+0x100>
 800ac42:	4544      	cmp	r4, r8
 800ac44:	d9c1      	bls.n	800abca <__hexnan+0x7a>
 800ac46:	2300      	movs	r3, #0
 800ac48:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac4c:	2501      	movs	r5, #1
 800ac4e:	3c04      	subs	r4, #4
 800ac50:	6822      	ldr	r2, [r4, #0]
 800ac52:	f000 000f 	and.w	r0, r0, #15
 800ac56:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ac5a:	6020      	str	r0, [r4, #0]
 800ac5c:	e7b5      	b.n	800abca <__hexnan+0x7a>
 800ac5e:	2508      	movs	r5, #8
 800ac60:	e7b3      	b.n	800abca <__hexnan+0x7a>
 800ac62:	9b01      	ldr	r3, [sp, #4]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0dd      	beq.n	800ac24 <__hexnan+0xd4>
 800ac68:	f1c3 0320 	rsb	r3, r3, #32
 800ac6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac70:	40da      	lsrs	r2, r3
 800ac72:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ac76:	4013      	ands	r3, r2
 800ac78:	f846 3c04 	str.w	r3, [r6, #-4]
 800ac7c:	e7d2      	b.n	800ac24 <__hexnan+0xd4>
 800ac7e:	3f04      	subs	r7, #4
 800ac80:	e7d0      	b.n	800ac24 <__hexnan+0xd4>
 800ac82:	2004      	movs	r0, #4
 800ac84:	e7d5      	b.n	800ac32 <__hexnan+0xe2>
	...

0800ac88 <malloc>:
 800ac88:	4b02      	ldr	r3, [pc, #8]	@ (800ac94 <malloc+0xc>)
 800ac8a:	4601      	mov	r1, r0
 800ac8c:	6818      	ldr	r0, [r3, #0]
 800ac8e:	f000 b825 	b.w	800acdc <_malloc_r>
 800ac92:	bf00      	nop
 800ac94:	20000194 	.word	0x20000194

0800ac98 <sbrk_aligned>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	4e0f      	ldr	r6, [pc, #60]	@ (800acd8 <sbrk_aligned+0x40>)
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	6831      	ldr	r1, [r6, #0]
 800aca0:	4605      	mov	r5, r0
 800aca2:	b911      	cbnz	r1, 800acaa <sbrk_aligned+0x12>
 800aca4:	f000 ff94 	bl	800bbd0 <_sbrk_r>
 800aca8:	6030      	str	r0, [r6, #0]
 800acaa:	4621      	mov	r1, r4
 800acac:	4628      	mov	r0, r5
 800acae:	f000 ff8f 	bl	800bbd0 <_sbrk_r>
 800acb2:	1c43      	adds	r3, r0, #1
 800acb4:	d103      	bne.n	800acbe <sbrk_aligned+0x26>
 800acb6:	f04f 34ff 	mov.w	r4, #4294967295
 800acba:	4620      	mov	r0, r4
 800acbc:	bd70      	pop	{r4, r5, r6, pc}
 800acbe:	1cc4      	adds	r4, r0, #3
 800acc0:	f024 0403 	bic.w	r4, r4, #3
 800acc4:	42a0      	cmp	r0, r4
 800acc6:	d0f8      	beq.n	800acba <sbrk_aligned+0x22>
 800acc8:	1a21      	subs	r1, r4, r0
 800acca:	4628      	mov	r0, r5
 800accc:	f000 ff80 	bl	800bbd0 <_sbrk_r>
 800acd0:	3001      	adds	r0, #1
 800acd2:	d1f2      	bne.n	800acba <sbrk_aligned+0x22>
 800acd4:	e7ef      	b.n	800acb6 <sbrk_aligned+0x1e>
 800acd6:	bf00      	nop
 800acd8:	2000f01c 	.word	0x2000f01c

0800acdc <_malloc_r>:
 800acdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ace0:	1ccd      	adds	r5, r1, #3
 800ace2:	f025 0503 	bic.w	r5, r5, #3
 800ace6:	3508      	adds	r5, #8
 800ace8:	2d0c      	cmp	r5, #12
 800acea:	bf38      	it	cc
 800acec:	250c      	movcc	r5, #12
 800acee:	2d00      	cmp	r5, #0
 800acf0:	4606      	mov	r6, r0
 800acf2:	db01      	blt.n	800acf8 <_malloc_r+0x1c>
 800acf4:	42a9      	cmp	r1, r5
 800acf6:	d904      	bls.n	800ad02 <_malloc_r+0x26>
 800acf8:	230c      	movs	r3, #12
 800acfa:	6033      	str	r3, [r6, #0]
 800acfc:	2000      	movs	r0, #0
 800acfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800add8 <_malloc_r+0xfc>
 800ad06:	f000 f87b 	bl	800ae00 <__malloc_lock>
 800ad0a:	f8d8 3000 	ldr.w	r3, [r8]
 800ad0e:	461c      	mov	r4, r3
 800ad10:	bb44      	cbnz	r4, 800ad64 <_malloc_r+0x88>
 800ad12:	4629      	mov	r1, r5
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7ff ffbf 	bl	800ac98 <sbrk_aligned>
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	d158      	bne.n	800add2 <_malloc_r+0xf6>
 800ad20:	f8d8 4000 	ldr.w	r4, [r8]
 800ad24:	4627      	mov	r7, r4
 800ad26:	2f00      	cmp	r7, #0
 800ad28:	d143      	bne.n	800adb2 <_malloc_r+0xd6>
 800ad2a:	2c00      	cmp	r4, #0
 800ad2c:	d04b      	beq.n	800adc6 <_malloc_r+0xea>
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	4639      	mov	r1, r7
 800ad32:	4630      	mov	r0, r6
 800ad34:	eb04 0903 	add.w	r9, r4, r3
 800ad38:	f000 ff4a 	bl	800bbd0 <_sbrk_r>
 800ad3c:	4581      	cmp	r9, r0
 800ad3e:	d142      	bne.n	800adc6 <_malloc_r+0xea>
 800ad40:	6821      	ldr	r1, [r4, #0]
 800ad42:	1a6d      	subs	r5, r5, r1
 800ad44:	4629      	mov	r1, r5
 800ad46:	4630      	mov	r0, r6
 800ad48:	f7ff ffa6 	bl	800ac98 <sbrk_aligned>
 800ad4c:	3001      	adds	r0, #1
 800ad4e:	d03a      	beq.n	800adc6 <_malloc_r+0xea>
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	442b      	add	r3, r5
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	f8d8 3000 	ldr.w	r3, [r8]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	bb62      	cbnz	r2, 800adb8 <_malloc_r+0xdc>
 800ad5e:	f8c8 7000 	str.w	r7, [r8]
 800ad62:	e00f      	b.n	800ad84 <_malloc_r+0xa8>
 800ad64:	6822      	ldr	r2, [r4, #0]
 800ad66:	1b52      	subs	r2, r2, r5
 800ad68:	d420      	bmi.n	800adac <_malloc_r+0xd0>
 800ad6a:	2a0b      	cmp	r2, #11
 800ad6c:	d917      	bls.n	800ad9e <_malloc_r+0xc2>
 800ad6e:	1961      	adds	r1, r4, r5
 800ad70:	42a3      	cmp	r3, r4
 800ad72:	6025      	str	r5, [r4, #0]
 800ad74:	bf18      	it	ne
 800ad76:	6059      	strne	r1, [r3, #4]
 800ad78:	6863      	ldr	r3, [r4, #4]
 800ad7a:	bf08      	it	eq
 800ad7c:	f8c8 1000 	streq.w	r1, [r8]
 800ad80:	5162      	str	r2, [r4, r5]
 800ad82:	604b      	str	r3, [r1, #4]
 800ad84:	4630      	mov	r0, r6
 800ad86:	f000 f841 	bl	800ae0c <__malloc_unlock>
 800ad8a:	f104 000b 	add.w	r0, r4, #11
 800ad8e:	1d23      	adds	r3, r4, #4
 800ad90:	f020 0007 	bic.w	r0, r0, #7
 800ad94:	1ac2      	subs	r2, r0, r3
 800ad96:	bf1c      	itt	ne
 800ad98:	1a1b      	subne	r3, r3, r0
 800ad9a:	50a3      	strne	r3, [r4, r2]
 800ad9c:	e7af      	b.n	800acfe <_malloc_r+0x22>
 800ad9e:	6862      	ldr	r2, [r4, #4]
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	bf0c      	ite	eq
 800ada4:	f8c8 2000 	streq.w	r2, [r8]
 800ada8:	605a      	strne	r2, [r3, #4]
 800adaa:	e7eb      	b.n	800ad84 <_malloc_r+0xa8>
 800adac:	4623      	mov	r3, r4
 800adae:	6864      	ldr	r4, [r4, #4]
 800adb0:	e7ae      	b.n	800ad10 <_malloc_r+0x34>
 800adb2:	463c      	mov	r4, r7
 800adb4:	687f      	ldr	r7, [r7, #4]
 800adb6:	e7b6      	b.n	800ad26 <_malloc_r+0x4a>
 800adb8:	461a      	mov	r2, r3
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	42a3      	cmp	r3, r4
 800adbe:	d1fb      	bne.n	800adb8 <_malloc_r+0xdc>
 800adc0:	2300      	movs	r3, #0
 800adc2:	6053      	str	r3, [r2, #4]
 800adc4:	e7de      	b.n	800ad84 <_malloc_r+0xa8>
 800adc6:	230c      	movs	r3, #12
 800adc8:	6033      	str	r3, [r6, #0]
 800adca:	4630      	mov	r0, r6
 800adcc:	f000 f81e 	bl	800ae0c <__malloc_unlock>
 800add0:	e794      	b.n	800acfc <_malloc_r+0x20>
 800add2:	6005      	str	r5, [r0, #0]
 800add4:	e7d6      	b.n	800ad84 <_malloc_r+0xa8>
 800add6:	bf00      	nop
 800add8:	2000f020 	.word	0x2000f020

0800addc <__ascii_mbtowc>:
 800addc:	b082      	sub	sp, #8
 800adde:	b901      	cbnz	r1, 800ade2 <__ascii_mbtowc+0x6>
 800ade0:	a901      	add	r1, sp, #4
 800ade2:	b142      	cbz	r2, 800adf6 <__ascii_mbtowc+0x1a>
 800ade4:	b14b      	cbz	r3, 800adfa <__ascii_mbtowc+0x1e>
 800ade6:	7813      	ldrb	r3, [r2, #0]
 800ade8:	600b      	str	r3, [r1, #0]
 800adea:	7812      	ldrb	r2, [r2, #0]
 800adec:	1e10      	subs	r0, r2, #0
 800adee:	bf18      	it	ne
 800adf0:	2001      	movne	r0, #1
 800adf2:	b002      	add	sp, #8
 800adf4:	4770      	bx	lr
 800adf6:	4610      	mov	r0, r2
 800adf8:	e7fb      	b.n	800adf2 <__ascii_mbtowc+0x16>
 800adfa:	f06f 0001 	mvn.w	r0, #1
 800adfe:	e7f8      	b.n	800adf2 <__ascii_mbtowc+0x16>

0800ae00 <__malloc_lock>:
 800ae00:	4801      	ldr	r0, [pc, #4]	@ (800ae08 <__malloc_lock+0x8>)
 800ae02:	f7fe bd4e 	b.w	80098a2 <__retarget_lock_acquire_recursive>
 800ae06:	bf00      	nop
 800ae08:	2000f018 	.word	0x2000f018

0800ae0c <__malloc_unlock>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	@ (800ae14 <__malloc_unlock+0x8>)
 800ae0e:	f7fe bd49 	b.w	80098a4 <__retarget_lock_release_recursive>
 800ae12:	bf00      	nop
 800ae14:	2000f018 	.word	0x2000f018

0800ae18 <_Balloc>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	69c6      	ldr	r6, [r0, #28]
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	460d      	mov	r5, r1
 800ae20:	b976      	cbnz	r6, 800ae40 <_Balloc+0x28>
 800ae22:	2010      	movs	r0, #16
 800ae24:	f7ff ff30 	bl	800ac88 <malloc>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	61e0      	str	r0, [r4, #28]
 800ae2c:	b920      	cbnz	r0, 800ae38 <_Balloc+0x20>
 800ae2e:	4b18      	ldr	r3, [pc, #96]	@ (800ae90 <_Balloc+0x78>)
 800ae30:	4818      	ldr	r0, [pc, #96]	@ (800ae94 <_Balloc+0x7c>)
 800ae32:	216b      	movs	r1, #107	@ 0x6b
 800ae34:	f000 fedc 	bl	800bbf0 <__assert_func>
 800ae38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae3c:	6006      	str	r6, [r0, #0]
 800ae3e:	60c6      	str	r6, [r0, #12]
 800ae40:	69e6      	ldr	r6, [r4, #28]
 800ae42:	68f3      	ldr	r3, [r6, #12]
 800ae44:	b183      	cbz	r3, 800ae68 <_Balloc+0x50>
 800ae46:	69e3      	ldr	r3, [r4, #28]
 800ae48:	68db      	ldr	r3, [r3, #12]
 800ae4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae4e:	b9b8      	cbnz	r0, 800ae80 <_Balloc+0x68>
 800ae50:	2101      	movs	r1, #1
 800ae52:	fa01 f605 	lsl.w	r6, r1, r5
 800ae56:	1d72      	adds	r2, r6, #5
 800ae58:	0092      	lsls	r2, r2, #2
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f000 fee6 	bl	800bc2c <_calloc_r>
 800ae60:	b160      	cbz	r0, 800ae7c <_Balloc+0x64>
 800ae62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae66:	e00e      	b.n	800ae86 <_Balloc+0x6e>
 800ae68:	2221      	movs	r2, #33	@ 0x21
 800ae6a:	2104      	movs	r1, #4
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 fedd 	bl	800bc2c <_calloc_r>
 800ae72:	69e3      	ldr	r3, [r4, #28]
 800ae74:	60f0      	str	r0, [r6, #12]
 800ae76:	68db      	ldr	r3, [r3, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e4      	bne.n	800ae46 <_Balloc+0x2e>
 800ae7c:	2000      	movs	r0, #0
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	6802      	ldr	r2, [r0, #0]
 800ae82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae86:	2300      	movs	r3, #0
 800ae88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae8c:	e7f7      	b.n	800ae7e <_Balloc+0x66>
 800ae8e:	bf00      	nop
 800ae90:	0800c44a 	.word	0x0800c44a
 800ae94:	0800c52a 	.word	0x0800c52a

0800ae98 <_Bfree>:
 800ae98:	b570      	push	{r4, r5, r6, lr}
 800ae9a:	69c6      	ldr	r6, [r0, #28]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	460c      	mov	r4, r1
 800aea0:	b976      	cbnz	r6, 800aec0 <_Bfree+0x28>
 800aea2:	2010      	movs	r0, #16
 800aea4:	f7ff fef0 	bl	800ac88 <malloc>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	61e8      	str	r0, [r5, #28]
 800aeac:	b920      	cbnz	r0, 800aeb8 <_Bfree+0x20>
 800aeae:	4b09      	ldr	r3, [pc, #36]	@ (800aed4 <_Bfree+0x3c>)
 800aeb0:	4809      	ldr	r0, [pc, #36]	@ (800aed8 <_Bfree+0x40>)
 800aeb2:	218f      	movs	r1, #143	@ 0x8f
 800aeb4:	f000 fe9c 	bl	800bbf0 <__assert_func>
 800aeb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aebc:	6006      	str	r6, [r0, #0]
 800aebe:	60c6      	str	r6, [r0, #12]
 800aec0:	b13c      	cbz	r4, 800aed2 <_Bfree+0x3a>
 800aec2:	69eb      	ldr	r3, [r5, #28]
 800aec4:	6862      	ldr	r2, [r4, #4]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aecc:	6021      	str	r1, [r4, #0]
 800aece:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	0800c44a 	.word	0x0800c44a
 800aed8:	0800c52a 	.word	0x0800c52a

0800aedc <__multadd>:
 800aedc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aee0:	690d      	ldr	r5, [r1, #16]
 800aee2:	4607      	mov	r7, r0
 800aee4:	460c      	mov	r4, r1
 800aee6:	461e      	mov	r6, r3
 800aee8:	f101 0c14 	add.w	ip, r1, #20
 800aeec:	2000      	movs	r0, #0
 800aeee:	f8dc 3000 	ldr.w	r3, [ip]
 800aef2:	b299      	uxth	r1, r3
 800aef4:	fb02 6101 	mla	r1, r2, r1, r6
 800aef8:	0c1e      	lsrs	r6, r3, #16
 800aefa:	0c0b      	lsrs	r3, r1, #16
 800aefc:	fb02 3306 	mla	r3, r2, r6, r3
 800af00:	b289      	uxth	r1, r1
 800af02:	3001      	adds	r0, #1
 800af04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af08:	4285      	cmp	r5, r0
 800af0a:	f84c 1b04 	str.w	r1, [ip], #4
 800af0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af12:	dcec      	bgt.n	800aeee <__multadd+0x12>
 800af14:	b30e      	cbz	r6, 800af5a <__multadd+0x7e>
 800af16:	68a3      	ldr	r3, [r4, #8]
 800af18:	42ab      	cmp	r3, r5
 800af1a:	dc19      	bgt.n	800af50 <__multadd+0x74>
 800af1c:	6861      	ldr	r1, [r4, #4]
 800af1e:	4638      	mov	r0, r7
 800af20:	3101      	adds	r1, #1
 800af22:	f7ff ff79 	bl	800ae18 <_Balloc>
 800af26:	4680      	mov	r8, r0
 800af28:	b928      	cbnz	r0, 800af36 <__multadd+0x5a>
 800af2a:	4602      	mov	r2, r0
 800af2c:	4b0c      	ldr	r3, [pc, #48]	@ (800af60 <__multadd+0x84>)
 800af2e:	480d      	ldr	r0, [pc, #52]	@ (800af64 <__multadd+0x88>)
 800af30:	21ba      	movs	r1, #186	@ 0xba
 800af32:	f000 fe5d 	bl	800bbf0 <__assert_func>
 800af36:	6922      	ldr	r2, [r4, #16]
 800af38:	3202      	adds	r2, #2
 800af3a:	f104 010c 	add.w	r1, r4, #12
 800af3e:	0092      	lsls	r2, r2, #2
 800af40:	300c      	adds	r0, #12
 800af42:	f7fe fcb0 	bl	80098a6 <memcpy>
 800af46:	4621      	mov	r1, r4
 800af48:	4638      	mov	r0, r7
 800af4a:	f7ff ffa5 	bl	800ae98 <_Bfree>
 800af4e:	4644      	mov	r4, r8
 800af50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af54:	3501      	adds	r5, #1
 800af56:	615e      	str	r6, [r3, #20]
 800af58:	6125      	str	r5, [r4, #16]
 800af5a:	4620      	mov	r0, r4
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af60:	0800c4b9 	.word	0x0800c4b9
 800af64:	0800c52a 	.word	0x0800c52a

0800af68 <__s2b>:
 800af68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af6c:	460c      	mov	r4, r1
 800af6e:	4615      	mov	r5, r2
 800af70:	461f      	mov	r7, r3
 800af72:	2209      	movs	r2, #9
 800af74:	3308      	adds	r3, #8
 800af76:	4606      	mov	r6, r0
 800af78:	fb93 f3f2 	sdiv	r3, r3, r2
 800af7c:	2100      	movs	r1, #0
 800af7e:	2201      	movs	r2, #1
 800af80:	429a      	cmp	r2, r3
 800af82:	db09      	blt.n	800af98 <__s2b+0x30>
 800af84:	4630      	mov	r0, r6
 800af86:	f7ff ff47 	bl	800ae18 <_Balloc>
 800af8a:	b940      	cbnz	r0, 800af9e <__s2b+0x36>
 800af8c:	4602      	mov	r2, r0
 800af8e:	4b19      	ldr	r3, [pc, #100]	@ (800aff4 <__s2b+0x8c>)
 800af90:	4819      	ldr	r0, [pc, #100]	@ (800aff8 <__s2b+0x90>)
 800af92:	21d3      	movs	r1, #211	@ 0xd3
 800af94:	f000 fe2c 	bl	800bbf0 <__assert_func>
 800af98:	0052      	lsls	r2, r2, #1
 800af9a:	3101      	adds	r1, #1
 800af9c:	e7f0      	b.n	800af80 <__s2b+0x18>
 800af9e:	9b08      	ldr	r3, [sp, #32]
 800afa0:	6143      	str	r3, [r0, #20]
 800afa2:	2d09      	cmp	r5, #9
 800afa4:	f04f 0301 	mov.w	r3, #1
 800afa8:	6103      	str	r3, [r0, #16]
 800afaa:	dd16      	ble.n	800afda <__s2b+0x72>
 800afac:	f104 0909 	add.w	r9, r4, #9
 800afb0:	46c8      	mov	r8, r9
 800afb2:	442c      	add	r4, r5
 800afb4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afb8:	4601      	mov	r1, r0
 800afba:	3b30      	subs	r3, #48	@ 0x30
 800afbc:	220a      	movs	r2, #10
 800afbe:	4630      	mov	r0, r6
 800afc0:	f7ff ff8c 	bl	800aedc <__multadd>
 800afc4:	45a0      	cmp	r8, r4
 800afc6:	d1f5      	bne.n	800afb4 <__s2b+0x4c>
 800afc8:	f1a5 0408 	sub.w	r4, r5, #8
 800afcc:	444c      	add	r4, r9
 800afce:	1b2d      	subs	r5, r5, r4
 800afd0:	1963      	adds	r3, r4, r5
 800afd2:	42bb      	cmp	r3, r7
 800afd4:	db04      	blt.n	800afe0 <__s2b+0x78>
 800afd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afda:	340a      	adds	r4, #10
 800afdc:	2509      	movs	r5, #9
 800afde:	e7f6      	b.n	800afce <__s2b+0x66>
 800afe0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800afe4:	4601      	mov	r1, r0
 800afe6:	3b30      	subs	r3, #48	@ 0x30
 800afe8:	220a      	movs	r2, #10
 800afea:	4630      	mov	r0, r6
 800afec:	f7ff ff76 	bl	800aedc <__multadd>
 800aff0:	e7ee      	b.n	800afd0 <__s2b+0x68>
 800aff2:	bf00      	nop
 800aff4:	0800c4b9 	.word	0x0800c4b9
 800aff8:	0800c52a 	.word	0x0800c52a

0800affc <__hi0bits>:
 800affc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b000:	4603      	mov	r3, r0
 800b002:	bf36      	itet	cc
 800b004:	0403      	lslcc	r3, r0, #16
 800b006:	2000      	movcs	r0, #0
 800b008:	2010      	movcc	r0, #16
 800b00a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b00e:	bf3c      	itt	cc
 800b010:	021b      	lslcc	r3, r3, #8
 800b012:	3008      	addcc	r0, #8
 800b014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b018:	bf3c      	itt	cc
 800b01a:	011b      	lslcc	r3, r3, #4
 800b01c:	3004      	addcc	r0, #4
 800b01e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b022:	bf3c      	itt	cc
 800b024:	009b      	lslcc	r3, r3, #2
 800b026:	3002      	addcc	r0, #2
 800b028:	2b00      	cmp	r3, #0
 800b02a:	db05      	blt.n	800b038 <__hi0bits+0x3c>
 800b02c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b030:	f100 0001 	add.w	r0, r0, #1
 800b034:	bf08      	it	eq
 800b036:	2020      	moveq	r0, #32
 800b038:	4770      	bx	lr

0800b03a <__lo0bits>:
 800b03a:	6803      	ldr	r3, [r0, #0]
 800b03c:	4602      	mov	r2, r0
 800b03e:	f013 0007 	ands.w	r0, r3, #7
 800b042:	d00b      	beq.n	800b05c <__lo0bits+0x22>
 800b044:	07d9      	lsls	r1, r3, #31
 800b046:	d421      	bmi.n	800b08c <__lo0bits+0x52>
 800b048:	0798      	lsls	r0, r3, #30
 800b04a:	bf49      	itett	mi
 800b04c:	085b      	lsrmi	r3, r3, #1
 800b04e:	089b      	lsrpl	r3, r3, #2
 800b050:	2001      	movmi	r0, #1
 800b052:	6013      	strmi	r3, [r2, #0]
 800b054:	bf5c      	itt	pl
 800b056:	6013      	strpl	r3, [r2, #0]
 800b058:	2002      	movpl	r0, #2
 800b05a:	4770      	bx	lr
 800b05c:	b299      	uxth	r1, r3
 800b05e:	b909      	cbnz	r1, 800b064 <__lo0bits+0x2a>
 800b060:	0c1b      	lsrs	r3, r3, #16
 800b062:	2010      	movs	r0, #16
 800b064:	b2d9      	uxtb	r1, r3
 800b066:	b909      	cbnz	r1, 800b06c <__lo0bits+0x32>
 800b068:	3008      	adds	r0, #8
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	0719      	lsls	r1, r3, #28
 800b06e:	bf04      	itt	eq
 800b070:	091b      	lsreq	r3, r3, #4
 800b072:	3004      	addeq	r0, #4
 800b074:	0799      	lsls	r1, r3, #30
 800b076:	bf04      	itt	eq
 800b078:	089b      	lsreq	r3, r3, #2
 800b07a:	3002      	addeq	r0, #2
 800b07c:	07d9      	lsls	r1, r3, #31
 800b07e:	d403      	bmi.n	800b088 <__lo0bits+0x4e>
 800b080:	085b      	lsrs	r3, r3, #1
 800b082:	f100 0001 	add.w	r0, r0, #1
 800b086:	d003      	beq.n	800b090 <__lo0bits+0x56>
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	4770      	bx	lr
 800b08c:	2000      	movs	r0, #0
 800b08e:	4770      	bx	lr
 800b090:	2020      	movs	r0, #32
 800b092:	4770      	bx	lr

0800b094 <__i2b>:
 800b094:	b510      	push	{r4, lr}
 800b096:	460c      	mov	r4, r1
 800b098:	2101      	movs	r1, #1
 800b09a:	f7ff febd 	bl	800ae18 <_Balloc>
 800b09e:	4602      	mov	r2, r0
 800b0a0:	b928      	cbnz	r0, 800b0ae <__i2b+0x1a>
 800b0a2:	4b05      	ldr	r3, [pc, #20]	@ (800b0b8 <__i2b+0x24>)
 800b0a4:	4805      	ldr	r0, [pc, #20]	@ (800b0bc <__i2b+0x28>)
 800b0a6:	f240 1145 	movw	r1, #325	@ 0x145
 800b0aa:	f000 fda1 	bl	800bbf0 <__assert_func>
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	6144      	str	r4, [r0, #20]
 800b0b2:	6103      	str	r3, [r0, #16]
 800b0b4:	bd10      	pop	{r4, pc}
 800b0b6:	bf00      	nop
 800b0b8:	0800c4b9 	.word	0x0800c4b9
 800b0bc:	0800c52a 	.word	0x0800c52a

0800b0c0 <__multiply>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	4614      	mov	r4, r2
 800b0c6:	690a      	ldr	r2, [r1, #16]
 800b0c8:	6923      	ldr	r3, [r4, #16]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	bfa8      	it	ge
 800b0ce:	4623      	movge	r3, r4
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	bfa4      	itt	ge
 800b0d4:	460c      	movge	r4, r1
 800b0d6:	461f      	movge	r7, r3
 800b0d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b0dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b0e0:	68a3      	ldr	r3, [r4, #8]
 800b0e2:	6861      	ldr	r1, [r4, #4]
 800b0e4:	eb0a 0609 	add.w	r6, sl, r9
 800b0e8:	42b3      	cmp	r3, r6
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	bfb8      	it	lt
 800b0ee:	3101      	addlt	r1, #1
 800b0f0:	f7ff fe92 	bl	800ae18 <_Balloc>
 800b0f4:	b930      	cbnz	r0, 800b104 <__multiply+0x44>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	4b44      	ldr	r3, [pc, #272]	@ (800b20c <__multiply+0x14c>)
 800b0fa:	4845      	ldr	r0, [pc, #276]	@ (800b210 <__multiply+0x150>)
 800b0fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b100:	f000 fd76 	bl	800bbf0 <__assert_func>
 800b104:	f100 0514 	add.w	r5, r0, #20
 800b108:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b10c:	462b      	mov	r3, r5
 800b10e:	2200      	movs	r2, #0
 800b110:	4543      	cmp	r3, r8
 800b112:	d321      	bcc.n	800b158 <__multiply+0x98>
 800b114:	f107 0114 	add.w	r1, r7, #20
 800b118:	f104 0214 	add.w	r2, r4, #20
 800b11c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b120:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b124:	9302      	str	r3, [sp, #8]
 800b126:	1b13      	subs	r3, r2, r4
 800b128:	3b15      	subs	r3, #21
 800b12a:	f023 0303 	bic.w	r3, r3, #3
 800b12e:	3304      	adds	r3, #4
 800b130:	f104 0715 	add.w	r7, r4, #21
 800b134:	42ba      	cmp	r2, r7
 800b136:	bf38      	it	cc
 800b138:	2304      	movcc	r3, #4
 800b13a:	9301      	str	r3, [sp, #4]
 800b13c:	9b02      	ldr	r3, [sp, #8]
 800b13e:	9103      	str	r1, [sp, #12]
 800b140:	428b      	cmp	r3, r1
 800b142:	d80c      	bhi.n	800b15e <__multiply+0x9e>
 800b144:	2e00      	cmp	r6, #0
 800b146:	dd03      	ble.n	800b150 <__multiply+0x90>
 800b148:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d05b      	beq.n	800b208 <__multiply+0x148>
 800b150:	6106      	str	r6, [r0, #16]
 800b152:	b005      	add	sp, #20
 800b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	f843 2b04 	str.w	r2, [r3], #4
 800b15c:	e7d8      	b.n	800b110 <__multiply+0x50>
 800b15e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b162:	f1ba 0f00 	cmp.w	sl, #0
 800b166:	d024      	beq.n	800b1b2 <__multiply+0xf2>
 800b168:	f104 0e14 	add.w	lr, r4, #20
 800b16c:	46a9      	mov	r9, r5
 800b16e:	f04f 0c00 	mov.w	ip, #0
 800b172:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b176:	f8d9 3000 	ldr.w	r3, [r9]
 800b17a:	fa1f fb87 	uxth.w	fp, r7
 800b17e:	b29b      	uxth	r3, r3
 800b180:	fb0a 330b 	mla	r3, sl, fp, r3
 800b184:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b188:	f8d9 7000 	ldr.w	r7, [r9]
 800b18c:	4463      	add	r3, ip
 800b18e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b192:	fb0a c70b 	mla	r7, sl, fp, ip
 800b196:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1a0:	4572      	cmp	r2, lr
 800b1a2:	f849 3b04 	str.w	r3, [r9], #4
 800b1a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b1aa:	d8e2      	bhi.n	800b172 <__multiply+0xb2>
 800b1ac:	9b01      	ldr	r3, [sp, #4]
 800b1ae:	f845 c003 	str.w	ip, [r5, r3]
 800b1b2:	9b03      	ldr	r3, [sp, #12]
 800b1b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b1b8:	3104      	adds	r1, #4
 800b1ba:	f1b9 0f00 	cmp.w	r9, #0
 800b1be:	d021      	beq.n	800b204 <__multiply+0x144>
 800b1c0:	682b      	ldr	r3, [r5, #0]
 800b1c2:	f104 0c14 	add.w	ip, r4, #20
 800b1c6:	46ae      	mov	lr, r5
 800b1c8:	f04f 0a00 	mov.w	sl, #0
 800b1cc:	f8bc b000 	ldrh.w	fp, [ip]
 800b1d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b1d4:	fb09 770b 	mla	r7, r9, fp, r7
 800b1d8:	4457      	add	r7, sl
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b1e0:	f84e 3b04 	str.w	r3, [lr], #4
 800b1e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b1e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1ec:	f8be 3000 	ldrh.w	r3, [lr]
 800b1f0:	fb09 330a 	mla	r3, r9, sl, r3
 800b1f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b1f8:	4562      	cmp	r2, ip
 800b1fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b1fe:	d8e5      	bhi.n	800b1cc <__multiply+0x10c>
 800b200:	9f01      	ldr	r7, [sp, #4]
 800b202:	51eb      	str	r3, [r5, r7]
 800b204:	3504      	adds	r5, #4
 800b206:	e799      	b.n	800b13c <__multiply+0x7c>
 800b208:	3e01      	subs	r6, #1
 800b20a:	e79b      	b.n	800b144 <__multiply+0x84>
 800b20c:	0800c4b9 	.word	0x0800c4b9
 800b210:	0800c52a 	.word	0x0800c52a

0800b214 <__pow5mult>:
 800b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b218:	4615      	mov	r5, r2
 800b21a:	f012 0203 	ands.w	r2, r2, #3
 800b21e:	4607      	mov	r7, r0
 800b220:	460e      	mov	r6, r1
 800b222:	d007      	beq.n	800b234 <__pow5mult+0x20>
 800b224:	4c25      	ldr	r4, [pc, #148]	@ (800b2bc <__pow5mult+0xa8>)
 800b226:	3a01      	subs	r2, #1
 800b228:	2300      	movs	r3, #0
 800b22a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b22e:	f7ff fe55 	bl	800aedc <__multadd>
 800b232:	4606      	mov	r6, r0
 800b234:	10ad      	asrs	r5, r5, #2
 800b236:	d03d      	beq.n	800b2b4 <__pow5mult+0xa0>
 800b238:	69fc      	ldr	r4, [r7, #28]
 800b23a:	b97c      	cbnz	r4, 800b25c <__pow5mult+0x48>
 800b23c:	2010      	movs	r0, #16
 800b23e:	f7ff fd23 	bl	800ac88 <malloc>
 800b242:	4602      	mov	r2, r0
 800b244:	61f8      	str	r0, [r7, #28]
 800b246:	b928      	cbnz	r0, 800b254 <__pow5mult+0x40>
 800b248:	4b1d      	ldr	r3, [pc, #116]	@ (800b2c0 <__pow5mult+0xac>)
 800b24a:	481e      	ldr	r0, [pc, #120]	@ (800b2c4 <__pow5mult+0xb0>)
 800b24c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b250:	f000 fcce 	bl	800bbf0 <__assert_func>
 800b254:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b258:	6004      	str	r4, [r0, #0]
 800b25a:	60c4      	str	r4, [r0, #12]
 800b25c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b260:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b264:	b94c      	cbnz	r4, 800b27a <__pow5mult+0x66>
 800b266:	f240 2171 	movw	r1, #625	@ 0x271
 800b26a:	4638      	mov	r0, r7
 800b26c:	f7ff ff12 	bl	800b094 <__i2b>
 800b270:	2300      	movs	r3, #0
 800b272:	f8c8 0008 	str.w	r0, [r8, #8]
 800b276:	4604      	mov	r4, r0
 800b278:	6003      	str	r3, [r0, #0]
 800b27a:	f04f 0900 	mov.w	r9, #0
 800b27e:	07eb      	lsls	r3, r5, #31
 800b280:	d50a      	bpl.n	800b298 <__pow5mult+0x84>
 800b282:	4631      	mov	r1, r6
 800b284:	4622      	mov	r2, r4
 800b286:	4638      	mov	r0, r7
 800b288:	f7ff ff1a 	bl	800b0c0 <__multiply>
 800b28c:	4631      	mov	r1, r6
 800b28e:	4680      	mov	r8, r0
 800b290:	4638      	mov	r0, r7
 800b292:	f7ff fe01 	bl	800ae98 <_Bfree>
 800b296:	4646      	mov	r6, r8
 800b298:	106d      	asrs	r5, r5, #1
 800b29a:	d00b      	beq.n	800b2b4 <__pow5mult+0xa0>
 800b29c:	6820      	ldr	r0, [r4, #0]
 800b29e:	b938      	cbnz	r0, 800b2b0 <__pow5mult+0x9c>
 800b2a0:	4622      	mov	r2, r4
 800b2a2:	4621      	mov	r1, r4
 800b2a4:	4638      	mov	r0, r7
 800b2a6:	f7ff ff0b 	bl	800b0c0 <__multiply>
 800b2aa:	6020      	str	r0, [r4, #0]
 800b2ac:	f8c0 9000 	str.w	r9, [r0]
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	e7e4      	b.n	800b27e <__pow5mult+0x6a>
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2ba:	bf00      	nop
 800b2bc:	0800c584 	.word	0x0800c584
 800b2c0:	0800c44a 	.word	0x0800c44a
 800b2c4:	0800c52a 	.word	0x0800c52a

0800b2c8 <__lshift>:
 800b2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2cc:	460c      	mov	r4, r1
 800b2ce:	6849      	ldr	r1, [r1, #4]
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2d6:	68a3      	ldr	r3, [r4, #8]
 800b2d8:	4607      	mov	r7, r0
 800b2da:	4691      	mov	r9, r2
 800b2dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2e0:	f108 0601 	add.w	r6, r8, #1
 800b2e4:	42b3      	cmp	r3, r6
 800b2e6:	db0b      	blt.n	800b300 <__lshift+0x38>
 800b2e8:	4638      	mov	r0, r7
 800b2ea:	f7ff fd95 	bl	800ae18 <_Balloc>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	b948      	cbnz	r0, 800b306 <__lshift+0x3e>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	4b28      	ldr	r3, [pc, #160]	@ (800b398 <__lshift+0xd0>)
 800b2f6:	4829      	ldr	r0, [pc, #164]	@ (800b39c <__lshift+0xd4>)
 800b2f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b2fc:	f000 fc78 	bl	800bbf0 <__assert_func>
 800b300:	3101      	adds	r1, #1
 800b302:	005b      	lsls	r3, r3, #1
 800b304:	e7ee      	b.n	800b2e4 <__lshift+0x1c>
 800b306:	2300      	movs	r3, #0
 800b308:	f100 0114 	add.w	r1, r0, #20
 800b30c:	f100 0210 	add.w	r2, r0, #16
 800b310:	4618      	mov	r0, r3
 800b312:	4553      	cmp	r3, sl
 800b314:	db33      	blt.n	800b37e <__lshift+0xb6>
 800b316:	6920      	ldr	r0, [r4, #16]
 800b318:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b31c:	f104 0314 	add.w	r3, r4, #20
 800b320:	f019 091f 	ands.w	r9, r9, #31
 800b324:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b328:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b32c:	d02b      	beq.n	800b386 <__lshift+0xbe>
 800b32e:	f1c9 0e20 	rsb	lr, r9, #32
 800b332:	468a      	mov	sl, r1
 800b334:	2200      	movs	r2, #0
 800b336:	6818      	ldr	r0, [r3, #0]
 800b338:	fa00 f009 	lsl.w	r0, r0, r9
 800b33c:	4310      	orrs	r0, r2
 800b33e:	f84a 0b04 	str.w	r0, [sl], #4
 800b342:	f853 2b04 	ldr.w	r2, [r3], #4
 800b346:	459c      	cmp	ip, r3
 800b348:	fa22 f20e 	lsr.w	r2, r2, lr
 800b34c:	d8f3      	bhi.n	800b336 <__lshift+0x6e>
 800b34e:	ebac 0304 	sub.w	r3, ip, r4
 800b352:	3b15      	subs	r3, #21
 800b354:	f023 0303 	bic.w	r3, r3, #3
 800b358:	3304      	adds	r3, #4
 800b35a:	f104 0015 	add.w	r0, r4, #21
 800b35e:	4584      	cmp	ip, r0
 800b360:	bf38      	it	cc
 800b362:	2304      	movcc	r3, #4
 800b364:	50ca      	str	r2, [r1, r3]
 800b366:	b10a      	cbz	r2, 800b36c <__lshift+0xa4>
 800b368:	f108 0602 	add.w	r6, r8, #2
 800b36c:	3e01      	subs	r6, #1
 800b36e:	4638      	mov	r0, r7
 800b370:	612e      	str	r6, [r5, #16]
 800b372:	4621      	mov	r1, r4
 800b374:	f7ff fd90 	bl	800ae98 <_Bfree>
 800b378:	4628      	mov	r0, r5
 800b37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b382:	3301      	adds	r3, #1
 800b384:	e7c5      	b.n	800b312 <__lshift+0x4a>
 800b386:	3904      	subs	r1, #4
 800b388:	f853 2b04 	ldr.w	r2, [r3], #4
 800b38c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b390:	459c      	cmp	ip, r3
 800b392:	d8f9      	bhi.n	800b388 <__lshift+0xc0>
 800b394:	e7ea      	b.n	800b36c <__lshift+0xa4>
 800b396:	bf00      	nop
 800b398:	0800c4b9 	.word	0x0800c4b9
 800b39c:	0800c52a 	.word	0x0800c52a

0800b3a0 <__mcmp>:
 800b3a0:	690a      	ldr	r2, [r1, #16]
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	6900      	ldr	r0, [r0, #16]
 800b3a6:	1a80      	subs	r0, r0, r2
 800b3a8:	b530      	push	{r4, r5, lr}
 800b3aa:	d10e      	bne.n	800b3ca <__mcmp+0x2a>
 800b3ac:	3314      	adds	r3, #20
 800b3ae:	3114      	adds	r1, #20
 800b3b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b3b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b3b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b3c0:	4295      	cmp	r5, r2
 800b3c2:	d003      	beq.n	800b3cc <__mcmp+0x2c>
 800b3c4:	d205      	bcs.n	800b3d2 <__mcmp+0x32>
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	bd30      	pop	{r4, r5, pc}
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d3f3      	bcc.n	800b3b8 <__mcmp+0x18>
 800b3d0:	e7fb      	b.n	800b3ca <__mcmp+0x2a>
 800b3d2:	2001      	movs	r0, #1
 800b3d4:	e7f9      	b.n	800b3ca <__mcmp+0x2a>
	...

0800b3d8 <__mdiff>:
 800b3d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3dc:	4689      	mov	r9, r1
 800b3de:	4606      	mov	r6, r0
 800b3e0:	4611      	mov	r1, r2
 800b3e2:	4648      	mov	r0, r9
 800b3e4:	4614      	mov	r4, r2
 800b3e6:	f7ff ffdb 	bl	800b3a0 <__mcmp>
 800b3ea:	1e05      	subs	r5, r0, #0
 800b3ec:	d112      	bne.n	800b414 <__mdiff+0x3c>
 800b3ee:	4629      	mov	r1, r5
 800b3f0:	4630      	mov	r0, r6
 800b3f2:	f7ff fd11 	bl	800ae18 <_Balloc>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	b928      	cbnz	r0, 800b406 <__mdiff+0x2e>
 800b3fa:	4b3f      	ldr	r3, [pc, #252]	@ (800b4f8 <__mdiff+0x120>)
 800b3fc:	f240 2137 	movw	r1, #567	@ 0x237
 800b400:	483e      	ldr	r0, [pc, #248]	@ (800b4fc <__mdiff+0x124>)
 800b402:	f000 fbf5 	bl	800bbf0 <__assert_func>
 800b406:	2301      	movs	r3, #1
 800b408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b40c:	4610      	mov	r0, r2
 800b40e:	b003      	add	sp, #12
 800b410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b414:	bfbc      	itt	lt
 800b416:	464b      	movlt	r3, r9
 800b418:	46a1      	movlt	r9, r4
 800b41a:	4630      	mov	r0, r6
 800b41c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b420:	bfba      	itte	lt
 800b422:	461c      	movlt	r4, r3
 800b424:	2501      	movlt	r5, #1
 800b426:	2500      	movge	r5, #0
 800b428:	f7ff fcf6 	bl	800ae18 <_Balloc>
 800b42c:	4602      	mov	r2, r0
 800b42e:	b918      	cbnz	r0, 800b438 <__mdiff+0x60>
 800b430:	4b31      	ldr	r3, [pc, #196]	@ (800b4f8 <__mdiff+0x120>)
 800b432:	f240 2145 	movw	r1, #581	@ 0x245
 800b436:	e7e3      	b.n	800b400 <__mdiff+0x28>
 800b438:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b43c:	6926      	ldr	r6, [r4, #16]
 800b43e:	60c5      	str	r5, [r0, #12]
 800b440:	f109 0310 	add.w	r3, r9, #16
 800b444:	f109 0514 	add.w	r5, r9, #20
 800b448:	f104 0e14 	add.w	lr, r4, #20
 800b44c:	f100 0b14 	add.w	fp, r0, #20
 800b450:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b454:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	46d9      	mov	r9, fp
 800b45c:	f04f 0c00 	mov.w	ip, #0
 800b460:	9b01      	ldr	r3, [sp, #4]
 800b462:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b466:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b46a:	9301      	str	r3, [sp, #4]
 800b46c:	fa1f f38a 	uxth.w	r3, sl
 800b470:	4619      	mov	r1, r3
 800b472:	b283      	uxth	r3, r0
 800b474:	1acb      	subs	r3, r1, r3
 800b476:	0c00      	lsrs	r0, r0, #16
 800b478:	4463      	add	r3, ip
 800b47a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b47e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b482:	b29b      	uxth	r3, r3
 800b484:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b488:	4576      	cmp	r6, lr
 800b48a:	f849 3b04 	str.w	r3, [r9], #4
 800b48e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b492:	d8e5      	bhi.n	800b460 <__mdiff+0x88>
 800b494:	1b33      	subs	r3, r6, r4
 800b496:	3b15      	subs	r3, #21
 800b498:	f023 0303 	bic.w	r3, r3, #3
 800b49c:	3415      	adds	r4, #21
 800b49e:	3304      	adds	r3, #4
 800b4a0:	42a6      	cmp	r6, r4
 800b4a2:	bf38      	it	cc
 800b4a4:	2304      	movcc	r3, #4
 800b4a6:	441d      	add	r5, r3
 800b4a8:	445b      	add	r3, fp
 800b4aa:	461e      	mov	r6, r3
 800b4ac:	462c      	mov	r4, r5
 800b4ae:	4544      	cmp	r4, r8
 800b4b0:	d30e      	bcc.n	800b4d0 <__mdiff+0xf8>
 800b4b2:	f108 0103 	add.w	r1, r8, #3
 800b4b6:	1b49      	subs	r1, r1, r5
 800b4b8:	f021 0103 	bic.w	r1, r1, #3
 800b4bc:	3d03      	subs	r5, #3
 800b4be:	45a8      	cmp	r8, r5
 800b4c0:	bf38      	it	cc
 800b4c2:	2100      	movcc	r1, #0
 800b4c4:	440b      	add	r3, r1
 800b4c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b4ca:	b191      	cbz	r1, 800b4f2 <__mdiff+0x11a>
 800b4cc:	6117      	str	r7, [r2, #16]
 800b4ce:	e79d      	b.n	800b40c <__mdiff+0x34>
 800b4d0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b4d4:	46e6      	mov	lr, ip
 800b4d6:	0c08      	lsrs	r0, r1, #16
 800b4d8:	fa1c fc81 	uxtah	ip, ip, r1
 800b4dc:	4471      	add	r1, lr
 800b4de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b4e2:	b289      	uxth	r1, r1
 800b4e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b4e8:	f846 1b04 	str.w	r1, [r6], #4
 800b4ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b4f0:	e7dd      	b.n	800b4ae <__mdiff+0xd6>
 800b4f2:	3f01      	subs	r7, #1
 800b4f4:	e7e7      	b.n	800b4c6 <__mdiff+0xee>
 800b4f6:	bf00      	nop
 800b4f8:	0800c4b9 	.word	0x0800c4b9
 800b4fc:	0800c52a 	.word	0x0800c52a

0800b500 <__ulp>:
 800b500:	b082      	sub	sp, #8
 800b502:	ed8d 0b00 	vstr	d0, [sp]
 800b506:	9a01      	ldr	r2, [sp, #4]
 800b508:	4b0f      	ldr	r3, [pc, #60]	@ (800b548 <__ulp+0x48>)
 800b50a:	4013      	ands	r3, r2
 800b50c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b510:	2b00      	cmp	r3, #0
 800b512:	dc08      	bgt.n	800b526 <__ulp+0x26>
 800b514:	425b      	negs	r3, r3
 800b516:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b51a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b51e:	da04      	bge.n	800b52a <__ulp+0x2a>
 800b520:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b524:	4113      	asrs	r3, r2
 800b526:	2200      	movs	r2, #0
 800b528:	e008      	b.n	800b53c <__ulp+0x3c>
 800b52a:	f1a2 0314 	sub.w	r3, r2, #20
 800b52e:	2b1e      	cmp	r3, #30
 800b530:	bfda      	itte	le
 800b532:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b536:	40da      	lsrle	r2, r3
 800b538:	2201      	movgt	r2, #1
 800b53a:	2300      	movs	r3, #0
 800b53c:	4619      	mov	r1, r3
 800b53e:	4610      	mov	r0, r2
 800b540:	ec41 0b10 	vmov	d0, r0, r1
 800b544:	b002      	add	sp, #8
 800b546:	4770      	bx	lr
 800b548:	7ff00000 	.word	0x7ff00000

0800b54c <__b2d>:
 800b54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b550:	6906      	ldr	r6, [r0, #16]
 800b552:	f100 0814 	add.w	r8, r0, #20
 800b556:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b55a:	1f37      	subs	r7, r6, #4
 800b55c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b560:	4610      	mov	r0, r2
 800b562:	f7ff fd4b 	bl	800affc <__hi0bits>
 800b566:	f1c0 0320 	rsb	r3, r0, #32
 800b56a:	280a      	cmp	r0, #10
 800b56c:	600b      	str	r3, [r1, #0]
 800b56e:	491b      	ldr	r1, [pc, #108]	@ (800b5dc <__b2d+0x90>)
 800b570:	dc15      	bgt.n	800b59e <__b2d+0x52>
 800b572:	f1c0 0c0b 	rsb	ip, r0, #11
 800b576:	fa22 f30c 	lsr.w	r3, r2, ip
 800b57a:	45b8      	cmp	r8, r7
 800b57c:	ea43 0501 	orr.w	r5, r3, r1
 800b580:	bf34      	ite	cc
 800b582:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b586:	2300      	movcs	r3, #0
 800b588:	3015      	adds	r0, #21
 800b58a:	fa02 f000 	lsl.w	r0, r2, r0
 800b58e:	fa23 f30c 	lsr.w	r3, r3, ip
 800b592:	4303      	orrs	r3, r0
 800b594:	461c      	mov	r4, r3
 800b596:	ec45 4b10 	vmov	d0, r4, r5
 800b59a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59e:	45b8      	cmp	r8, r7
 800b5a0:	bf3a      	itte	cc
 800b5a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b5a6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b5aa:	2300      	movcs	r3, #0
 800b5ac:	380b      	subs	r0, #11
 800b5ae:	d012      	beq.n	800b5d6 <__b2d+0x8a>
 800b5b0:	f1c0 0120 	rsb	r1, r0, #32
 800b5b4:	fa23 f401 	lsr.w	r4, r3, r1
 800b5b8:	4082      	lsls	r2, r0
 800b5ba:	4322      	orrs	r2, r4
 800b5bc:	4547      	cmp	r7, r8
 800b5be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b5c2:	bf8c      	ite	hi
 800b5c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b5c8:	2200      	movls	r2, #0
 800b5ca:	4083      	lsls	r3, r0
 800b5cc:	40ca      	lsrs	r2, r1
 800b5ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	e7de      	b.n	800b594 <__b2d+0x48>
 800b5d6:	ea42 0501 	orr.w	r5, r2, r1
 800b5da:	e7db      	b.n	800b594 <__b2d+0x48>
 800b5dc:	3ff00000 	.word	0x3ff00000

0800b5e0 <__d2b>:
 800b5e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5e4:	460f      	mov	r7, r1
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	ec59 8b10 	vmov	r8, r9, d0
 800b5ec:	4616      	mov	r6, r2
 800b5ee:	f7ff fc13 	bl	800ae18 <_Balloc>
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	b930      	cbnz	r0, 800b604 <__d2b+0x24>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	4b23      	ldr	r3, [pc, #140]	@ (800b688 <__d2b+0xa8>)
 800b5fa:	4824      	ldr	r0, [pc, #144]	@ (800b68c <__d2b+0xac>)
 800b5fc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b600:	f000 faf6 	bl	800bbf0 <__assert_func>
 800b604:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b608:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b60c:	b10d      	cbz	r5, 800b612 <__d2b+0x32>
 800b60e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	f1b8 0300 	subs.w	r3, r8, #0
 800b618:	d023      	beq.n	800b662 <__d2b+0x82>
 800b61a:	4668      	mov	r0, sp
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	f7ff fd0c 	bl	800b03a <__lo0bits>
 800b622:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b626:	b1d0      	cbz	r0, 800b65e <__d2b+0x7e>
 800b628:	f1c0 0320 	rsb	r3, r0, #32
 800b62c:	fa02 f303 	lsl.w	r3, r2, r3
 800b630:	430b      	orrs	r3, r1
 800b632:	40c2      	lsrs	r2, r0
 800b634:	6163      	str	r3, [r4, #20]
 800b636:	9201      	str	r2, [sp, #4]
 800b638:	9b01      	ldr	r3, [sp, #4]
 800b63a:	61a3      	str	r3, [r4, #24]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	bf0c      	ite	eq
 800b640:	2201      	moveq	r2, #1
 800b642:	2202      	movne	r2, #2
 800b644:	6122      	str	r2, [r4, #16]
 800b646:	b1a5      	cbz	r5, 800b672 <__d2b+0x92>
 800b648:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b64c:	4405      	add	r5, r0
 800b64e:	603d      	str	r5, [r7, #0]
 800b650:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b654:	6030      	str	r0, [r6, #0]
 800b656:	4620      	mov	r0, r4
 800b658:	b003      	add	sp, #12
 800b65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b65e:	6161      	str	r1, [r4, #20]
 800b660:	e7ea      	b.n	800b638 <__d2b+0x58>
 800b662:	a801      	add	r0, sp, #4
 800b664:	f7ff fce9 	bl	800b03a <__lo0bits>
 800b668:	9b01      	ldr	r3, [sp, #4]
 800b66a:	6163      	str	r3, [r4, #20]
 800b66c:	3020      	adds	r0, #32
 800b66e:	2201      	movs	r2, #1
 800b670:	e7e8      	b.n	800b644 <__d2b+0x64>
 800b672:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b676:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b67a:	6038      	str	r0, [r7, #0]
 800b67c:	6918      	ldr	r0, [r3, #16]
 800b67e:	f7ff fcbd 	bl	800affc <__hi0bits>
 800b682:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b686:	e7e5      	b.n	800b654 <__d2b+0x74>
 800b688:	0800c4b9 	.word	0x0800c4b9
 800b68c:	0800c52a 	.word	0x0800c52a

0800b690 <__ratio>:
 800b690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	b085      	sub	sp, #20
 800b696:	e9cd 1000 	strd	r1, r0, [sp]
 800b69a:	a902      	add	r1, sp, #8
 800b69c:	f7ff ff56 	bl	800b54c <__b2d>
 800b6a0:	9800      	ldr	r0, [sp, #0]
 800b6a2:	a903      	add	r1, sp, #12
 800b6a4:	ec55 4b10 	vmov	r4, r5, d0
 800b6a8:	f7ff ff50 	bl	800b54c <__b2d>
 800b6ac:	9b01      	ldr	r3, [sp, #4]
 800b6ae:	6919      	ldr	r1, [r3, #16]
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	1ac9      	subs	r1, r1, r3
 800b6b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b6ba:	1a9b      	subs	r3, r3, r2
 800b6bc:	ec5b ab10 	vmov	sl, fp, d0
 800b6c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	bfce      	itee	gt
 800b6c8:	462a      	movgt	r2, r5
 800b6ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6ce:	465a      	movle	r2, fp
 800b6d0:	462f      	mov	r7, r5
 800b6d2:	46d9      	mov	r9, fp
 800b6d4:	bfcc      	ite	gt
 800b6d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b6de:	464b      	mov	r3, r9
 800b6e0:	4652      	mov	r2, sl
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	f7f5 f8b1 	bl	800084c <__aeabi_ddiv>
 800b6ea:	ec41 0b10 	vmov	d0, r0, r1
 800b6ee:	b005      	add	sp, #20
 800b6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b6f4 <__copybits>:
 800b6f4:	3901      	subs	r1, #1
 800b6f6:	b570      	push	{r4, r5, r6, lr}
 800b6f8:	1149      	asrs	r1, r1, #5
 800b6fa:	6914      	ldr	r4, [r2, #16]
 800b6fc:	3101      	adds	r1, #1
 800b6fe:	f102 0314 	add.w	r3, r2, #20
 800b702:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b706:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b70a:	1f05      	subs	r5, r0, #4
 800b70c:	42a3      	cmp	r3, r4
 800b70e:	d30c      	bcc.n	800b72a <__copybits+0x36>
 800b710:	1aa3      	subs	r3, r4, r2
 800b712:	3b11      	subs	r3, #17
 800b714:	f023 0303 	bic.w	r3, r3, #3
 800b718:	3211      	adds	r2, #17
 800b71a:	42a2      	cmp	r2, r4
 800b71c:	bf88      	it	hi
 800b71e:	2300      	movhi	r3, #0
 800b720:	4418      	add	r0, r3
 800b722:	2300      	movs	r3, #0
 800b724:	4288      	cmp	r0, r1
 800b726:	d305      	bcc.n	800b734 <__copybits+0x40>
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b72e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b732:	e7eb      	b.n	800b70c <__copybits+0x18>
 800b734:	f840 3b04 	str.w	r3, [r0], #4
 800b738:	e7f4      	b.n	800b724 <__copybits+0x30>

0800b73a <__any_on>:
 800b73a:	f100 0214 	add.w	r2, r0, #20
 800b73e:	6900      	ldr	r0, [r0, #16]
 800b740:	114b      	asrs	r3, r1, #5
 800b742:	4298      	cmp	r0, r3
 800b744:	b510      	push	{r4, lr}
 800b746:	db11      	blt.n	800b76c <__any_on+0x32>
 800b748:	dd0a      	ble.n	800b760 <__any_on+0x26>
 800b74a:	f011 011f 	ands.w	r1, r1, #31
 800b74e:	d007      	beq.n	800b760 <__any_on+0x26>
 800b750:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b754:	fa24 f001 	lsr.w	r0, r4, r1
 800b758:	fa00 f101 	lsl.w	r1, r0, r1
 800b75c:	428c      	cmp	r4, r1
 800b75e:	d10b      	bne.n	800b778 <__any_on+0x3e>
 800b760:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b764:	4293      	cmp	r3, r2
 800b766:	d803      	bhi.n	800b770 <__any_on+0x36>
 800b768:	2000      	movs	r0, #0
 800b76a:	bd10      	pop	{r4, pc}
 800b76c:	4603      	mov	r3, r0
 800b76e:	e7f7      	b.n	800b760 <__any_on+0x26>
 800b770:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b774:	2900      	cmp	r1, #0
 800b776:	d0f5      	beq.n	800b764 <__any_on+0x2a>
 800b778:	2001      	movs	r0, #1
 800b77a:	e7f6      	b.n	800b76a <__any_on+0x30>

0800b77c <__ascii_wctomb>:
 800b77c:	4603      	mov	r3, r0
 800b77e:	4608      	mov	r0, r1
 800b780:	b141      	cbz	r1, 800b794 <__ascii_wctomb+0x18>
 800b782:	2aff      	cmp	r2, #255	@ 0xff
 800b784:	d904      	bls.n	800b790 <__ascii_wctomb+0x14>
 800b786:	228a      	movs	r2, #138	@ 0x8a
 800b788:	601a      	str	r2, [r3, #0]
 800b78a:	f04f 30ff 	mov.w	r0, #4294967295
 800b78e:	4770      	bx	lr
 800b790:	700a      	strb	r2, [r1, #0]
 800b792:	2001      	movs	r0, #1
 800b794:	4770      	bx	lr

0800b796 <__ssputs_r>:
 800b796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b79a:	688e      	ldr	r6, [r1, #8]
 800b79c:	461f      	mov	r7, r3
 800b79e:	42be      	cmp	r6, r7
 800b7a0:	680b      	ldr	r3, [r1, #0]
 800b7a2:	4682      	mov	sl, r0
 800b7a4:	460c      	mov	r4, r1
 800b7a6:	4690      	mov	r8, r2
 800b7a8:	d82d      	bhi.n	800b806 <__ssputs_r+0x70>
 800b7aa:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7ae:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7b2:	d026      	beq.n	800b802 <__ssputs_r+0x6c>
 800b7b4:	6965      	ldr	r5, [r4, #20]
 800b7b6:	6909      	ldr	r1, [r1, #16]
 800b7b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7bc:	eba3 0901 	sub.w	r9, r3, r1
 800b7c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7c4:	1c7b      	adds	r3, r7, #1
 800b7c6:	444b      	add	r3, r9
 800b7c8:	106d      	asrs	r5, r5, #1
 800b7ca:	429d      	cmp	r5, r3
 800b7cc:	bf38      	it	cc
 800b7ce:	461d      	movcc	r5, r3
 800b7d0:	0553      	lsls	r3, r2, #21
 800b7d2:	d527      	bpl.n	800b824 <__ssputs_r+0x8e>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f7ff fa81 	bl	800acdc <_malloc_r>
 800b7da:	4606      	mov	r6, r0
 800b7dc:	b360      	cbz	r0, 800b838 <__ssputs_r+0xa2>
 800b7de:	6921      	ldr	r1, [r4, #16]
 800b7e0:	464a      	mov	r2, r9
 800b7e2:	f7fe f860 	bl	80098a6 <memcpy>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7f0:	81a3      	strh	r3, [r4, #12]
 800b7f2:	6126      	str	r6, [r4, #16]
 800b7f4:	6165      	str	r5, [r4, #20]
 800b7f6:	444e      	add	r6, r9
 800b7f8:	eba5 0509 	sub.w	r5, r5, r9
 800b7fc:	6026      	str	r6, [r4, #0]
 800b7fe:	60a5      	str	r5, [r4, #8]
 800b800:	463e      	mov	r6, r7
 800b802:	42be      	cmp	r6, r7
 800b804:	d900      	bls.n	800b808 <__ssputs_r+0x72>
 800b806:	463e      	mov	r6, r7
 800b808:	6820      	ldr	r0, [r4, #0]
 800b80a:	4632      	mov	r2, r6
 800b80c:	4641      	mov	r1, r8
 800b80e:	f000 f9c5 	bl	800bb9c <memmove>
 800b812:	68a3      	ldr	r3, [r4, #8]
 800b814:	1b9b      	subs	r3, r3, r6
 800b816:	60a3      	str	r3, [r4, #8]
 800b818:	6823      	ldr	r3, [r4, #0]
 800b81a:	4433      	add	r3, r6
 800b81c:	6023      	str	r3, [r4, #0]
 800b81e:	2000      	movs	r0, #0
 800b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b824:	462a      	mov	r2, r5
 800b826:	f000 fa15 	bl	800bc54 <_realloc_r>
 800b82a:	4606      	mov	r6, r0
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d1e0      	bne.n	800b7f2 <__ssputs_r+0x5c>
 800b830:	6921      	ldr	r1, [r4, #16]
 800b832:	4650      	mov	r0, sl
 800b834:	f7fe fea4 	bl	800a580 <_free_r>
 800b838:	230c      	movs	r3, #12
 800b83a:	f8ca 3000 	str.w	r3, [sl]
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b844:	81a3      	strh	r3, [r4, #12]
 800b846:	f04f 30ff 	mov.w	r0, #4294967295
 800b84a:	e7e9      	b.n	800b820 <__ssputs_r+0x8a>

0800b84c <_svfiprintf_r>:
 800b84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b850:	4698      	mov	r8, r3
 800b852:	898b      	ldrh	r3, [r1, #12]
 800b854:	061b      	lsls	r3, r3, #24
 800b856:	b09d      	sub	sp, #116	@ 0x74
 800b858:	4607      	mov	r7, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	4614      	mov	r4, r2
 800b85e:	d510      	bpl.n	800b882 <_svfiprintf_r+0x36>
 800b860:	690b      	ldr	r3, [r1, #16]
 800b862:	b973      	cbnz	r3, 800b882 <_svfiprintf_r+0x36>
 800b864:	2140      	movs	r1, #64	@ 0x40
 800b866:	f7ff fa39 	bl	800acdc <_malloc_r>
 800b86a:	6028      	str	r0, [r5, #0]
 800b86c:	6128      	str	r0, [r5, #16]
 800b86e:	b930      	cbnz	r0, 800b87e <_svfiprintf_r+0x32>
 800b870:	230c      	movs	r3, #12
 800b872:	603b      	str	r3, [r7, #0]
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	b01d      	add	sp, #116	@ 0x74
 800b87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87e:	2340      	movs	r3, #64	@ 0x40
 800b880:	616b      	str	r3, [r5, #20]
 800b882:	2300      	movs	r3, #0
 800b884:	9309      	str	r3, [sp, #36]	@ 0x24
 800b886:	2320      	movs	r3, #32
 800b888:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b88c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b890:	2330      	movs	r3, #48	@ 0x30
 800b892:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba30 <_svfiprintf_r+0x1e4>
 800b896:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b89a:	f04f 0901 	mov.w	r9, #1
 800b89e:	4623      	mov	r3, r4
 800b8a0:	469a      	mov	sl, r3
 800b8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8a6:	b10a      	cbz	r2, 800b8ac <_svfiprintf_r+0x60>
 800b8a8:	2a25      	cmp	r2, #37	@ 0x25
 800b8aa:	d1f9      	bne.n	800b8a0 <_svfiprintf_r+0x54>
 800b8ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b8b0:	d00b      	beq.n	800b8ca <_svfiprintf_r+0x7e>
 800b8b2:	465b      	mov	r3, fp
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	4629      	mov	r1, r5
 800b8b8:	4638      	mov	r0, r7
 800b8ba:	f7ff ff6c 	bl	800b796 <__ssputs_r>
 800b8be:	3001      	adds	r0, #1
 800b8c0:	f000 80a7 	beq.w	800ba12 <_svfiprintf_r+0x1c6>
 800b8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8c6:	445a      	add	r2, fp
 800b8c8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	f000 809f 	beq.w	800ba12 <_svfiprintf_r+0x1c6>
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8de:	f10a 0a01 	add.w	sl, sl, #1
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	9307      	str	r3, [sp, #28]
 800b8e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8ea:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8ec:	4654      	mov	r4, sl
 800b8ee:	2205      	movs	r2, #5
 800b8f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8f4:	484e      	ldr	r0, [pc, #312]	@ (800ba30 <_svfiprintf_r+0x1e4>)
 800b8f6:	f7f4 fc6b 	bl	80001d0 <memchr>
 800b8fa:	9a04      	ldr	r2, [sp, #16]
 800b8fc:	b9d8      	cbnz	r0, 800b936 <_svfiprintf_r+0xea>
 800b8fe:	06d0      	lsls	r0, r2, #27
 800b900:	bf44      	itt	mi
 800b902:	2320      	movmi	r3, #32
 800b904:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b908:	0711      	lsls	r1, r2, #28
 800b90a:	bf44      	itt	mi
 800b90c:	232b      	movmi	r3, #43	@ 0x2b
 800b90e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b912:	f89a 3000 	ldrb.w	r3, [sl]
 800b916:	2b2a      	cmp	r3, #42	@ 0x2a
 800b918:	d015      	beq.n	800b946 <_svfiprintf_r+0xfa>
 800b91a:	9a07      	ldr	r2, [sp, #28]
 800b91c:	4654      	mov	r4, sl
 800b91e:	2000      	movs	r0, #0
 800b920:	f04f 0c0a 	mov.w	ip, #10
 800b924:	4621      	mov	r1, r4
 800b926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b92a:	3b30      	subs	r3, #48	@ 0x30
 800b92c:	2b09      	cmp	r3, #9
 800b92e:	d94b      	bls.n	800b9c8 <_svfiprintf_r+0x17c>
 800b930:	b1b0      	cbz	r0, 800b960 <_svfiprintf_r+0x114>
 800b932:	9207      	str	r2, [sp, #28]
 800b934:	e014      	b.n	800b960 <_svfiprintf_r+0x114>
 800b936:	eba0 0308 	sub.w	r3, r0, r8
 800b93a:	fa09 f303 	lsl.w	r3, r9, r3
 800b93e:	4313      	orrs	r3, r2
 800b940:	9304      	str	r3, [sp, #16]
 800b942:	46a2      	mov	sl, r4
 800b944:	e7d2      	b.n	800b8ec <_svfiprintf_r+0xa0>
 800b946:	9b03      	ldr	r3, [sp, #12]
 800b948:	1d19      	adds	r1, r3, #4
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	9103      	str	r1, [sp, #12]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	bfbb      	ittet	lt
 800b952:	425b      	neglt	r3, r3
 800b954:	f042 0202 	orrlt.w	r2, r2, #2
 800b958:	9307      	strge	r3, [sp, #28]
 800b95a:	9307      	strlt	r3, [sp, #28]
 800b95c:	bfb8      	it	lt
 800b95e:	9204      	strlt	r2, [sp, #16]
 800b960:	7823      	ldrb	r3, [r4, #0]
 800b962:	2b2e      	cmp	r3, #46	@ 0x2e
 800b964:	d10a      	bne.n	800b97c <_svfiprintf_r+0x130>
 800b966:	7863      	ldrb	r3, [r4, #1]
 800b968:	2b2a      	cmp	r3, #42	@ 0x2a
 800b96a:	d132      	bne.n	800b9d2 <_svfiprintf_r+0x186>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	1d1a      	adds	r2, r3, #4
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	9203      	str	r2, [sp, #12]
 800b974:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b978:	3402      	adds	r4, #2
 800b97a:	9305      	str	r3, [sp, #20]
 800b97c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba40 <_svfiprintf_r+0x1f4>
 800b980:	7821      	ldrb	r1, [r4, #0]
 800b982:	2203      	movs	r2, #3
 800b984:	4650      	mov	r0, sl
 800b986:	f7f4 fc23 	bl	80001d0 <memchr>
 800b98a:	b138      	cbz	r0, 800b99c <_svfiprintf_r+0x150>
 800b98c:	9b04      	ldr	r3, [sp, #16]
 800b98e:	eba0 000a 	sub.w	r0, r0, sl
 800b992:	2240      	movs	r2, #64	@ 0x40
 800b994:	4082      	lsls	r2, r0
 800b996:	4313      	orrs	r3, r2
 800b998:	3401      	adds	r4, #1
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a0:	4824      	ldr	r0, [pc, #144]	@ (800ba34 <_svfiprintf_r+0x1e8>)
 800b9a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9a6:	2206      	movs	r2, #6
 800b9a8:	f7f4 fc12 	bl	80001d0 <memchr>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d036      	beq.n	800ba1e <_svfiprintf_r+0x1d2>
 800b9b0:	4b21      	ldr	r3, [pc, #132]	@ (800ba38 <_svfiprintf_r+0x1ec>)
 800b9b2:	bb1b      	cbnz	r3, 800b9fc <_svfiprintf_r+0x1b0>
 800b9b4:	9b03      	ldr	r3, [sp, #12]
 800b9b6:	3307      	adds	r3, #7
 800b9b8:	f023 0307 	bic.w	r3, r3, #7
 800b9bc:	3308      	adds	r3, #8
 800b9be:	9303      	str	r3, [sp, #12]
 800b9c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9c2:	4433      	add	r3, r6
 800b9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9c6:	e76a      	b.n	800b89e <_svfiprintf_r+0x52>
 800b9c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	2001      	movs	r0, #1
 800b9d0:	e7a8      	b.n	800b924 <_svfiprintf_r+0xd8>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	3401      	adds	r4, #1
 800b9d6:	9305      	str	r3, [sp, #20]
 800b9d8:	4619      	mov	r1, r3
 800b9da:	f04f 0c0a 	mov.w	ip, #10
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9e4:	3a30      	subs	r2, #48	@ 0x30
 800b9e6:	2a09      	cmp	r2, #9
 800b9e8:	d903      	bls.n	800b9f2 <_svfiprintf_r+0x1a6>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d0c6      	beq.n	800b97c <_svfiprintf_r+0x130>
 800b9ee:	9105      	str	r1, [sp, #20]
 800b9f0:	e7c4      	b.n	800b97c <_svfiprintf_r+0x130>
 800b9f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e7f0      	b.n	800b9de <_svfiprintf_r+0x192>
 800b9fc:	ab03      	add	r3, sp, #12
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	462a      	mov	r2, r5
 800ba02:	4b0e      	ldr	r3, [pc, #56]	@ (800ba3c <_svfiprintf_r+0x1f0>)
 800ba04:	a904      	add	r1, sp, #16
 800ba06:	4638      	mov	r0, r7
 800ba08:	f7fd f9de 	bl	8008dc8 <_printf_float>
 800ba0c:	1c42      	adds	r2, r0, #1
 800ba0e:	4606      	mov	r6, r0
 800ba10:	d1d6      	bne.n	800b9c0 <_svfiprintf_r+0x174>
 800ba12:	89ab      	ldrh	r3, [r5, #12]
 800ba14:	065b      	lsls	r3, r3, #25
 800ba16:	f53f af2d 	bmi.w	800b874 <_svfiprintf_r+0x28>
 800ba1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba1c:	e72c      	b.n	800b878 <_svfiprintf_r+0x2c>
 800ba1e:	ab03      	add	r3, sp, #12
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	462a      	mov	r2, r5
 800ba24:	4b05      	ldr	r3, [pc, #20]	@ (800ba3c <_svfiprintf_r+0x1f0>)
 800ba26:	a904      	add	r1, sp, #16
 800ba28:	4638      	mov	r0, r7
 800ba2a:	f7fd fc65 	bl	80092f8 <_printf_i>
 800ba2e:	e7ed      	b.n	800ba0c <_svfiprintf_r+0x1c0>
 800ba30:	0800c680 	.word	0x0800c680
 800ba34:	0800c68a 	.word	0x0800c68a
 800ba38:	08008dc9 	.word	0x08008dc9
 800ba3c:	0800b797 	.word	0x0800b797
 800ba40:	0800c686 	.word	0x0800c686

0800ba44 <__sflush_r>:
 800ba44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	0716      	lsls	r6, r2, #28
 800ba4e:	4605      	mov	r5, r0
 800ba50:	460c      	mov	r4, r1
 800ba52:	d454      	bmi.n	800bafe <__sflush_r+0xba>
 800ba54:	684b      	ldr	r3, [r1, #4]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	dc02      	bgt.n	800ba60 <__sflush_r+0x1c>
 800ba5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	dd48      	ble.n	800baf2 <__sflush_r+0xae>
 800ba60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba62:	2e00      	cmp	r6, #0
 800ba64:	d045      	beq.n	800baf2 <__sflush_r+0xae>
 800ba66:	2300      	movs	r3, #0
 800ba68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ba6c:	682f      	ldr	r7, [r5, #0]
 800ba6e:	6a21      	ldr	r1, [r4, #32]
 800ba70:	602b      	str	r3, [r5, #0]
 800ba72:	d030      	beq.n	800bad6 <__sflush_r+0x92>
 800ba74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ba76:	89a3      	ldrh	r3, [r4, #12]
 800ba78:	0759      	lsls	r1, r3, #29
 800ba7a:	d505      	bpl.n	800ba88 <__sflush_r+0x44>
 800ba7c:	6863      	ldr	r3, [r4, #4]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ba82:	b10b      	cbz	r3, 800ba88 <__sflush_r+0x44>
 800ba84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ba86:	1ad2      	subs	r2, r2, r3
 800ba88:	2300      	movs	r3, #0
 800ba8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba8c:	6a21      	ldr	r1, [r4, #32]
 800ba8e:	4628      	mov	r0, r5
 800ba90:	47b0      	blx	r6
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	d106      	bne.n	800baa6 <__sflush_r+0x62>
 800ba98:	6829      	ldr	r1, [r5, #0]
 800ba9a:	291d      	cmp	r1, #29
 800ba9c:	d82b      	bhi.n	800baf6 <__sflush_r+0xb2>
 800ba9e:	4a2a      	ldr	r2, [pc, #168]	@ (800bb48 <__sflush_r+0x104>)
 800baa0:	410a      	asrs	r2, r1
 800baa2:	07d6      	lsls	r6, r2, #31
 800baa4:	d427      	bmi.n	800baf6 <__sflush_r+0xb2>
 800baa6:	2200      	movs	r2, #0
 800baa8:	6062      	str	r2, [r4, #4]
 800baaa:	04d9      	lsls	r1, r3, #19
 800baac:	6922      	ldr	r2, [r4, #16]
 800baae:	6022      	str	r2, [r4, #0]
 800bab0:	d504      	bpl.n	800babc <__sflush_r+0x78>
 800bab2:	1c42      	adds	r2, r0, #1
 800bab4:	d101      	bne.n	800baba <__sflush_r+0x76>
 800bab6:	682b      	ldr	r3, [r5, #0]
 800bab8:	b903      	cbnz	r3, 800babc <__sflush_r+0x78>
 800baba:	6560      	str	r0, [r4, #84]	@ 0x54
 800babc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800babe:	602f      	str	r7, [r5, #0]
 800bac0:	b1b9      	cbz	r1, 800baf2 <__sflush_r+0xae>
 800bac2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bac6:	4299      	cmp	r1, r3
 800bac8:	d002      	beq.n	800bad0 <__sflush_r+0x8c>
 800baca:	4628      	mov	r0, r5
 800bacc:	f7fe fd58 	bl	800a580 <_free_r>
 800bad0:	2300      	movs	r3, #0
 800bad2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bad4:	e00d      	b.n	800baf2 <__sflush_r+0xae>
 800bad6:	2301      	movs	r3, #1
 800bad8:	4628      	mov	r0, r5
 800bada:	47b0      	blx	r6
 800badc:	4602      	mov	r2, r0
 800bade:	1c50      	adds	r0, r2, #1
 800bae0:	d1c9      	bne.n	800ba76 <__sflush_r+0x32>
 800bae2:	682b      	ldr	r3, [r5, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0c6      	beq.n	800ba76 <__sflush_r+0x32>
 800bae8:	2b1d      	cmp	r3, #29
 800baea:	d001      	beq.n	800baf0 <__sflush_r+0xac>
 800baec:	2b16      	cmp	r3, #22
 800baee:	d11e      	bne.n	800bb2e <__sflush_r+0xea>
 800baf0:	602f      	str	r7, [r5, #0]
 800baf2:	2000      	movs	r0, #0
 800baf4:	e022      	b.n	800bb3c <__sflush_r+0xf8>
 800baf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bafa:	b21b      	sxth	r3, r3
 800bafc:	e01b      	b.n	800bb36 <__sflush_r+0xf2>
 800bafe:	690f      	ldr	r7, [r1, #16]
 800bb00:	2f00      	cmp	r7, #0
 800bb02:	d0f6      	beq.n	800baf2 <__sflush_r+0xae>
 800bb04:	0793      	lsls	r3, r2, #30
 800bb06:	680e      	ldr	r6, [r1, #0]
 800bb08:	bf08      	it	eq
 800bb0a:	694b      	ldreq	r3, [r1, #20]
 800bb0c:	600f      	str	r7, [r1, #0]
 800bb0e:	bf18      	it	ne
 800bb10:	2300      	movne	r3, #0
 800bb12:	eba6 0807 	sub.w	r8, r6, r7
 800bb16:	608b      	str	r3, [r1, #8]
 800bb18:	f1b8 0f00 	cmp.w	r8, #0
 800bb1c:	dde9      	ble.n	800baf2 <__sflush_r+0xae>
 800bb1e:	6a21      	ldr	r1, [r4, #32]
 800bb20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb22:	4643      	mov	r3, r8
 800bb24:	463a      	mov	r2, r7
 800bb26:	4628      	mov	r0, r5
 800bb28:	47b0      	blx	r6
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	dc08      	bgt.n	800bb40 <__sflush_r+0xfc>
 800bb2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb36:	81a3      	strh	r3, [r4, #12]
 800bb38:	f04f 30ff 	mov.w	r0, #4294967295
 800bb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb40:	4407      	add	r7, r0
 800bb42:	eba8 0800 	sub.w	r8, r8, r0
 800bb46:	e7e7      	b.n	800bb18 <__sflush_r+0xd4>
 800bb48:	dfbffffe 	.word	0xdfbffffe

0800bb4c <_fflush_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	690b      	ldr	r3, [r1, #16]
 800bb50:	4605      	mov	r5, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	b913      	cbnz	r3, 800bb5c <_fflush_r+0x10>
 800bb56:	2500      	movs	r5, #0
 800bb58:	4628      	mov	r0, r5
 800bb5a:	bd38      	pop	{r3, r4, r5, pc}
 800bb5c:	b118      	cbz	r0, 800bb66 <_fflush_r+0x1a>
 800bb5e:	6a03      	ldr	r3, [r0, #32]
 800bb60:	b90b      	cbnz	r3, 800bb66 <_fflush_r+0x1a>
 800bb62:	f7fd fd75 	bl	8009650 <__sinit>
 800bb66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d0f3      	beq.n	800bb56 <_fflush_r+0xa>
 800bb6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bb70:	07d0      	lsls	r0, r2, #31
 800bb72:	d404      	bmi.n	800bb7e <_fflush_r+0x32>
 800bb74:	0599      	lsls	r1, r3, #22
 800bb76:	d402      	bmi.n	800bb7e <_fflush_r+0x32>
 800bb78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb7a:	f7fd fe92 	bl	80098a2 <__retarget_lock_acquire_recursive>
 800bb7e:	4628      	mov	r0, r5
 800bb80:	4621      	mov	r1, r4
 800bb82:	f7ff ff5f 	bl	800ba44 <__sflush_r>
 800bb86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bb88:	07da      	lsls	r2, r3, #31
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	d4e4      	bmi.n	800bb58 <_fflush_r+0xc>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	059b      	lsls	r3, r3, #22
 800bb92:	d4e1      	bmi.n	800bb58 <_fflush_r+0xc>
 800bb94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bb96:	f7fd fe85 	bl	80098a4 <__retarget_lock_release_recursive>
 800bb9a:	e7dd      	b.n	800bb58 <_fflush_r+0xc>

0800bb9c <memmove>:
 800bb9c:	4288      	cmp	r0, r1
 800bb9e:	b510      	push	{r4, lr}
 800bba0:	eb01 0402 	add.w	r4, r1, r2
 800bba4:	d902      	bls.n	800bbac <memmove+0x10>
 800bba6:	4284      	cmp	r4, r0
 800bba8:	4623      	mov	r3, r4
 800bbaa:	d807      	bhi.n	800bbbc <memmove+0x20>
 800bbac:	1e43      	subs	r3, r0, #1
 800bbae:	42a1      	cmp	r1, r4
 800bbb0:	d008      	beq.n	800bbc4 <memmove+0x28>
 800bbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbba:	e7f8      	b.n	800bbae <memmove+0x12>
 800bbbc:	4402      	add	r2, r0
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	428a      	cmp	r2, r1
 800bbc2:	d100      	bne.n	800bbc6 <memmove+0x2a>
 800bbc4:	bd10      	pop	{r4, pc}
 800bbc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbce:	e7f7      	b.n	800bbc0 <memmove+0x24>

0800bbd0 <_sbrk_r>:
 800bbd0:	b538      	push	{r3, r4, r5, lr}
 800bbd2:	4d06      	ldr	r5, [pc, #24]	@ (800bbec <_sbrk_r+0x1c>)
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	4608      	mov	r0, r1
 800bbda:	602b      	str	r3, [r5, #0]
 800bbdc:	f7f6 fa94 	bl	8002108 <_sbrk>
 800bbe0:	1c43      	adds	r3, r0, #1
 800bbe2:	d102      	bne.n	800bbea <_sbrk_r+0x1a>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	b103      	cbz	r3, 800bbea <_sbrk_r+0x1a>
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	bd38      	pop	{r3, r4, r5, pc}
 800bbec:	2000f014 	.word	0x2000f014

0800bbf0 <__assert_func>:
 800bbf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbf2:	4614      	mov	r4, r2
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b09      	ldr	r3, [pc, #36]	@ (800bc1c <__assert_func+0x2c>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	4605      	mov	r5, r0
 800bbfc:	68d8      	ldr	r0, [r3, #12]
 800bbfe:	b954      	cbnz	r4, 800bc16 <__assert_func+0x26>
 800bc00:	4b07      	ldr	r3, [pc, #28]	@ (800bc20 <__assert_func+0x30>)
 800bc02:	461c      	mov	r4, r3
 800bc04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc08:	9100      	str	r1, [sp, #0]
 800bc0a:	462b      	mov	r3, r5
 800bc0c:	4905      	ldr	r1, [pc, #20]	@ (800bc24 <__assert_func+0x34>)
 800bc0e:	f000 f84f 	bl	800bcb0 <fiprintf>
 800bc12:	f000 f85f 	bl	800bcd4 <abort>
 800bc16:	4b04      	ldr	r3, [pc, #16]	@ (800bc28 <__assert_func+0x38>)
 800bc18:	e7f4      	b.n	800bc04 <__assert_func+0x14>
 800bc1a:	bf00      	nop
 800bc1c:	20000194 	.word	0x20000194
 800bc20:	0800c6cc 	.word	0x0800c6cc
 800bc24:	0800c69e 	.word	0x0800c69e
 800bc28:	0800c691 	.word	0x0800c691

0800bc2c <_calloc_r>:
 800bc2c:	b570      	push	{r4, r5, r6, lr}
 800bc2e:	fba1 5402 	umull	r5, r4, r1, r2
 800bc32:	b93c      	cbnz	r4, 800bc44 <_calloc_r+0x18>
 800bc34:	4629      	mov	r1, r5
 800bc36:	f7ff f851 	bl	800acdc <_malloc_r>
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	b928      	cbnz	r0, 800bc4a <_calloc_r+0x1e>
 800bc3e:	2600      	movs	r6, #0
 800bc40:	4630      	mov	r0, r6
 800bc42:	bd70      	pop	{r4, r5, r6, pc}
 800bc44:	220c      	movs	r2, #12
 800bc46:	6002      	str	r2, [r0, #0]
 800bc48:	e7f9      	b.n	800bc3e <_calloc_r+0x12>
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	4621      	mov	r1, r4
 800bc4e:	f7fd fd98 	bl	8009782 <memset>
 800bc52:	e7f5      	b.n	800bc40 <_calloc_r+0x14>

0800bc54 <_realloc_r>:
 800bc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc58:	4680      	mov	r8, r0
 800bc5a:	4615      	mov	r5, r2
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	b921      	cbnz	r1, 800bc6a <_realloc_r+0x16>
 800bc60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc64:	4611      	mov	r1, r2
 800bc66:	f7ff b839 	b.w	800acdc <_malloc_r>
 800bc6a:	b92a      	cbnz	r2, 800bc78 <_realloc_r+0x24>
 800bc6c:	f7fe fc88 	bl	800a580 <_free_r>
 800bc70:	2400      	movs	r4, #0
 800bc72:	4620      	mov	r0, r4
 800bc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc78:	f000 f833 	bl	800bce2 <_malloc_usable_size_r>
 800bc7c:	4285      	cmp	r5, r0
 800bc7e:	4606      	mov	r6, r0
 800bc80:	d802      	bhi.n	800bc88 <_realloc_r+0x34>
 800bc82:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bc86:	d8f4      	bhi.n	800bc72 <_realloc_r+0x1e>
 800bc88:	4629      	mov	r1, r5
 800bc8a:	4640      	mov	r0, r8
 800bc8c:	f7ff f826 	bl	800acdc <_malloc_r>
 800bc90:	4607      	mov	r7, r0
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d0ec      	beq.n	800bc70 <_realloc_r+0x1c>
 800bc96:	42b5      	cmp	r5, r6
 800bc98:	462a      	mov	r2, r5
 800bc9a:	4621      	mov	r1, r4
 800bc9c:	bf28      	it	cs
 800bc9e:	4632      	movcs	r2, r6
 800bca0:	f7fd fe01 	bl	80098a6 <memcpy>
 800bca4:	4621      	mov	r1, r4
 800bca6:	4640      	mov	r0, r8
 800bca8:	f7fe fc6a 	bl	800a580 <_free_r>
 800bcac:	463c      	mov	r4, r7
 800bcae:	e7e0      	b.n	800bc72 <_realloc_r+0x1e>

0800bcb0 <fiprintf>:
 800bcb0:	b40e      	push	{r1, r2, r3}
 800bcb2:	b503      	push	{r0, r1, lr}
 800bcb4:	4601      	mov	r1, r0
 800bcb6:	ab03      	add	r3, sp, #12
 800bcb8:	4805      	ldr	r0, [pc, #20]	@ (800bcd0 <fiprintf+0x20>)
 800bcba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcbe:	6800      	ldr	r0, [r0, #0]
 800bcc0:	9301      	str	r3, [sp, #4]
 800bcc2:	f000 f83f 	bl	800bd44 <_vfiprintf_r>
 800bcc6:	b002      	add	sp, #8
 800bcc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bccc:	b003      	add	sp, #12
 800bcce:	4770      	bx	lr
 800bcd0:	20000194 	.word	0x20000194

0800bcd4 <abort>:
 800bcd4:	b508      	push	{r3, lr}
 800bcd6:	2006      	movs	r0, #6
 800bcd8:	f000 fa08 	bl	800c0ec <raise>
 800bcdc:	2001      	movs	r0, #1
 800bcde:	f7f6 f99b 	bl	8002018 <_exit>

0800bce2 <_malloc_usable_size_r>:
 800bce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bce6:	1f18      	subs	r0, r3, #4
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	bfbc      	itt	lt
 800bcec:	580b      	ldrlt	r3, [r1, r0]
 800bcee:	18c0      	addlt	r0, r0, r3
 800bcf0:	4770      	bx	lr

0800bcf2 <__sfputc_r>:
 800bcf2:	6893      	ldr	r3, [r2, #8]
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	b410      	push	{r4}
 800bcfa:	6093      	str	r3, [r2, #8]
 800bcfc:	da08      	bge.n	800bd10 <__sfputc_r+0x1e>
 800bcfe:	6994      	ldr	r4, [r2, #24]
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	db01      	blt.n	800bd08 <__sfputc_r+0x16>
 800bd04:	290a      	cmp	r1, #10
 800bd06:	d103      	bne.n	800bd10 <__sfputc_r+0x1e>
 800bd08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd0c:	f000 b932 	b.w	800bf74 <__swbuf_r>
 800bd10:	6813      	ldr	r3, [r2, #0]
 800bd12:	1c58      	adds	r0, r3, #1
 800bd14:	6010      	str	r0, [r2, #0]
 800bd16:	7019      	strb	r1, [r3, #0]
 800bd18:	4608      	mov	r0, r1
 800bd1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd1e:	4770      	bx	lr

0800bd20 <__sfputs_r>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	4606      	mov	r6, r0
 800bd24:	460f      	mov	r7, r1
 800bd26:	4614      	mov	r4, r2
 800bd28:	18d5      	adds	r5, r2, r3
 800bd2a:	42ac      	cmp	r4, r5
 800bd2c:	d101      	bne.n	800bd32 <__sfputs_r+0x12>
 800bd2e:	2000      	movs	r0, #0
 800bd30:	e007      	b.n	800bd42 <__sfputs_r+0x22>
 800bd32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd36:	463a      	mov	r2, r7
 800bd38:	4630      	mov	r0, r6
 800bd3a:	f7ff ffda 	bl	800bcf2 <__sfputc_r>
 800bd3e:	1c43      	adds	r3, r0, #1
 800bd40:	d1f3      	bne.n	800bd2a <__sfputs_r+0xa>
 800bd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bd44 <_vfiprintf_r>:
 800bd44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd48:	460d      	mov	r5, r1
 800bd4a:	b09d      	sub	sp, #116	@ 0x74
 800bd4c:	4614      	mov	r4, r2
 800bd4e:	4698      	mov	r8, r3
 800bd50:	4606      	mov	r6, r0
 800bd52:	b118      	cbz	r0, 800bd5c <_vfiprintf_r+0x18>
 800bd54:	6a03      	ldr	r3, [r0, #32]
 800bd56:	b90b      	cbnz	r3, 800bd5c <_vfiprintf_r+0x18>
 800bd58:	f7fd fc7a 	bl	8009650 <__sinit>
 800bd5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd5e:	07d9      	lsls	r1, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x2a>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x2a>
 800bd68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6a:	f7fd fd9a 	bl	80098a2 <__retarget_lock_acquire_recursive>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	071b      	lsls	r3, r3, #28
 800bd72:	d501      	bpl.n	800bd78 <_vfiprintf_r+0x34>
 800bd74:	692b      	ldr	r3, [r5, #16]
 800bd76:	b99b      	cbnz	r3, 800bda0 <_vfiprintf_r+0x5c>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f000 f938 	bl	800bff0 <__swsetup_r>
 800bd80:	b170      	cbz	r0, 800bda0 <_vfiprintf_r+0x5c>
 800bd82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd84:	07dc      	lsls	r4, r3, #31
 800bd86:	d504      	bpl.n	800bd92 <_vfiprintf_r+0x4e>
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	b01d      	add	sp, #116	@ 0x74
 800bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd92:	89ab      	ldrh	r3, [r5, #12]
 800bd94:	0598      	lsls	r0, r3, #22
 800bd96:	d4f7      	bmi.n	800bd88 <_vfiprintf_r+0x44>
 800bd98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd9a:	f7fd fd83 	bl	80098a4 <__retarget_lock_release_recursive>
 800bd9e:	e7f3      	b.n	800bd88 <_vfiprintf_r+0x44>
 800bda0:	2300      	movs	r3, #0
 800bda2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bda4:	2320      	movs	r3, #32
 800bda6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdae:	2330      	movs	r3, #48	@ 0x30
 800bdb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf60 <_vfiprintf_r+0x21c>
 800bdb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdb8:	f04f 0901 	mov.w	r9, #1
 800bdbc:	4623      	mov	r3, r4
 800bdbe:	469a      	mov	sl, r3
 800bdc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc4:	b10a      	cbz	r2, 800bdca <_vfiprintf_r+0x86>
 800bdc6:	2a25      	cmp	r2, #37	@ 0x25
 800bdc8:	d1f9      	bne.n	800bdbe <_vfiprintf_r+0x7a>
 800bdca:	ebba 0b04 	subs.w	fp, sl, r4
 800bdce:	d00b      	beq.n	800bde8 <_vfiprintf_r+0xa4>
 800bdd0:	465b      	mov	r3, fp
 800bdd2:	4622      	mov	r2, r4
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffa2 	bl	800bd20 <__sfputs_r>
 800bddc:	3001      	adds	r0, #1
 800bdde:	f000 80a7 	beq.w	800bf30 <_vfiprintf_r+0x1ec>
 800bde2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bde4:	445a      	add	r2, fp
 800bde6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bde8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	f000 809f 	beq.w	800bf30 <_vfiprintf_r+0x1ec>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdfc:	f10a 0a01 	add.w	sl, sl, #1
 800be00:	9304      	str	r3, [sp, #16]
 800be02:	9307      	str	r3, [sp, #28]
 800be04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be08:	931a      	str	r3, [sp, #104]	@ 0x68
 800be0a:	4654      	mov	r4, sl
 800be0c:	2205      	movs	r2, #5
 800be0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be12:	4853      	ldr	r0, [pc, #332]	@ (800bf60 <_vfiprintf_r+0x21c>)
 800be14:	f7f4 f9dc 	bl	80001d0 <memchr>
 800be18:	9a04      	ldr	r2, [sp, #16]
 800be1a:	b9d8      	cbnz	r0, 800be54 <_vfiprintf_r+0x110>
 800be1c:	06d1      	lsls	r1, r2, #27
 800be1e:	bf44      	itt	mi
 800be20:	2320      	movmi	r3, #32
 800be22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be26:	0713      	lsls	r3, r2, #28
 800be28:	bf44      	itt	mi
 800be2a:	232b      	movmi	r3, #43	@ 0x2b
 800be2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be30:	f89a 3000 	ldrb.w	r3, [sl]
 800be34:	2b2a      	cmp	r3, #42	@ 0x2a
 800be36:	d015      	beq.n	800be64 <_vfiprintf_r+0x120>
 800be38:	9a07      	ldr	r2, [sp, #28]
 800be3a:	4654      	mov	r4, sl
 800be3c:	2000      	movs	r0, #0
 800be3e:	f04f 0c0a 	mov.w	ip, #10
 800be42:	4621      	mov	r1, r4
 800be44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be48:	3b30      	subs	r3, #48	@ 0x30
 800be4a:	2b09      	cmp	r3, #9
 800be4c:	d94b      	bls.n	800bee6 <_vfiprintf_r+0x1a2>
 800be4e:	b1b0      	cbz	r0, 800be7e <_vfiprintf_r+0x13a>
 800be50:	9207      	str	r2, [sp, #28]
 800be52:	e014      	b.n	800be7e <_vfiprintf_r+0x13a>
 800be54:	eba0 0308 	sub.w	r3, r0, r8
 800be58:	fa09 f303 	lsl.w	r3, r9, r3
 800be5c:	4313      	orrs	r3, r2
 800be5e:	9304      	str	r3, [sp, #16]
 800be60:	46a2      	mov	sl, r4
 800be62:	e7d2      	b.n	800be0a <_vfiprintf_r+0xc6>
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	1d19      	adds	r1, r3, #4
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	9103      	str	r1, [sp, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	bfbb      	ittet	lt
 800be70:	425b      	neglt	r3, r3
 800be72:	f042 0202 	orrlt.w	r2, r2, #2
 800be76:	9307      	strge	r3, [sp, #28]
 800be78:	9307      	strlt	r3, [sp, #28]
 800be7a:	bfb8      	it	lt
 800be7c:	9204      	strlt	r2, [sp, #16]
 800be7e:	7823      	ldrb	r3, [r4, #0]
 800be80:	2b2e      	cmp	r3, #46	@ 0x2e
 800be82:	d10a      	bne.n	800be9a <_vfiprintf_r+0x156>
 800be84:	7863      	ldrb	r3, [r4, #1]
 800be86:	2b2a      	cmp	r3, #42	@ 0x2a
 800be88:	d132      	bne.n	800bef0 <_vfiprintf_r+0x1ac>
 800be8a:	9b03      	ldr	r3, [sp, #12]
 800be8c:	1d1a      	adds	r2, r3, #4
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	9203      	str	r2, [sp, #12]
 800be92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be96:	3402      	adds	r4, #2
 800be98:	9305      	str	r3, [sp, #20]
 800be9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf70 <_vfiprintf_r+0x22c>
 800be9e:	7821      	ldrb	r1, [r4, #0]
 800bea0:	2203      	movs	r2, #3
 800bea2:	4650      	mov	r0, sl
 800bea4:	f7f4 f994 	bl	80001d0 <memchr>
 800bea8:	b138      	cbz	r0, 800beba <_vfiprintf_r+0x176>
 800beaa:	9b04      	ldr	r3, [sp, #16]
 800beac:	eba0 000a 	sub.w	r0, r0, sl
 800beb0:	2240      	movs	r2, #64	@ 0x40
 800beb2:	4082      	lsls	r2, r0
 800beb4:	4313      	orrs	r3, r2
 800beb6:	3401      	adds	r4, #1
 800beb8:	9304      	str	r3, [sp, #16]
 800beba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bebe:	4829      	ldr	r0, [pc, #164]	@ (800bf64 <_vfiprintf_r+0x220>)
 800bec0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bec4:	2206      	movs	r2, #6
 800bec6:	f7f4 f983 	bl	80001d0 <memchr>
 800beca:	2800      	cmp	r0, #0
 800becc:	d03f      	beq.n	800bf4e <_vfiprintf_r+0x20a>
 800bece:	4b26      	ldr	r3, [pc, #152]	@ (800bf68 <_vfiprintf_r+0x224>)
 800bed0:	bb1b      	cbnz	r3, 800bf1a <_vfiprintf_r+0x1d6>
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	3307      	adds	r3, #7
 800bed6:	f023 0307 	bic.w	r3, r3, #7
 800beda:	3308      	adds	r3, #8
 800bedc:	9303      	str	r3, [sp, #12]
 800bede:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee0:	443b      	add	r3, r7
 800bee2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bee4:	e76a      	b.n	800bdbc <_vfiprintf_r+0x78>
 800bee6:	fb0c 3202 	mla	r2, ip, r2, r3
 800beea:	460c      	mov	r4, r1
 800beec:	2001      	movs	r0, #1
 800beee:	e7a8      	b.n	800be42 <_vfiprintf_r+0xfe>
 800bef0:	2300      	movs	r3, #0
 800bef2:	3401      	adds	r4, #1
 800bef4:	9305      	str	r3, [sp, #20]
 800bef6:	4619      	mov	r1, r3
 800bef8:	f04f 0c0a 	mov.w	ip, #10
 800befc:	4620      	mov	r0, r4
 800befe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf02:	3a30      	subs	r2, #48	@ 0x30
 800bf04:	2a09      	cmp	r2, #9
 800bf06:	d903      	bls.n	800bf10 <_vfiprintf_r+0x1cc>
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d0c6      	beq.n	800be9a <_vfiprintf_r+0x156>
 800bf0c:	9105      	str	r1, [sp, #20]
 800bf0e:	e7c4      	b.n	800be9a <_vfiprintf_r+0x156>
 800bf10:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf14:	4604      	mov	r4, r0
 800bf16:	2301      	movs	r3, #1
 800bf18:	e7f0      	b.n	800befc <_vfiprintf_r+0x1b8>
 800bf1a:	ab03      	add	r3, sp, #12
 800bf1c:	9300      	str	r3, [sp, #0]
 800bf1e:	462a      	mov	r2, r5
 800bf20:	4b12      	ldr	r3, [pc, #72]	@ (800bf6c <_vfiprintf_r+0x228>)
 800bf22:	a904      	add	r1, sp, #16
 800bf24:	4630      	mov	r0, r6
 800bf26:	f7fc ff4f 	bl	8008dc8 <_printf_float>
 800bf2a:	4607      	mov	r7, r0
 800bf2c:	1c78      	adds	r0, r7, #1
 800bf2e:	d1d6      	bne.n	800bede <_vfiprintf_r+0x19a>
 800bf30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf32:	07d9      	lsls	r1, r3, #31
 800bf34:	d405      	bmi.n	800bf42 <_vfiprintf_r+0x1fe>
 800bf36:	89ab      	ldrh	r3, [r5, #12]
 800bf38:	059a      	lsls	r2, r3, #22
 800bf3a:	d402      	bmi.n	800bf42 <_vfiprintf_r+0x1fe>
 800bf3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf3e:	f7fd fcb1 	bl	80098a4 <__retarget_lock_release_recursive>
 800bf42:	89ab      	ldrh	r3, [r5, #12]
 800bf44:	065b      	lsls	r3, r3, #25
 800bf46:	f53f af1f 	bmi.w	800bd88 <_vfiprintf_r+0x44>
 800bf4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf4c:	e71e      	b.n	800bd8c <_vfiprintf_r+0x48>
 800bf4e:	ab03      	add	r3, sp, #12
 800bf50:	9300      	str	r3, [sp, #0]
 800bf52:	462a      	mov	r2, r5
 800bf54:	4b05      	ldr	r3, [pc, #20]	@ (800bf6c <_vfiprintf_r+0x228>)
 800bf56:	a904      	add	r1, sp, #16
 800bf58:	4630      	mov	r0, r6
 800bf5a:	f7fd f9cd 	bl	80092f8 <_printf_i>
 800bf5e:	e7e4      	b.n	800bf2a <_vfiprintf_r+0x1e6>
 800bf60:	0800c680 	.word	0x0800c680
 800bf64:	0800c68a 	.word	0x0800c68a
 800bf68:	08008dc9 	.word	0x08008dc9
 800bf6c:	0800bd21 	.word	0x0800bd21
 800bf70:	0800c686 	.word	0x0800c686

0800bf74 <__swbuf_r>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	460e      	mov	r6, r1
 800bf78:	4614      	mov	r4, r2
 800bf7a:	4605      	mov	r5, r0
 800bf7c:	b118      	cbz	r0, 800bf86 <__swbuf_r+0x12>
 800bf7e:	6a03      	ldr	r3, [r0, #32]
 800bf80:	b90b      	cbnz	r3, 800bf86 <__swbuf_r+0x12>
 800bf82:	f7fd fb65 	bl	8009650 <__sinit>
 800bf86:	69a3      	ldr	r3, [r4, #24]
 800bf88:	60a3      	str	r3, [r4, #8]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	071a      	lsls	r2, r3, #28
 800bf8e:	d501      	bpl.n	800bf94 <__swbuf_r+0x20>
 800bf90:	6923      	ldr	r3, [r4, #16]
 800bf92:	b943      	cbnz	r3, 800bfa6 <__swbuf_r+0x32>
 800bf94:	4621      	mov	r1, r4
 800bf96:	4628      	mov	r0, r5
 800bf98:	f000 f82a 	bl	800bff0 <__swsetup_r>
 800bf9c:	b118      	cbz	r0, 800bfa6 <__swbuf_r+0x32>
 800bf9e:	f04f 37ff 	mov.w	r7, #4294967295
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	6922      	ldr	r2, [r4, #16]
 800bfaa:	1a98      	subs	r0, r3, r2
 800bfac:	6963      	ldr	r3, [r4, #20]
 800bfae:	b2f6      	uxtb	r6, r6
 800bfb0:	4283      	cmp	r3, r0
 800bfb2:	4637      	mov	r7, r6
 800bfb4:	dc05      	bgt.n	800bfc2 <__swbuf_r+0x4e>
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4628      	mov	r0, r5
 800bfba:	f7ff fdc7 	bl	800bb4c <_fflush_r>
 800bfbe:	2800      	cmp	r0, #0
 800bfc0:	d1ed      	bne.n	800bf9e <__swbuf_r+0x2a>
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	60a3      	str	r3, [r4, #8]
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	6022      	str	r2, [r4, #0]
 800bfce:	701e      	strb	r6, [r3, #0]
 800bfd0:	6962      	ldr	r2, [r4, #20]
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d004      	beq.n	800bfe2 <__swbuf_r+0x6e>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	07db      	lsls	r3, r3, #31
 800bfdc:	d5e1      	bpl.n	800bfa2 <__swbuf_r+0x2e>
 800bfde:	2e0a      	cmp	r6, #10
 800bfe0:	d1df      	bne.n	800bfa2 <__swbuf_r+0x2e>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f7ff fdb1 	bl	800bb4c <_fflush_r>
 800bfea:	2800      	cmp	r0, #0
 800bfec:	d0d9      	beq.n	800bfa2 <__swbuf_r+0x2e>
 800bfee:	e7d6      	b.n	800bf9e <__swbuf_r+0x2a>

0800bff0 <__swsetup_r>:
 800bff0:	b538      	push	{r3, r4, r5, lr}
 800bff2:	4b29      	ldr	r3, [pc, #164]	@ (800c098 <__swsetup_r+0xa8>)
 800bff4:	4605      	mov	r5, r0
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	460c      	mov	r4, r1
 800bffa:	b118      	cbz	r0, 800c004 <__swsetup_r+0x14>
 800bffc:	6a03      	ldr	r3, [r0, #32]
 800bffe:	b90b      	cbnz	r3, 800c004 <__swsetup_r+0x14>
 800c000:	f7fd fb26 	bl	8009650 <__sinit>
 800c004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c008:	0719      	lsls	r1, r3, #28
 800c00a:	d422      	bmi.n	800c052 <__swsetup_r+0x62>
 800c00c:	06da      	lsls	r2, r3, #27
 800c00e:	d407      	bmi.n	800c020 <__swsetup_r+0x30>
 800c010:	2209      	movs	r2, #9
 800c012:	602a      	str	r2, [r5, #0]
 800c014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c018:	81a3      	strh	r3, [r4, #12]
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295
 800c01e:	e033      	b.n	800c088 <__swsetup_r+0x98>
 800c020:	0758      	lsls	r0, r3, #29
 800c022:	d512      	bpl.n	800c04a <__swsetup_r+0x5a>
 800c024:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c026:	b141      	cbz	r1, 800c03a <__swsetup_r+0x4a>
 800c028:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c02c:	4299      	cmp	r1, r3
 800c02e:	d002      	beq.n	800c036 <__swsetup_r+0x46>
 800c030:	4628      	mov	r0, r5
 800c032:	f7fe faa5 	bl	800a580 <_free_r>
 800c036:	2300      	movs	r3, #0
 800c038:	6363      	str	r3, [r4, #52]	@ 0x34
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c040:	81a3      	strh	r3, [r4, #12]
 800c042:	2300      	movs	r3, #0
 800c044:	6063      	str	r3, [r4, #4]
 800c046:	6923      	ldr	r3, [r4, #16]
 800c048:	6023      	str	r3, [r4, #0]
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	f043 0308 	orr.w	r3, r3, #8
 800c050:	81a3      	strh	r3, [r4, #12]
 800c052:	6923      	ldr	r3, [r4, #16]
 800c054:	b94b      	cbnz	r3, 800c06a <__swsetup_r+0x7a>
 800c056:	89a3      	ldrh	r3, [r4, #12]
 800c058:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c05c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c060:	d003      	beq.n	800c06a <__swsetup_r+0x7a>
 800c062:	4621      	mov	r1, r4
 800c064:	4628      	mov	r0, r5
 800c066:	f000 f883 	bl	800c170 <__smakebuf_r>
 800c06a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c06e:	f013 0201 	ands.w	r2, r3, #1
 800c072:	d00a      	beq.n	800c08a <__swsetup_r+0x9a>
 800c074:	2200      	movs	r2, #0
 800c076:	60a2      	str	r2, [r4, #8]
 800c078:	6962      	ldr	r2, [r4, #20]
 800c07a:	4252      	negs	r2, r2
 800c07c:	61a2      	str	r2, [r4, #24]
 800c07e:	6922      	ldr	r2, [r4, #16]
 800c080:	b942      	cbnz	r2, 800c094 <__swsetup_r+0xa4>
 800c082:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c086:	d1c5      	bne.n	800c014 <__swsetup_r+0x24>
 800c088:	bd38      	pop	{r3, r4, r5, pc}
 800c08a:	0799      	lsls	r1, r3, #30
 800c08c:	bf58      	it	pl
 800c08e:	6962      	ldrpl	r2, [r4, #20]
 800c090:	60a2      	str	r2, [r4, #8]
 800c092:	e7f4      	b.n	800c07e <__swsetup_r+0x8e>
 800c094:	2000      	movs	r0, #0
 800c096:	e7f7      	b.n	800c088 <__swsetup_r+0x98>
 800c098:	20000194 	.word	0x20000194

0800c09c <_raise_r>:
 800c09c:	291f      	cmp	r1, #31
 800c09e:	b538      	push	{r3, r4, r5, lr}
 800c0a0:	4605      	mov	r5, r0
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	d904      	bls.n	800c0b0 <_raise_r+0x14>
 800c0a6:	2316      	movs	r3, #22
 800c0a8:	6003      	str	r3, [r0, #0]
 800c0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ae:	bd38      	pop	{r3, r4, r5, pc}
 800c0b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0b2:	b112      	cbz	r2, 800c0ba <_raise_r+0x1e>
 800c0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0b8:	b94b      	cbnz	r3, 800c0ce <_raise_r+0x32>
 800c0ba:	4628      	mov	r0, r5
 800c0bc:	f000 f830 	bl	800c120 <_getpid_r>
 800c0c0:	4622      	mov	r2, r4
 800c0c2:	4601      	mov	r1, r0
 800c0c4:	4628      	mov	r0, r5
 800c0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ca:	f000 b817 	b.w	800c0fc <_kill_r>
 800c0ce:	2b01      	cmp	r3, #1
 800c0d0:	d00a      	beq.n	800c0e8 <_raise_r+0x4c>
 800c0d2:	1c59      	adds	r1, r3, #1
 800c0d4:	d103      	bne.n	800c0de <_raise_r+0x42>
 800c0d6:	2316      	movs	r3, #22
 800c0d8:	6003      	str	r3, [r0, #0]
 800c0da:	2001      	movs	r0, #1
 800c0dc:	e7e7      	b.n	800c0ae <_raise_r+0x12>
 800c0de:	2100      	movs	r1, #0
 800c0e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4798      	blx	r3
 800c0e8:	2000      	movs	r0, #0
 800c0ea:	e7e0      	b.n	800c0ae <_raise_r+0x12>

0800c0ec <raise>:
 800c0ec:	4b02      	ldr	r3, [pc, #8]	@ (800c0f8 <raise+0xc>)
 800c0ee:	4601      	mov	r1, r0
 800c0f0:	6818      	ldr	r0, [r3, #0]
 800c0f2:	f7ff bfd3 	b.w	800c09c <_raise_r>
 800c0f6:	bf00      	nop
 800c0f8:	20000194 	.word	0x20000194

0800c0fc <_kill_r>:
 800c0fc:	b538      	push	{r3, r4, r5, lr}
 800c0fe:	4d07      	ldr	r5, [pc, #28]	@ (800c11c <_kill_r+0x20>)
 800c100:	2300      	movs	r3, #0
 800c102:	4604      	mov	r4, r0
 800c104:	4608      	mov	r0, r1
 800c106:	4611      	mov	r1, r2
 800c108:	602b      	str	r3, [r5, #0]
 800c10a:	f7f5 ff75 	bl	8001ff8 <_kill>
 800c10e:	1c43      	adds	r3, r0, #1
 800c110:	d102      	bne.n	800c118 <_kill_r+0x1c>
 800c112:	682b      	ldr	r3, [r5, #0]
 800c114:	b103      	cbz	r3, 800c118 <_kill_r+0x1c>
 800c116:	6023      	str	r3, [r4, #0]
 800c118:	bd38      	pop	{r3, r4, r5, pc}
 800c11a:	bf00      	nop
 800c11c:	2000f014 	.word	0x2000f014

0800c120 <_getpid_r>:
 800c120:	f7f5 bf62 	b.w	8001fe8 <_getpid>

0800c124 <__swhatbuf_r>:
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	460c      	mov	r4, r1
 800c128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c12c:	2900      	cmp	r1, #0
 800c12e:	b096      	sub	sp, #88	@ 0x58
 800c130:	4615      	mov	r5, r2
 800c132:	461e      	mov	r6, r3
 800c134:	da0d      	bge.n	800c152 <__swhatbuf_r+0x2e>
 800c136:	89a3      	ldrh	r3, [r4, #12]
 800c138:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c13c:	f04f 0100 	mov.w	r1, #0
 800c140:	bf14      	ite	ne
 800c142:	2340      	movne	r3, #64	@ 0x40
 800c144:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c148:	2000      	movs	r0, #0
 800c14a:	6031      	str	r1, [r6, #0]
 800c14c:	602b      	str	r3, [r5, #0]
 800c14e:	b016      	add	sp, #88	@ 0x58
 800c150:	bd70      	pop	{r4, r5, r6, pc}
 800c152:	466a      	mov	r2, sp
 800c154:	f000 f848 	bl	800c1e8 <_fstat_r>
 800c158:	2800      	cmp	r0, #0
 800c15a:	dbec      	blt.n	800c136 <__swhatbuf_r+0x12>
 800c15c:	9901      	ldr	r1, [sp, #4]
 800c15e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c162:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c166:	4259      	negs	r1, r3
 800c168:	4159      	adcs	r1, r3
 800c16a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c16e:	e7eb      	b.n	800c148 <__swhatbuf_r+0x24>

0800c170 <__smakebuf_r>:
 800c170:	898b      	ldrh	r3, [r1, #12]
 800c172:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c174:	079d      	lsls	r5, r3, #30
 800c176:	4606      	mov	r6, r0
 800c178:	460c      	mov	r4, r1
 800c17a:	d507      	bpl.n	800c18c <__smakebuf_r+0x1c>
 800c17c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c180:	6023      	str	r3, [r4, #0]
 800c182:	6123      	str	r3, [r4, #16]
 800c184:	2301      	movs	r3, #1
 800c186:	6163      	str	r3, [r4, #20]
 800c188:	b003      	add	sp, #12
 800c18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c18c:	ab01      	add	r3, sp, #4
 800c18e:	466a      	mov	r2, sp
 800c190:	f7ff ffc8 	bl	800c124 <__swhatbuf_r>
 800c194:	9f00      	ldr	r7, [sp, #0]
 800c196:	4605      	mov	r5, r0
 800c198:	4639      	mov	r1, r7
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7fe fd9e 	bl	800acdc <_malloc_r>
 800c1a0:	b948      	cbnz	r0, 800c1b6 <__smakebuf_r+0x46>
 800c1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1a6:	059a      	lsls	r2, r3, #22
 800c1a8:	d4ee      	bmi.n	800c188 <__smakebuf_r+0x18>
 800c1aa:	f023 0303 	bic.w	r3, r3, #3
 800c1ae:	f043 0302 	orr.w	r3, r3, #2
 800c1b2:	81a3      	strh	r3, [r4, #12]
 800c1b4:	e7e2      	b.n	800c17c <__smakebuf_r+0xc>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	6020      	str	r0, [r4, #0]
 800c1ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1be:	81a3      	strh	r3, [r4, #12]
 800c1c0:	9b01      	ldr	r3, [sp, #4]
 800c1c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c1c6:	b15b      	cbz	r3, 800c1e0 <__smakebuf_r+0x70>
 800c1c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	f000 f81d 	bl	800c20c <_isatty_r>
 800c1d2:	b128      	cbz	r0, 800c1e0 <__smakebuf_r+0x70>
 800c1d4:	89a3      	ldrh	r3, [r4, #12]
 800c1d6:	f023 0303 	bic.w	r3, r3, #3
 800c1da:	f043 0301 	orr.w	r3, r3, #1
 800c1de:	81a3      	strh	r3, [r4, #12]
 800c1e0:	89a3      	ldrh	r3, [r4, #12]
 800c1e2:	431d      	orrs	r5, r3
 800c1e4:	81a5      	strh	r5, [r4, #12]
 800c1e6:	e7cf      	b.n	800c188 <__smakebuf_r+0x18>

0800c1e8 <_fstat_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	@ (800c208 <_fstat_r+0x20>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	4611      	mov	r1, r2
 800c1f4:	602b      	str	r3, [r5, #0]
 800c1f6:	f7f5 ff5f 	bl	80020b8 <_fstat>
 800c1fa:	1c43      	adds	r3, r0, #1
 800c1fc:	d102      	bne.n	800c204 <_fstat_r+0x1c>
 800c1fe:	682b      	ldr	r3, [r5, #0]
 800c200:	b103      	cbz	r3, 800c204 <_fstat_r+0x1c>
 800c202:	6023      	str	r3, [r4, #0]
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	bf00      	nop
 800c208:	2000f014 	.word	0x2000f014

0800c20c <_isatty_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d06      	ldr	r5, [pc, #24]	@ (800c228 <_isatty_r+0x1c>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	f7f5 ff5e 	bl	80020d8 <_isatty>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_isatty_r+0x1a>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_isatty_r+0x1a>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	2000f014 	.word	0x2000f014

0800c22c <_init>:
 800c22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c22e:	bf00      	nop
 800c230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c232:	bc08      	pop	{r3}
 800c234:	469e      	mov	lr, r3
 800c236:	4770      	bx	lr

0800c238 <_fini>:
 800c238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c23a:	bf00      	nop
 800c23c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c23e:	bc08      	pop	{r3}
 800c240:	469e      	mov	lr, r3
 800c242:	4770      	bx	lr
