
USRA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08007bc8  08007bc8  00008bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f98  08007f98  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007f98  08007f98  00008f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fa0  08007fa0  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa0  08007fa0  00008fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007fa4  08007fa4  00008fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007fa8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  200001d4  0800817c  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  0800817c  000094d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001198c  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026eb  00000000  00000000  0001ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0001d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbd  00000000  00000000  0001e2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d7f  00000000  00000000  0001ef9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fab  00000000  00000000  00040d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbedb  00000000  00000000  00053cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b8  00000000  00000000  0011fbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001251a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bb0 	.word	0x08007bb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007bb0 	.word	0x08007bb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fbf8 	bl	8001692 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f841 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f943 	bl	8001130 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eaa:	f000 f923 	bl	80010f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000eae:	f000 f8f1 	bl	8001094 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000eb2:	f000 f89b 	bl	8000fec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  float vDAC = 1.2345f;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	@ (8000f10 <main+0x78>)
 8000eb8:	60fb      	str	r3, [r7, #12]
  float vout = 2.3456f;
 8000eba:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <main+0x7c>)
 8000ebc:	60bb      	str	r3, [r7, #8]
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buf, RX_BUF_SIZE);
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	4915      	ldr	r1, [pc, #84]	@ (8000f18 <main+0x80>)
 8000ec2:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <main+0x84>)
 8000ec4:	f002 fe88 	bl	8003bd8 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  int tx_len = sprintf(tx_buf, "vDAC %.4f vout %.4f\r\n", vDAC, vout);
 8000ec8:	68f8      	ldr	r0, [r7, #12]
 8000eca:	f7ff fb3d 	bl	8000548 <__aeabi_f2d>
 8000ece:	4604      	mov	r4, r0
 8000ed0:	460d      	mov	r5, r1
 8000ed2:	68b8      	ldr	r0, [r7, #8]
 8000ed4:	f7ff fb38 	bl	8000548 <__aeabi_f2d>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	e9cd 2300 	strd	r2, r3, [sp]
 8000ee0:	4622      	mov	r2, r4
 8000ee2:	462b      	mov	r3, r5
 8000ee4:	490e      	ldr	r1, [pc, #56]	@ (8000f20 <main+0x88>)
 8000ee6:	480f      	ldr	r0, [pc, #60]	@ (8000f24 <main+0x8c>)
 8000ee8:	f004 fd36 	bl	8005958 <siprintf>
 8000eec:	6078      	str	r0, [r7, #4]
	  if (tx_len > 0)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	dd07      	ble.n	8000f04 <main+0x6c>
	  	  {
		  	  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buf, tx_len, HAL_MAX_DELAY);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	4909      	ldr	r1, [pc, #36]	@ (8000f24 <main+0x8c>)
 8000efe:	4807      	ldr	r0, [pc, #28]	@ (8000f1c <main+0x84>)
 8000f00:	f002 fde0 	bl	8003ac4 <HAL_UART_Transmit>
	  	  }

	;
	  HAL_Delay(1000); // Delay for readability  }
 8000f04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f08:	f000 fc38 	bl	800177c <HAL_Delay>
  {
 8000f0c:	e7dc      	b.n	8000ec8 <main+0x30>
 8000f0e:	bf00      	nop
 8000f10:	3f9e0419 	.word	0x3f9e0419
 8000f14:	40161e4f 	.word	0x40161e4f
 8000f18:	20000370 	.word	0x20000370
 8000f1c:	2000023c 	.word	0x2000023c
 8000f20:	08007bc8 	.word	0x08007bc8
 8000f24:	2000030c 	.word	0x2000030c

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b096      	sub	sp, #88	@ 0x58
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2244      	movs	r2, #68	@ 0x44
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 fd71 	bl	8005a1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f4e:	f001 f961 	bl	8002214 <HAL_PWREx_ControlVoltageScaling>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f58:	f000 f96e 	bl	8001238 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f5c:	f001 f93c 	bl	80021d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <SystemClock_Config+0xc0>)
 8000f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f66:	4a20      	ldr	r2, [pc, #128]	@ (8000fe8 <SystemClock_Config+0xc0>)
 8000f68:	f023 0318 	bic.w	r3, r3, #24
 8000f6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f70:	2314      	movs	r3, #20
 8000f72:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f80:	2360      	movs	r3, #96	@ 0x60
 8000f82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f84:	2302      	movs	r3, #2
 8000f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f90:	2328      	movs	r3, #40	@ 0x28
 8000f92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f94:	2307      	movs	r3, #7
 8000f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f001 f98b 	bl	80022c0 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fb0:	f000 f942 	bl	8001238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	2104      	movs	r1, #4
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fd8b 	bl	8002ae8 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000fd8:	f000 f92e 	bl	8001238 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000fdc:	f002 f99e 	bl	800331c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000fe0:	bf00      	nop
 8000fe2:	3758      	adds	r7, #88	@ 0x58
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b088      	sub	sp, #32
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff2:	f107 0310 	add.w	r3, r7, #16
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001000:	1d3b      	adds	r3, r7, #4
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800100a:	4b20      	ldr	r3, [pc, #128]	@ (800108c <MX_TIM1_Init+0xa0>)
 800100c:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <MX_TIM1_Init+0xa4>)
 800100e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_TIM1_Init+0xa0>)
 8001012:	2231      	movs	r2, #49	@ 0x31
 8001014:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_TIM1_Init+0xa0>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_TIM1_Init+0xa0>)
 800101e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001022:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_TIM1_Init+0xa0>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800102a:	4b18      	ldr	r3, [pc, #96]	@ (800108c <MX_TIM1_Init+0xa0>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001030:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_TIM1_Init+0xa0>)
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001036:	4815      	ldr	r0, [pc, #84]	@ (800108c <MX_TIM1_Init+0xa0>)
 8001038:	f002 fa72 	bl	8003520 <HAL_TIM_Base_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001042:	f000 f8f9 	bl	8001238 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800104c:	f107 0310 	add.w	r3, r7, #16
 8001050:	4619      	mov	r1, r3
 8001052:	480e      	ldr	r0, [pc, #56]	@ (800108c <MX_TIM1_Init+0xa0>)
 8001054:	f002 fabb 	bl	80035ce <HAL_TIM_ConfigClockSource>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800105e:	f000 f8eb 	bl	8001238 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001062:	2320      	movs	r3, #32
 8001064:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_TIM1_Init+0xa0>)
 8001074:	f002 fc72 	bl	800395c <HAL_TIMEx_MasterConfigSynchronization>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800107e:	f000 f8db 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001f0 	.word	0x200001f0
 8001090:	40012c00 	.word	0x40012c00

08001094 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 800109a:	4a15      	ldr	r2, [pc, #84]	@ (80010f0 <MX_USART2_UART_Init+0x5c>)
 800109c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_USART2_UART_Init+0x58>)
 80010d8:	f002 fca6 	bl	8003a28 <HAL_UART_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f8a9 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000023c 	.word	0x2000023c
 80010f0:	40004400 	.word	0x40004400

080010f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_DMA_Init+0x38>)
 80010fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fe:	4a0b      	ldr	r2, [pc, #44]	@ (800112c <MX_DMA_Init+0x38>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6493      	str	r3, [r2, #72]	@ 0x48
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_DMA_Init+0x38>)
 8001108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2010      	movs	r0, #16
 8001118:	f000 fc2f 	bl	800197a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800111c:	2010      	movs	r0, #16
 800111e:	f000 fc48 	bl	80019b2 <HAL_NVIC_EnableIRQ>

}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b2b      	ldr	r3, [pc, #172]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	4a2a      	ldr	r2, [pc, #168]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001152:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a24      	ldr	r2, [pc, #144]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b22      	ldr	r3, [pc, #136]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_GPIO_Init+0xc4>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	2102      	movs	r1, #2
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f001 f807 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	2110      	movs	r1, #16
 800119e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a2:	f001 f801 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2180      	movs	r1, #128	@ 0x80
 80011aa:	4813      	ldr	r0, [pc, #76]	@ (80011f8 <MX_GPIO_Init+0xc8>)
 80011ac:	f000 fffc 	bl	80021a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4;
 80011b0:	2312      	movs	r3, #18
 80011b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f000 fe83 	bl	8001ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ce:	2380      	movs	r3, #128	@ 0x80
 80011d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <MX_GPIO_Init+0xc8>)
 80011e6:	f000 fe75 	bl	8001ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ea:	bf00      	nop
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	48000400 	.word	0x48000400

080011fc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a08      	ldr	r2, [pc, #32]	@ (800122c <HAL_UART_RxCpltCallback+0x30>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10a      	bne.n	8001224 <HAL_UART_RxCpltCallback+0x28>
    {
        // Process received data stored in rx_buf
        // For example, print the received data
        HAL_UART_Transmit(&huart2, (uint8_t*)rx_buf, strlen(rx_buf), HAL_MAX_DELAY);
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <HAL_UART_RxCpltCallback+0x34>)
 8001210:	f7ff f82e 	bl	8000270 <strlen>
 8001214:	4603      	mov	r3, r0
 8001216:	b29a      	uxth	r2, r3
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	4904      	ldr	r1, [pc, #16]	@ (8001230 <HAL_UART_RxCpltCallback+0x34>)
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_UART_RxCpltCallback+0x38>)
 8001220:	f002 fc50 	bl	8003ac4 <HAL_UART_Transmit>

        // Re-enable the UART receive interrupt

    }
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40004400 	.word	0x40004400
 8001230:	20000370 	.word	0x20000370
 8001234:	2000023c 	.word	0x2000023c

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123c:	b672      	cpsid	i
}
 800123e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <Error_Handler+0x8>

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124e:	4a0e      	ldr	r2, [pc, #56]	@ (8001288 <HAL_MspInit+0x44>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6613      	str	r3, [r2, #96]	@ 0x60
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_MspInit+0x44>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001266:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <HAL_MspInit+0x44>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	6593      	str	r3, [r2, #88]	@ 0x58
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_MspInit+0x44>)
 8001270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_TIM_Base_MspInit+0x38>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d10b      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800129e:	4b0a      	ldr	r3, [pc, #40]	@ (80012c8 <HAL_TIM_Base_MspInit+0x3c>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a2:	4a09      	ldr	r2, [pc, #36]	@ (80012c8 <HAL_TIM_Base_MspInit+0x3c>)
 80012a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <HAL_TIM_Base_MspInit+0x3c>)
 80012ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40012c00 	.word	0x40012c00
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09e      	sub	sp, #120	@ 0x78
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2254      	movs	r2, #84	@ 0x54
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fb96 	bl	8005a1e <memset>
  if(huart->Instance==USART2)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a40      	ldr	r2, [pc, #256]	@ (80013f8 <HAL_UART_MspInit+0x12c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d179      	bne.n	80013f0 <HAL_UART_MspInit+0x124>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80012fc:	2302      	movs	r3, #2
 80012fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fe11 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001314:	f7ff ff90 	bl	8001238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001318:	4b38      	ldr	r3, [pc, #224]	@ (80013fc <HAL_UART_MspInit+0x130>)
 800131a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131c:	4a37      	ldr	r2, [pc, #220]	@ (80013fc <HAL_UART_MspInit+0x130>)
 800131e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001322:	6593      	str	r3, [r2, #88]	@ 0x58
 8001324:	4b35      	ldr	r3, [pc, #212]	@ (80013fc <HAL_UART_MspInit+0x130>)
 8001326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132c:	60fb      	str	r3, [r7, #12]
 800132e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b32      	ldr	r3, [pc, #200]	@ (80013fc <HAL_UART_MspInit+0x130>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001334:	4a31      	ldr	r2, [pc, #196]	@ (80013fc <HAL_UART_MspInit+0x130>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800133c:	4b2f      	ldr	r3, [pc, #188]	@ (80013fc <HAL_UART_MspInit+0x130>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001348:	2304      	movs	r3, #4
 800134a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134c:	2302      	movs	r3, #2
 800134e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001358:	2307      	movs	r3, #7
 800135a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001360:	4619      	mov	r1, r3
 8001362:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001366:	f000 fdb5 	bl	8001ed4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800136a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800136e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800137c:	2303      	movs	r3, #3
 800137e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f000 fda3 	bl	8001ed4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800138e:	4b1c      	ldr	r3, [pc, #112]	@ (8001400 <HAL_UART_MspInit+0x134>)
 8001390:	4a1c      	ldr	r2, [pc, #112]	@ (8001404 <HAL_UART_MspInit+0x138>)
 8001392:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001394:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_UART_MspInit+0x134>)
 8001396:	2202      	movs	r2, #2
 8001398:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139a:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <HAL_UART_MspInit+0x134>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b16      	ldr	r3, [pc, #88]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013ac:	4b14      	ldr	r3, [pc, #80]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b2:	4b13      	ldr	r3, [pc, #76]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013ba:	2220      	movs	r2, #32
 80013bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80013c4:	480e      	ldr	r0, [pc, #56]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013c6:	f000 fb0f 	bl	80019e8 <HAL_DMA_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80013d0:	f7ff ff32 	bl	8001238 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80013da:	4a09      	ldr	r2, [pc, #36]	@ (8001400 <HAL_UART_MspInit+0x134>)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2026      	movs	r0, #38	@ 0x26
 80013e6:	f000 fac8 	bl	800197a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013ea:	2026      	movs	r0, #38	@ 0x26
 80013ec:	f000 fae1 	bl	80019b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013f0:	bf00      	nop
 80013f2:	3778      	adds	r7, #120	@ 0x78
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40004400 	.word	0x40004400
 80013fc:	40021000 	.word	0x40021000
 8001400:	200002c4 	.word	0x200002c4
 8001404:	4002006c 	.word	0x4002006c

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <NMI_Handler+0x4>

08001410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <HardFault_Handler+0x4>

08001418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <MemManage_Handler+0x4>

08001420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <BusFault_Handler+0x4>

08001428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <UsageFault_Handler+0x4>

08001430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145e:	f000 f96d 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA1_Channel6_IRQHandler+0x10>)
 800146e:	f000 fc52 	bl	8001d16 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200002c4 	.word	0x200002c4

0800147c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <USART2_IRQHandler+0x10>)
 8001482:	f002 fbf5 	bl	8003c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000023c 	.word	0x2000023c

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014aa:	f004 fb0b 	bl	8005ac4 <__errno>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2216      	movs	r2, #22
 80014b2:	601a      	str	r2, [r3, #0]
  return -1;
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <_exit>:

void _exit (int status)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ffe7 	bl	80014a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d2:	bf00      	nop
 80014d4:	e7fd      	b.n	80014d2 <_exit+0x12>

080014d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af00      	add	r7, sp, #0
 80014dc:	60f8      	str	r0, [r7, #12]
 80014de:	60b9      	str	r1, [r7, #8]
 80014e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	e00a      	b.n	80014fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014e8:	f3af 8000 	nop.w
 80014ec:	4601      	mov	r1, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	60ba      	str	r2, [r7, #8]
 80014f4:	b2ca      	uxtb	r2, r1
 80014f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf0      	blt.n	80014e8 <_read+0x12>
  }

  return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	e009      	b.n	8001536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	60ba      	str	r2, [r7, #8]
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	429a      	cmp	r2, r3
 800153c:	dbf1      	blt.n	8001522 <_write+0x12>
  }
  return len;
 800153e:	687b      	ldr	r3, [r7, #4]
}
 8001540:	4618      	mov	r0, r3
 8001542:	3718      	adds	r7, #24
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_close>:

int _close(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	605a      	str	r2, [r3, #4]
  return 0;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_isatty>:

int _isatty(int file)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001596:	b480      	push	{r7}
 8001598:	b085      	sub	sp, #20
 800159a:	af00      	add	r7, sp, #0
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b8:	4a14      	ldr	r2, [pc, #80]	@ (800160c <_sbrk+0x5c>)
 80015ba:	4b15      	ldr	r3, [pc, #84]	@ (8001610 <_sbrk+0x60>)
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <_sbrk+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d102      	bne.n	80015d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015cc:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <_sbrk+0x64>)
 80015ce:	4a12      	ldr	r2, [pc, #72]	@ (8001618 <_sbrk+0x68>)
 80015d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d207      	bcs.n	80015f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e0:	f004 fa70 	bl	8005ac4 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b08      	ldr	r3, [pc, #32]	@ (8001614 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20010000 	.word	0x20010000
 8001610:	00000400 	.word	0x00000400
 8001614:	20000380 	.word	0x20000380
 8001618:	200004d8 	.word	0x200004d8

0800161c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <SystemInit+0x20>)
 8001622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <SystemInit+0x20>)
 8001628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800162c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   sp, =_estack    /* Set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001644:	f7ff ffea 	bl	800161c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopForever+0x6>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopForever+0xa>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopForever+0xe>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopForever+0x16>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800166e:	f004 fa2f 	bl	8005ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001672:	f7ff fc11 	bl	8000e98 <main>

08001676 <LoopForever>:

LoopForever:
    b LoopForever
 8001676:	e7fe      	b.n	8001676 <LoopForever>
	  ldr   sp, =_estack    /* Set stack pointer */
 8001678:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001684:	08007fa8 	.word	0x08007fa8
  ldr r2, =_sbss
 8001688:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800168c:	200004d4 	.word	0x200004d4

08001690 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC1_IRQHandler>

08001692 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001698:	2300      	movs	r3, #0
 800169a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169c:	2003      	movs	r0, #3
 800169e:	f000 f961 	bl	8001964 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 f80e 	bl	80016c4 <HAL_InitTick>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	e001      	b.n	80016b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016b4:	f7ff fdc6 	bl	8001244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016b8:	79fb      	ldrb	r3, [r7, #7]
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80016d0:	4b17      	ldr	r3, [pc, #92]	@ (8001730 <HAL_InitTick+0x6c>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d023      	beq.n	8001720 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016d8:	4b16      	ldr	r3, [pc, #88]	@ (8001734 <HAL_InitTick+0x70>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_InitTick+0x6c>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f96d 	bl	80019ce <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d809      	bhi.n	8001714 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f937 	bl	800197a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800170c:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_InitTick+0x74>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e007      	b.n	8001724 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e004      	b.n	8001724 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	73fb      	strb	r3, [r7, #15]
 800171e:	e001      	b.n	8001724 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001724:	7bfb      	ldrb	r3, [r7, #15]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	20000384 	.word	0x20000384

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	@ (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000384 	.word	0x20000384

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001796:	4b0a      	ldr	r3, [pc, #40]	@ (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
	...

08001920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3b01      	subs	r3, #1
 800192c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001930:	d301      	bcc.n	8001936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001932:	2301      	movs	r3, #1
 8001934:	e00f      	b.n	8001956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <SysTick_Config+0x40>)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193e:	210f      	movs	r1, #15
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f7ff ff8e 	bl	8001864 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <SysTick_Config+0x40>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194e:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <SysTick_Config+0x40>)
 8001950:	2207      	movs	r2, #7
 8001952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	e000e010 	.word	0xe000e010

08001964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff29 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b086      	sub	sp, #24
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800198c:	f7ff ff3e 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001990:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	6978      	ldr	r0, [r7, #20]
 8001998:	f7ff ff8e 	bl	80018b8 <NVIC_EncodePriority>
 800199c:	4602      	mov	r2, r0
 800199e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff ff5d 	bl	8001864 <__NVIC_SetPriority>
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff31 	bl	8001828 <__NVIC_EnableIRQ>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b082      	sub	sp, #8
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ffa2 	bl	8001920 <SysTick_Config>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
	...

080019e8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e098      	b.n	8001b2c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_DMA_Init+0x150>)
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d80f      	bhi.n	8001a26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b3c <HAL_DMA_Init+0x154>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	4a4b      	ldr	r2, [pc, #300]	@ (8001b40 <HAL_DMA_Init+0x158>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	009a      	lsls	r2, r3, #2
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a48      	ldr	r2, [pc, #288]	@ (8001b44 <HAL_DMA_Init+0x15c>)
 8001a22:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a24:	e00e      	b.n	8001a44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4b46      	ldr	r3, [pc, #280]	@ (8001b48 <HAL_DMA_Init+0x160>)
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a43      	ldr	r2, [pc, #268]	@ (8001b40 <HAL_DMA_Init+0x158>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	009a      	lsls	r2, r3, #2
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a42      	ldr	r2, [pc, #264]	@ (8001b4c <HAL_DMA_Init+0x164>)
 8001a42:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a9e:	d039      	beq.n	8001b14 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	4a27      	ldr	r2, [pc, #156]	@ (8001b44 <HAL_DMA_Init+0x15c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001aaa:	4b29      	ldr	r3, [pc, #164]	@ (8001b50 <HAL_DMA_Init+0x168>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab2:	f003 031c 	and.w	r3, r3, #28
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4924      	ldr	r1, [pc, #144]	@ (8001b50 <HAL_DMA_Init+0x168>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001ac4:	4b22      	ldr	r3, [pc, #136]	@ (8001b50 <HAL_DMA_Init+0x168>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad0:	f003 031c 	and.w	r3, r3, #28
 8001ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad8:	491d      	ldr	r1, [pc, #116]	@ (8001b50 <HAL_DMA_Init+0x168>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	600b      	str	r3, [r1, #0]
 8001ade:	e019      	b.n	8001b14 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <HAL_DMA_Init+0x16c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae8:	f003 031c 	and.w	r3, r3, #28
 8001aec:	210f      	movs	r1, #15
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43db      	mvns	r3, r3
 8001af4:	4917      	ldr	r1, [pc, #92]	@ (8001b54 <HAL_DMA_Init+0x16c>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001afa:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_DMA_Init+0x16c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6859      	ldr	r1, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f003 031c 	and.w	r3, r3, #28
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	4911      	ldr	r1, [pc, #68]	@ (8001b54 <HAL_DMA_Init+0x16c>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40020407 	.word	0x40020407
 8001b3c:	bffdfff8 	.word	0xbffdfff8
 8001b40:	cccccccd 	.word	0xcccccccd
 8001b44:	40020000 	.word	0x40020000
 8001b48:	bffdfbf8 	.word	0xbffdfbf8
 8001b4c:	40020400 	.word	0x40020400
 8001b50:	400200a8 	.word	0x400200a8
 8001b54:	400204a8 	.word	0x400204a8

08001b58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_DMA_Start_IT+0x20>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e04b      	b.n	8001c10 <HAL_DMA_Start_IT+0xb8>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d13a      	bne.n	8001c02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0201 	bic.w	r2, r2, #1
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f95f 	bl	8001e74 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d008      	beq.n	8001bd0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f042 020e 	orr.w	r2, r2, #14
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	e00f      	b.n	8001bf0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f022 0204 	bic.w	r2, r2, #4
 8001bde:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 020a 	orr.w	r2, r2, #10
 8001bee:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e005      	b.n	8001c0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001c0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d008      	beq.n	8001c42 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2204      	movs	r2, #4
 8001c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e022      	b.n	8001c88 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 020e 	bic.w	r2, r2, #14
 8001c50:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	f003 021c 	and.w	r2, r3, #28
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	2101      	movs	r1, #1
 8001c70:	fa01 f202 	lsl.w	r2, r1, r2
 8001c74:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d005      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2204      	movs	r2, #4
 8001cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e029      	b.n	8001d0c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 020e 	bic.w	r2, r2, #14
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cdc:	f003 021c 	and.w	r2, r3, #28
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cea:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	4798      	blx	r3
    }
  }
  return status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b084      	sub	sp, #16
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d32:	f003 031c 	and.w	r3, r3, #28
 8001d36:	2204      	movs	r2, #4
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d026      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x7a>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d021      	beq.n	8001d90 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d107      	bne.n	8001d6a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0204 	bic.w	r2, r2, #4
 8001d68:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f003 021c 	and.w	r2, r3, #28
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d76:	2104      	movs	r1, #4
 8001d78:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d071      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001d8e:	e06c      	b.n	8001e6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d94:	f003 031c 	and.w	r3, r3, #28
 8001d98:	2202      	movs	r2, #2
 8001d9a:	409a      	lsls	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d02e      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xec>
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d029      	beq.n	8001e02 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0320 	and.w	r3, r3, #32
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10b      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 020a 	bic.w	r2, r2, #10
 8001dca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd8:	f003 021c 	and.w	r2, r3, #28
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	2102      	movs	r1, #2
 8001de2:	fa01 f202 	lsl.w	r2, r1, r2
 8001de6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d038      	beq.n	8001e6a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e00:	e033      	b.n	8001e6a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f003 031c 	and.w	r3, r3, #28
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	409a      	lsls	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d02a      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x156>
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d025      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 020e 	bic.w	r2, r2, #14
 8001e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e34:	f003 021c 	and.w	r2, r3, #28
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e42:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e6a:	bf00      	nop
 8001e6c:	bf00      	nop
}
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e86:	f003 021c 	and.w	r2, r3, #28
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f202 	lsl.w	r2, r1, r2
 8001e94:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d108      	bne.n	8001eb8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001eb6:	e007      	b.n	8001ec8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b087      	sub	sp, #28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee2:	e148      	b.n	8002176 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 813a 	beq.w	8002170 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 0303 	and.w	r3, r3, #3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d005      	beq.n	8001f14 <HAL_GPIO_Init+0x40>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d130      	bne.n	8001f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	2203      	movs	r2, #3
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	091b      	lsrs	r3, r3, #4
 8001f60:	f003 0201 	and.w	r2, r3, #1
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d017      	beq.n	8001fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d123      	bne.n	8002006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	08da      	lsrs	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3208      	adds	r2, #8
 8001fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	691a      	ldr	r2, [r3, #16]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	08da      	lsrs	r2, r3, #3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3208      	adds	r2, #8
 8002000:	6939      	ldr	r1, [r7, #16]
 8002002:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	2203      	movs	r2, #3
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0203 	and.w	r2, r3, #3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 8094 	beq.w	8002170 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002048:	4b52      	ldr	r3, [pc, #328]	@ (8002194 <HAL_GPIO_Init+0x2c0>)
 800204a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204c:	4a51      	ldr	r2, [pc, #324]	@ (8002194 <HAL_GPIO_Init+0x2c0>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6613      	str	r3, [r2, #96]	@ 0x60
 8002054:	4b4f      	ldr	r3, [pc, #316]	@ (8002194 <HAL_GPIO_Init+0x2c0>)
 8002056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002060:	4a4d      	ldr	r2, [pc, #308]	@ (8002198 <HAL_GPIO_Init+0x2c4>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_Init+0x1d4>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a43      	ldr	r2, [pc, #268]	@ (800219c <HAL_GPIO_Init+0x2c8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_Init+0x1d0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a42      	ldr	r2, [pc, #264]	@ (80021a0 <HAL_GPIO_Init+0x2cc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_Init+0x1cc>
 800209c:	2302      	movs	r3, #2
 800209e:	e004      	b.n	80020aa <HAL_GPIO_Init+0x1d6>
 80020a0:	2307      	movs	r3, #7
 80020a2:	e002      	b.n	80020aa <HAL_GPIO_Init+0x1d6>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <HAL_GPIO_Init+0x1d6>
 80020a8:	2300      	movs	r3, #0
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	f002 0203 	and.w	r2, r2, #3
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	4093      	lsls	r3, r2
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ba:	4937      	ldr	r1, [pc, #220]	@ (8002198 <HAL_GPIO_Init+0x2c4>)
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c8:	4b36      	ldr	r3, [pc, #216]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80020ec:	4a2d      	ldr	r2, [pc, #180]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80020f2:	4b2c      	ldr	r3, [pc, #176]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4013      	ands	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002116:	4a23      	ldr	r2, [pc, #140]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800211c:	4b21      	ldr	r3, [pc, #132]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43db      	mvns	r3, r3
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002140:	4a18      	ldr	r2, [pc, #96]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002146:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	43db      	mvns	r3, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4013      	ands	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d003      	beq.n	800216a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4313      	orrs	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800216a:	4a0e      	ldr	r2, [pc, #56]	@ (80021a4 <HAL_GPIO_Init+0x2d0>)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	f47f aeaf 	bne.w	8001ee4 <HAL_GPIO_Init+0x10>
  }
}
 8002186:	bf00      	nop
 8002188:	bf00      	nop
 800218a:	371c      	adds	r7, #28
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	40021000 	.word	0x40021000
 8002198:	40010000 	.word	0x40010000
 800219c:	48000400 	.word	0x48000400
 80021a0:	48000800 	.word	0x48000800
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	807b      	strh	r3, [r7, #2]
 80021b4:	4613      	mov	r3, r2
 80021b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b8:	787b      	ldrb	r3, [r7, #1]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021cc:	bf00      	nop
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021dc:	4b05      	ldr	r3, [pc, #20]	@ (80021f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000

080021f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021fc:	4b04      	ldr	r3, [pc, #16]	@ (8002210 <HAL_PWREx_GetVoltageRange+0x18>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40007000 	.word	0x40007000

08002214 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002222:	d130      	bne.n	8002286 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002224:	4b23      	ldr	r3, [pc, #140]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800222c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002230:	d038      	beq.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800223a:	4a1e      	ldr	r2, [pc, #120]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002242:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2232      	movs	r2, #50	@ 0x32
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	4a1b      	ldr	r2, [pc, #108]	@ (80022bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800224e:	fba2 2303 	umull	r2, r3, r2, r3
 8002252:	0c9b      	lsrs	r3, r3, #18
 8002254:	3301      	adds	r3, #1
 8002256:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002258:	e002      	b.n	8002260 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b01      	subs	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002260:	4b14      	ldr	r3, [pc, #80]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800226c:	d102      	bne.n	8002274 <HAL_PWREx_ControlVoltageScaling+0x60>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f2      	bne.n	800225a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002274:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800227c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002280:	d110      	bne.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e00f      	b.n	80022a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002286:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800228e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002292:	d007      	beq.n	80022a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002294:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800229c:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40007000 	.word	0x40007000
 80022b8:	20000000 	.word	0x20000000
 80022bc:	431bde83 	.word	0x431bde83

080022c0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d102      	bne.n	80022d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f000 bc02 	b.w	8002ad8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d4:	4b96      	ldr	r3, [pc, #600]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022de:	4b94      	ldr	r3, [pc, #592]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80e4 	beq.w	80024be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d007      	beq.n	800230c <HAL_RCC_OscConfig+0x4c>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	f040 808b 	bne.w	800241a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 8087 	bne.w	800241a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800230c:	4b88      	ldr	r3, [pc, #544]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_OscConfig+0x64>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e3d9      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a1a      	ldr	r2, [r3, #32]
 8002328:	4b81      	ldr	r3, [pc, #516]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d004      	beq.n	800233e <HAL_RCC_OscConfig+0x7e>
 8002334:	4b7e      	ldr	r3, [pc, #504]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800233c:	e005      	b.n	800234a <HAL_RCC_OscConfig+0x8a>
 800233e:	4b7c      	ldr	r3, [pc, #496]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002344:	091b      	lsrs	r3, r3, #4
 8002346:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800234a:	4293      	cmp	r3, r2
 800234c:	d223      	bcs.n	8002396 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fd8c 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e3ba      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002362:	4b73      	ldr	r3, [pc, #460]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a72      	ldr	r2, [pc, #456]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002368:	f043 0308 	orr.w	r3, r3, #8
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b70      	ldr	r3, [pc, #448]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	496d      	ldr	r1, [pc, #436]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800237c:	4313      	orrs	r3, r2
 800237e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002380:	4b6b      	ldr	r3, [pc, #428]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	4968      	ldr	r1, [pc, #416]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002390:	4313      	orrs	r3, r2
 8002392:	604b      	str	r3, [r1, #4]
 8002394:	e025      	b.n	80023e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002396:	4b66      	ldr	r3, [pc, #408]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a65      	ldr	r2, [pc, #404]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800239c:	f043 0308 	orr.w	r3, r3, #8
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b63      	ldr	r3, [pc, #396]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4960      	ldr	r1, [pc, #384]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	021b      	lsls	r3, r3, #8
 80023c2:	495b      	ldr	r1, [pc, #364]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 fd4c 	bl	8002e70 <RCC_SetFlashLatencyFromMSIRange>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e37a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e2:	f000 fc81 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b51      	ldr	r3, [pc, #324]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4950      	ldr	r1, [pc, #320]	@ (8002534 <HAL_RCC_OscConfig+0x274>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a4e      	ldr	r2, [pc, #312]	@ (8002538 <HAL_RCC_OscConfig+0x278>)
 8002400:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002402:	4b4e      	ldr	r3, [pc, #312]	@ (800253c <HAL_RCC_OscConfig+0x27c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f95c 	bl	80016c4 <HAL_InitTick>
 800240c:	4603      	mov	r3, r0
 800240e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d052      	beq.n	80024bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	e35e      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d032      	beq.n	8002488 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002422:	4b43      	ldr	r3, [pc, #268]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a42      	ldr	r2, [pc, #264]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800242e:	f7ff f999 	bl	8001764 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002436:	f7ff f995 	bl	8001764 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e347      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002448:	4b39      	ldr	r3, [pc, #228]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002454:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a35      	ldr	r2, [pc, #212]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800245a:	f043 0308 	orr.w	r3, r3, #8
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4930      	ldr	r1, [pc, #192]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800246e:	4313      	orrs	r3, r2
 8002470:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002472:	4b2f      	ldr	r3, [pc, #188]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	492b      	ldr	r1, [pc, #172]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
 8002486:	e01a      	b.n	80024be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002488:	4b29      	ldr	r3, [pc, #164]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a28      	ldr	r2, [pc, #160]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002494:	f7ff f966 	bl	8001764 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800249c:	f7ff f962 	bl	8001764 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e314      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x1dc>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d073      	beq.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x21c>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d10e      	bne.n	80024f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d10b      	bne.n	80024f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d063      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d15f      	bne.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e2f1      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x24c>
 80024fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a0b      	ldr	r2, [pc, #44]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e025      	b.n	8002558 <HAL_RCC_OscConfig+0x298>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	d114      	bne.n	8002540 <HAL_RCC_OscConfig+0x280>
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a05      	ldr	r2, [pc, #20]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 800251c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	4b03      	ldr	r3, [pc, #12]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a02      	ldr	r2, [pc, #8]	@ (8002530 <HAL_RCC_OscConfig+0x270>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e013      	b.n	8002558 <HAL_RCC_OscConfig+0x298>
 8002530:	40021000 	.word	0x40021000
 8002534:	08007be0 	.word	0x08007be0
 8002538:	20000000 	.word	0x20000000
 800253c:	20000004 	.word	0x20000004
 8002540:	4ba0      	ldr	r3, [pc, #640]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a9f      	ldr	r2, [pc, #636]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b9d      	ldr	r3, [pc, #628]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a9c      	ldr	r2, [pc, #624]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff f900 	bl	8001764 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff f8fc 	bl	8001764 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e2ae      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257a:	4b92      	ldr	r3, [pc, #584]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x2a8>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff f8ec 	bl	8001764 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff f8e8 	bl	8001764 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e29a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a2:	4b88      	ldr	r3, [pc, #544]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x2d0>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d060      	beq.n	8002680 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_OscConfig+0x310>
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d119      	bne.n	80025fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d116      	bne.n	80025fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	4b7c      	ldr	r3, [pc, #496]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_OscConfig+0x328>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e277      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e8:	4b76      	ldr	r3, [pc, #472]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	4973      	ldr	r1, [pc, #460]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025fc:	e040      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d023      	beq.n	800264e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002606:	4b6f      	ldr	r3, [pc, #444]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6e      	ldr	r2, [pc, #440]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7ff f8a7 	bl	8001764 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261a:	f7ff f8a3 	bl	8001764 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e255      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800262c:	4b65      	ldr	r3, [pc, #404]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002638:	4b62      	ldr	r3, [pc, #392]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	061b      	lsls	r3, r3, #24
 8002646:	495f      	ldr	r1, [pc, #380]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	e018      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264e:	4b5d      	ldr	r3, [pc, #372]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7ff f883 	bl	8001764 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002662:	f7ff f87f 	bl	8001764 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e231      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	2b00      	cmp	r3, #0
 800268a:	d03c      	beq.n	8002706 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01c      	beq.n	80026ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002694:	4b4b      	ldr	r3, [pc, #300]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269a:	4a4a      	ldr	r2, [pc, #296]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800269c:	f043 0301 	orr.w	r3, r3, #1
 80026a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7ff f85e 	bl	8001764 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7ff f85a 	bl	8001764 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e20c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026be:	4b41      	ldr	r3, [pc, #260]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0ef      	beq.n	80026ac <HAL_RCC_OscConfig+0x3ec>
 80026cc:	e01b      	b.n	8002706 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ce:	4b3d      	ldr	r3, [pc, #244]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d4:	4a3b      	ldr	r2, [pc, #236]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff f841 	bl	8001764 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e6:	f7ff f83d 	bl	8001764 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1ef      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026f8:	4b32      	ldr	r3, [pc, #200]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80026fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1ef      	bne.n	80026e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80a6 	beq.w	8002860 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002718:	4b2a      	ldr	r3, [pc, #168]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b27      	ldr	r3, [pc, #156]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	4a26      	ldr	r2, [pc, #152]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002730:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002740:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002748:	2b00      	cmp	r3, #0
 800274a:	d118      	bne.n	800277e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274c:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a1d      	ldr	r2, [pc, #116]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002756:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002758:	f7ff f804 	bl	8001764 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7ff f800 	bl	8001764 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1b2      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002772:	4b15      	ldr	r3, [pc, #84]	@ (80027c8 <HAL_RCC_OscConfig+0x508>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d0f0      	beq.n	8002760 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_RCC_OscConfig+0x4d8>
 8002786:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002796:	e029      	b.n	80027ec <HAL_RCC_OscConfig+0x52c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d115      	bne.n	80027cc <HAL_RCC_OscConfig+0x50c>
 80027a0:	4b08      	ldr	r3, [pc, #32]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a6:	4a07      	ldr	r2, [pc, #28]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f043 0304 	orr.w	r3, r3, #4
 80027ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027b0:	4b04      	ldr	r3, [pc, #16]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b6:	4a03      	ldr	r2, [pc, #12]	@ (80027c4 <HAL_RCC_OscConfig+0x504>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x52c>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40007000 	.word	0x40007000
 80027cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d2:	4a99      	ldr	r2, [pc, #612]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027d4:	f023 0301 	bic.w	r3, r3, #1
 80027d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027dc:	4b96      	ldr	r3, [pc, #600]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e2:	4a95      	ldr	r2, [pc, #596]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d016      	beq.n	8002822 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f4:	f7fe ffb6 	bl	8001764 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe ffb2 	bl	8001764 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e162      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002812:	4b89      	ldr	r3, [pc, #548]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ed      	beq.n	80027fc <HAL_RCC_OscConfig+0x53c>
 8002820:	e015      	b.n	800284e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe ff9f 	bl	8001764 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe ff9b 	bl	8001764 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e14b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002840:	4b7d      	ldr	r3, [pc, #500]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ed      	bne.n	800282a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284e:	7ffb      	ldrb	r3, [r7, #31]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b78      	ldr	r3, [pc, #480]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	4a77      	ldr	r2, [pc, #476]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d03c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01c      	beq.n	80028ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002874:	4b70      	ldr	r3, [pc, #448]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002876:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800287a:	4a6f      	ldr	r2, [pc, #444]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe ff6e 	bl	8001764 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800288c:	f7fe ff6a 	bl	8001764 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e11c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800289e:	4b66      	ldr	r3, [pc, #408]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ef      	beq.n	800288c <HAL_RCC_OscConfig+0x5cc>
 80028ac:	e01b      	b.n	80028e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028ae:	4b62      	ldr	r3, [pc, #392]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b4:	4a60      	ldr	r2, [pc, #384]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe ff51 	bl	8001764 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c6:	f7fe ff4d 	bl	8001764 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0ff      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028d8:	4b57      	ldr	r3, [pc, #348]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1ef      	bne.n	80028c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f000 80f3 	beq.w	8002ad6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f040 80c9 	bne.w	8002a8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80028fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	429a      	cmp	r2, r3
 800290c:	d12c      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	3b01      	subs	r3, #1
 800291a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d123      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800292a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d11b      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d113      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d109      	bne.n	8002968 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	3b01      	subs	r3, #1
 8002962:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002964:	429a      	cmp	r2, r3
 8002966:	d06b      	beq.n	8002a40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d062      	beq.n	8002a34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800296e:	4b32      	ldr	r3, [pc, #200]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0ac      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800297e:	4b2e      	ldr	r3, [pc, #184]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a2d      	ldr	r2, [pc, #180]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002984:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002988:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800298a:	f7fe feeb 	bl	8001764 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002992:	f7fe fee7 	bl	8001764 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e099      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a4:	4b24      	ldr	r3, [pc, #144]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029b0:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <HAL_RCC_OscConfig+0x77c>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029c0:	3a01      	subs	r2, #1
 80029c2:	0112      	lsls	r2, r2, #4
 80029c4:	4311      	orrs	r1, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029ca:	0212      	lsls	r2, r2, #8
 80029cc:	4311      	orrs	r1, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80029d2:	0852      	lsrs	r2, r2, #1
 80029d4:	3a01      	subs	r2, #1
 80029d6:	0552      	lsls	r2, r2, #21
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80029de:	0852      	lsrs	r2, r2, #1
 80029e0:	3a01      	subs	r2, #1
 80029e2:	0652      	lsls	r2, r2, #25
 80029e4:	4311      	orrs	r1, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80029ea:	06d2      	lsls	r2, r2, #27
 80029ec:	430a      	orrs	r2, r1
 80029ee:	4912      	ldr	r1, [pc, #72]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80029f4:	4b10      	ldr	r3, [pc, #64]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 80029fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a0c      	ldr	r2, [pc, #48]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002a06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a0c:	f7fe feaa 	bl	8001764 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fea6 	bl	8001764 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e058      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a26:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <HAL_RCC_OscConfig+0x778>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a32:	e050      	b.n	8002ad6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e04f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a40:	4b27      	ldr	r3, [pc, #156]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d144      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a4c:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a23      	ldr	r2, [pc, #140]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a58:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	4a20      	ldr	r2, [pc, #128]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a64:	f7fe fe7e 	bl	8001764 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6c:	f7fe fe7a 	bl	8001764 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e02c      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a7e:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCC_OscConfig+0x7ac>
 8002a8a:	e024      	b.n	8002ad6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b0c      	cmp	r3, #12
 8002a90:	d01f      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a92:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002a98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fe61 	bl	8001764 <HAL_GetTick>
 8002aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aa4:	e008      	b.n	8002ab8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe fe5d 	bl	8001764 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d901      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e00f      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ab8:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d1f0      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	4905      	ldr	r1, [pc, #20]	@ (8002ae0 <HAL_RCC_OscConfig+0x820>)
 8002aca:	4b06      	ldr	r3, [pc, #24]	@ (8002ae4 <HAL_RCC_OscConfig+0x824>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	60cb      	str	r3, [r1, #12]
 8002ad0:	e001      	b.n	8002ad6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3720      	adds	r7, #32
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	feeefffc 	.word	0xfeeefffc

08002ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e0e7      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002afc:	4b75      	ldr	r3, [pc, #468]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d910      	bls.n	8002b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0a:	4b72      	ldr	r3, [pc, #456]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 0207 	bic.w	r2, r3, #7
 8002b12:	4970      	ldr	r1, [pc, #448]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1a:	4b6e      	ldr	r3, [pc, #440]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	683a      	ldr	r2, [r7, #0]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0cf      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d010      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d908      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b63      	ldr	r3, [pc, #396]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	4960      	ldr	r1, [pc, #384]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d04c      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d121      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e0a6      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b86:	4b54      	ldr	r3, [pc, #336]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d115      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e09a      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b9e:	4b4e      	ldr	r3, [pc, #312]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e08e      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bae:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e086      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b46      	ldr	r3, [pc, #280]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4943      	ldr	r1, [pc, #268]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd0:	f7fe fdc8 	bl	8001764 <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fe fdc4 	bl	8001764 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e06e      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b31      	ldr	r3, [pc, #196]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d208      	bcs.n	8002c2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	492b      	ldr	r1, [pc, #172]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2e:	4b29      	ldr	r3, [pc, #164]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d210      	bcs.n	8002c5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3c:	4b25      	ldr	r3, [pc, #148]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 0207 	bic.w	r2, r3, #7
 8002c44:	4923      	ldr	r1, [pc, #140]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4c:	4b21      	ldr	r3, [pc, #132]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1ec>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e036      	b.n	8002ccc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d008      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	4918      	ldr	r1, [pc, #96]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d009      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c88:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4910      	ldr	r1, [pc, #64]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9c:	f000 f824 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	490b      	ldr	r1, [pc, #44]	@ (8002cdc <HAL_RCC_ClockConfig+0x1f4>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a09      	ldr	r2, [pc, #36]	@ (8002ce0 <HAL_RCC_ClockConfig+0x1f8>)
 8002cba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cbc:	4b09      	ldr	r3, [pc, #36]	@ (8002ce4 <HAL_RCC_ClockConfig+0x1fc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe fcff 	bl	80016c4 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cca:	7afb      	ldrb	r3, [r7, #11]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40022000 	.word	0x40022000
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	08007be0 	.word	0x08007be0
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d00:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d005      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x34>
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	2b0c      	cmp	r3, #12
 8002d14:	d121      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d11e      	bne.n	8002d5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d1c:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d107      	bne.n	8002d38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d28:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	61fb      	str	r3, [r7, #28]
 8002d36:	e005      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d38:	4b2d      	ldr	r3, [pc, #180]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d44:	4a2b      	ldr	r2, [pc, #172]	@ (8002df4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10d      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d58:	e00a      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	2b04      	cmp	r3, #4
 8002d5e:	d102      	bne.n	8002d66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d60:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	e004      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d6c:	4b23      	ldr	r3, [pc, #140]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b0c      	cmp	r3, #12
 8002d74:	d134      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d76:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d78:	68db      	ldr	r3, [r3, #12]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d003      	beq.n	8002d8e <HAL_RCC_GetSysClockFreq+0xa6>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b03      	cmp	r3, #3
 8002d8a:	d003      	beq.n	8002d94 <HAL_RCC_GetSysClockFreq+0xac>
 8002d8c:	e005      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d90:	617b      	str	r3, [r7, #20]
      break;
 8002d92:	e005      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x114>)
 8002d96:	617b      	str	r3, [r7, #20]
      break;
 8002d98:	e002      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	617b      	str	r3, [r7, #20]
      break;
 8002d9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da0:	4b13      	ldr	r3, [pc, #76]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	091b      	lsrs	r3, r3, #4
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	3301      	adds	r3, #1
 8002dac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dae:	4b10      	ldr	r3, [pc, #64]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	fb03 f202 	mul.w	r2, r3, r2
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	0e5b      	lsrs	r3, r3, #25
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002de0:	69bb      	ldr	r3, [r7, #24]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	@ 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	08007bf8 	.word	0x08007bf8
 8002df8:	00f42400 	.word	0x00f42400
 8002dfc:	007a1200 	.word	0x007a1200

08002e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e04:	4b03      	ldr	r3, [pc, #12]	@ (8002e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e06:	681b      	ldr	r3, [r3, #0]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000000 	.word	0x20000000

08002e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e1c:	f7ff fff0 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	0a1b      	lsrs	r3, r3, #8
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	4904      	ldr	r1, [pc, #16]	@ (8002e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08007bf0 	.word	0x08007bf0

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e48:	f7ff ffda 	bl	8002e00 <HAL_RCC_GetHCLKFreq>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0adb      	lsrs	r3, r3, #11
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4904      	ldr	r1, [pc, #16]	@ (8002e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e5a:	5ccb      	ldrb	r3, [r1, r3]
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	08007bf0 	.word	0x08007bf0

08002e70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e88:	f7ff f9b6 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8002e8c:	6178      	str	r0, [r7, #20]
 8002e8e:	e014      	b.n	8002eba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e90:	4b25      	ldr	r3, [pc, #148]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e94:	4a24      	ldr	r2, [pc, #144]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e9c:	4b22      	ldr	r3, [pc, #136]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ea8:	f7ff f9a6 	bl	80021f8 <HAL_PWREx_GetVoltageRange>
 8002eac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b1e      	ldr	r3, [pc, #120]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f28 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ec0:	d10b      	bne.n	8002eda <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b80      	cmp	r3, #128	@ 0x80
 8002ec6:	d919      	bls.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ecc:	d902      	bls.n	8002ed4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ece:	2302      	movs	r3, #2
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	e013      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	e010      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2b80      	cmp	r3, #128	@ 0x80
 8002ede:	d902      	bls.n	8002ee6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e00a      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b80      	cmp	r3, #128	@ 0x80
 8002eea:	d102      	bne.n	8002ef2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002eec:	2302      	movs	r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	e004      	b.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b70      	cmp	r3, #112	@ 0x70
 8002ef6:	d101      	bne.n	8002efc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4909      	ldr	r1, [pc, #36]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f0c:	4b07      	ldr	r3, [pc, #28]	@ (8002f2c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40022000 	.word	0x40022000

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d031      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f54:	d01a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002f56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002f5a:	d814      	bhi.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002f60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002f66:	4b5d      	ldr	r3, [pc, #372]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	4a5c      	ldr	r2, [pc, #368]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f70:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f72:	e00c      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	2100      	movs	r1, #0
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f9de 	bl	800333c <RCCEx_PLLSAI1_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f84:	e003      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	74fb      	strb	r3, [r7, #19]
      break;
 8002f8a:	e000      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8e:	7cfb      	ldrb	r3, [r7, #19]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10b      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f94:	4b51      	ldr	r3, [pc, #324]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa2:	494e      	ldr	r1, [pc, #312]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002faa:	e001      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fac:	7cfb      	ldrb	r3, [r7, #19]
 8002fae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 809e 	beq.w	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fc2:	4b46      	ldr	r3, [pc, #280]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd8:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a39      	ldr	r2, [pc, #228]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003000:	f7fe fbb0 	bl	8001764 <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003006:	e009      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7fe fbac 	bl	8001764 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d902      	bls.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	74fb      	strb	r3, [r7, #19]
        break;
 800301a:	e005      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800301c:	4b30      	ldr	r3, [pc, #192]	@ (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d0ef      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d15a      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800302e:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003034:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003038:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01e      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	429a      	cmp	r2, r3
 8003048:	d019      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800304a:	4b24      	ldr	r3, [pc, #144]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003050:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003054:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003056:	4b21      	ldr	r3, [pc, #132]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305c:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003062:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003066:	4b1d      	ldr	r3, [pc, #116]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306c:	4a1b      	ldr	r2, [pc, #108]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800306e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003072:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003076:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003088:	f7fe fb6c 	bl	8001764 <HAL_GetTick>
 800308c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800308e:	e00b      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fb68 	bl	8001764 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d902      	bls.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	74fb      	strb	r3, [r7, #19]
            break;
 80030a6:	e006      	b.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030a8:	4b0c      	ldr	r3, [pc, #48]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ec      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030bc:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030ca:	4904      	ldr	r1, [pc, #16]	@ (80030dc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80030d2:	e009      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	74bb      	strb	r3, [r7, #18]
 80030d8:	e006      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e8:	7c7b      	ldrb	r3, [r7, #17]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b8a      	ldr	r3, [pc, #552]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f2:	4a89      	ldr	r2, [pc, #548]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003106:	4b84      	ldr	r3, [pc, #528]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310c:	f023 0203 	bic.w	r2, r3, #3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4980      	ldr	r1, [pc, #512]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003128:	4b7b      	ldr	r3, [pc, #492]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f023 020c 	bic.w	r2, r3, #12
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	4978      	ldr	r1, [pc, #480]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0320 	and.w	r3, r3, #32
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314a:	4b73      	ldr	r3, [pc, #460]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	496f      	ldr	r1, [pc, #444]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316c:	4b6a      	ldr	r3, [pc, #424]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317a:	4967      	ldr	r1, [pc, #412]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800318e:	4b62      	ldr	r3, [pc, #392]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003194:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319c:	495e      	ldr	r1, [pc, #376]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031b0:	4b59      	ldr	r3, [pc, #356]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	4956      	ldr	r1, [pc, #344]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d2:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e0:	494d      	ldr	r1, [pc, #308]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d028      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f4:	4b48      	ldr	r3, [pc, #288]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	4945      	ldr	r1, [pc, #276]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003212:	d106      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003214:	4b40      	ldr	r3, [pc, #256]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4a3f      	ldr	r2, [pc, #252]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800321a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800321e:	60d3      	str	r3, [r2, #12]
 8003220:	e011      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800322a:	d10c      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	2101      	movs	r1, #1
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f882 	bl	800333c <RCCEx_PLLSAI1_Config>
 8003238:	4603      	mov	r3, r0
 800323a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003242:	7cfb      	ldrb	r3, [r7, #19]
 8003244:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d028      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003252:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003258:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003260:	492d      	ldr	r1, [pc, #180]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003270:	d106      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003272:	4b29      	ldr	r3, [pc, #164]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	4a28      	ldr	r2, [pc, #160]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003278:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800327c:	60d3      	str	r3, [r2, #12]
 800327e:	e011      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003288:	d10c      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3304      	adds	r3, #4
 800328e:	2101      	movs	r1, #1
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f853 	bl	800333c <RCCEx_PLLSAI1_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800329a:	7cfb      	ldrb	r3, [r7, #19]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d01c      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032b0:	4b19      	ldr	r3, [pc, #100]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032be:	4916      	ldr	r1, [pc, #88]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032ce:	d10c      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3304      	adds	r3, #4
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f830 	bl	800333c <RCCEx_PLLSAI1_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032e0:	7cfb      	ldrb	r3, [r7, #19]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80032e6:	7cfb      	ldrb	r3, [r7, #19]
 80032e8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032f6:	4b08      	ldr	r3, [pc, #32]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003304:	4904      	ldr	r1, [pc, #16]	@ (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800330c:	7cbb      	ldrb	r3, [r7, #18]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000

0800331c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a04      	ldr	r2, [pc, #16]	@ (8003338 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003326:	f043 0304 	orr.w	r3, r3, #4
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000

0800333c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800334a:	4b74      	ldr	r3, [pc, #464]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d018      	beq.n	8003388 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003356:	4b71      	ldr	r3, [pc, #452]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f003 0203 	and.w	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d10d      	bne.n	8003382 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
       ||
 800336a:	2b00      	cmp	r3, #0
 800336c:	d009      	beq.n	8003382 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800336e:	4b6b      	ldr	r3, [pc, #428]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	091b      	lsrs	r3, r3, #4
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
       ||
 800337e:	429a      	cmp	r2, r3
 8003380:	d047      	beq.n	8003412 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
 8003386:	e044      	b.n	8003412 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b03      	cmp	r3, #3
 800338e:	d018      	beq.n	80033c2 <RCCEx_PLLSAI1_Config+0x86>
 8003390:	2b03      	cmp	r3, #3
 8003392:	d825      	bhi.n	80033e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003394:	2b01      	cmp	r3, #1
 8003396:	d002      	beq.n	800339e <RCCEx_PLLSAI1_Config+0x62>
 8003398:	2b02      	cmp	r3, #2
 800339a:	d009      	beq.n	80033b0 <RCCEx_PLLSAI1_Config+0x74>
 800339c:	e020      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800339e:	4b5f      	ldr	r3, [pc, #380]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d11d      	bne.n	80033e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ae:	e01a      	b.n	80033e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033b0:	4b5a      	ldr	r3, [pc, #360]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d116      	bne.n	80033ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033c0:	e013      	b.n	80033ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033c2:	4b56      	ldr	r3, [pc, #344]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10f      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ce:	4b53      	ldr	r3, [pc, #332]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033de:	e006      	b.n	80033ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e004      	b.n	80033f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033e6:	bf00      	nop
 80033e8:	e002      	b.n	80033f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ea:	bf00      	nop
 80033ec:	e000      	b.n	80033f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033f6:	4b49      	ldr	r3, [pc, #292]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	011b      	lsls	r3, r3, #4
 800340a:	430b      	orrs	r3, r1
 800340c:	4943      	ldr	r1, [pc, #268]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003412:	7bfb      	ldrb	r3, [r7, #15]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d17c      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003418:	4b40      	ldr	r3, [pc, #256]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a3f      	ldr	r2, [pc, #252]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 800341e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fe f99e 	bl	8001764 <HAL_GetTick>
 8003428:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800342a:	e009      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800342c:	f7fe f99a 	bl	8001764 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d902      	bls.n	8003440 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	73fb      	strb	r3, [r7, #15]
        break;
 800343e:	e005      	b.n	800344c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003440:	4b36      	ldr	r3, [pc, #216]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ef      	bne.n	800342c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d15f      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d110      	bne.n	800347a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003458:	4b30      	ldr	r3, [pc, #192]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003460:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6892      	ldr	r2, [r2, #8]
 8003468:	0211      	lsls	r1, r2, #8
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68d2      	ldr	r2, [r2, #12]
 800346e:	06d2      	lsls	r2, r2, #27
 8003470:	430a      	orrs	r2, r1
 8003472:	492a      	ldr	r1, [pc, #168]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003474:	4313      	orrs	r3, r2
 8003476:	610b      	str	r3, [r1, #16]
 8003478:	e027      	b.n	80034ca <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d112      	bne.n	80034a6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003480:	4b26      	ldr	r3, [pc, #152]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003488:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6892      	ldr	r2, [r2, #8]
 8003490:	0211      	lsls	r1, r2, #8
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6912      	ldr	r2, [r2, #16]
 8003496:	0852      	lsrs	r2, r2, #1
 8003498:	3a01      	subs	r2, #1
 800349a:	0552      	lsls	r2, r2, #21
 800349c:	430a      	orrs	r2, r1
 800349e:	491f      	ldr	r1, [pc, #124]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	610b      	str	r3, [r1, #16]
 80034a4:	e011      	b.n	80034ca <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034a6:	4b1d      	ldr	r3, [pc, #116]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034a8:	691b      	ldr	r3, [r3, #16]
 80034aa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80034ae:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6892      	ldr	r2, [r2, #8]
 80034b6:	0211      	lsls	r1, r2, #8
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6952      	ldr	r2, [r2, #20]
 80034bc:	0852      	lsrs	r2, r2, #1
 80034be:	3a01      	subs	r2, #1
 80034c0:	0652      	lsls	r2, r2, #25
 80034c2:	430a      	orrs	r2, r1
 80034c4:	4915      	ldr	r1, [pc, #84]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80034ca:	4b14      	ldr	r3, [pc, #80]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a13      	ldr	r2, [pc, #76]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034d4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d6:	f7fe f945 	bl	8001764 <HAL_GetTick>
 80034da:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034dc:	e009      	b.n	80034f2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034de:	f7fe f941 	bl	8001764 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d902      	bls.n	80034f2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	73fb      	strb	r3, [r7, #15]
          break;
 80034f0:	e005      	b.n	80034fe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034f2:	4b0a      	ldr	r3, [pc, #40]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0ef      	beq.n	80034de <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d106      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	4903      	ldr	r1, [pc, #12]	@ (800351c <RCCEx_PLLSAI1_Config+0x1e0>)
 800350e:	4313      	orrs	r3, r2
 8003510:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40021000 	.word	0x40021000

08003520 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e049      	b.n	80035c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d106      	bne.n	800354c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7fd fea0 	bl	800128c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3304      	adds	r3, #4
 800355c:	4619      	mov	r1, r3
 800355e:	4610      	mov	r0, r2
 8003560:	f000 f8fe 	bl	8003760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_TIM_ConfigClockSource+0x1c>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e0b6      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x18a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003608:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800360c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003614:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	d03e      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0xd8>
 8003628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362c:	f200 8087 	bhi.w	800373e <HAL_TIM_ConfigClockSource+0x170>
 8003630:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003634:	f000 8086 	beq.w	8003744 <HAL_TIM_ConfigClockSource+0x176>
 8003638:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800363c:	d87f      	bhi.n	800373e <HAL_TIM_ConfigClockSource+0x170>
 800363e:	2b70      	cmp	r3, #112	@ 0x70
 8003640:	d01a      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0xaa>
 8003642:	2b70      	cmp	r3, #112	@ 0x70
 8003644:	d87b      	bhi.n	800373e <HAL_TIM_ConfigClockSource+0x170>
 8003646:	2b60      	cmp	r3, #96	@ 0x60
 8003648:	d050      	beq.n	80036ec <HAL_TIM_ConfigClockSource+0x11e>
 800364a:	2b60      	cmp	r3, #96	@ 0x60
 800364c:	d877      	bhi.n	800373e <HAL_TIM_ConfigClockSource+0x170>
 800364e:	2b50      	cmp	r3, #80	@ 0x50
 8003650:	d03c      	beq.n	80036cc <HAL_TIM_ConfigClockSource+0xfe>
 8003652:	2b50      	cmp	r3, #80	@ 0x50
 8003654:	d873      	bhi.n	800373e <HAL_TIM_ConfigClockSource+0x170>
 8003656:	2b40      	cmp	r3, #64	@ 0x40
 8003658:	d058      	beq.n	800370c <HAL_TIM_ConfigClockSource+0x13e>
 800365a:	2b40      	cmp	r3, #64	@ 0x40
 800365c:	d86f      	bhi.n	800373e <HAL_TIM_ConfigClockSource+0x170>
 800365e:	2b30      	cmp	r3, #48	@ 0x30
 8003660:	d064      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x15e>
 8003662:	2b30      	cmp	r3, #48	@ 0x30
 8003664:	d86b      	bhi.n	800373e <HAL_TIM_ConfigClockSource+0x170>
 8003666:	2b20      	cmp	r3, #32
 8003668:	d060      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x15e>
 800366a:	2b20      	cmp	r3, #32
 800366c:	d867      	bhi.n	800373e <HAL_TIM_ConfigClockSource+0x170>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d05c      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x15e>
 8003672:	2b10      	cmp	r3, #16
 8003674:	d05a      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x15e>
 8003676:	e062      	b.n	800373e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	f000 f948 	bl	800391c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800369a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]
      break;
 80036a4:	e04f      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036b6:	f000 f931 	bl	800391c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036c8:	609a      	str	r2, [r3, #8]
      break;
 80036ca:	e03c      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d8:	461a      	mov	r2, r3
 80036da:	f000 f8a5 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2150      	movs	r1, #80	@ 0x50
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f8fe 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 80036ea:	e02c      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036f8:	461a      	mov	r2, r3
 80036fa:	f000 f8c4 	bl	8003886 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2160      	movs	r1, #96	@ 0x60
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f8ee 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 800370a:	e01c      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003718:	461a      	mov	r2, r3
 800371a:	f000 f885 	bl	8003828 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2140      	movs	r1, #64	@ 0x40
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f8de 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 800372a:	e00c      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4619      	mov	r1, r3
 8003736:	4610      	mov	r0, r2
 8003738:	f000 f8d5 	bl	80038e6 <TIM_ITRx_SetConfig>
      break;
 800373c:	e003      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
      break;
 8003742:	e000      	b.n	8003746 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003744:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a2a      	ldr	r2, [pc, #168]	@ (800381c <TIM_Base_SetConfig+0xbc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_Base_SetConfig+0x20>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800377e:	d108      	bne.n	8003792 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003786:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a21      	ldr	r2, [pc, #132]	@ (800381c <TIM_Base_SetConfig+0xbc>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0x52>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0x52>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003820 <TIM_Base_SetConfig+0xc0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x52>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003824 <TIM_Base_SetConfig+0xc4>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0c      	ldr	r2, [pc, #48]	@ (800381c <TIM_Base_SetConfig+0xbc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d007      	beq.n	8003800 <TIM_Base_SetConfig+0xa0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0b      	ldr	r2, [pc, #44]	@ (8003820 <TIM_Base_SetConfig+0xc0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0xa0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003824 <TIM_Base_SetConfig+0xc4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d103      	bne.n	8003808 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	615a      	str	r2, [r3, #20]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400

08003828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0201 	bic.w	r2, r3, #1
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f023 030a 	bic.w	r3, r3, #10
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	621a      	str	r2, [r3, #32]
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 0210 	bic.w	r2, r3, #16
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	031b      	lsls	r3, r3, #12
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	621a      	str	r2, [r3, #32]
}
 80038da:	bf00      	nop
 80038dc:	371c      	adds	r7, #28
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b085      	sub	sp, #20
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	f043 0307 	orr.w	r3, r3, #7
 8003908:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800391c:	b480      	push	{r7}
 800391e:	b087      	sub	sp, #28
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
 8003928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	431a      	orrs	r2, r3
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	371c      	adds	r7, #28
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800396c:	2b01      	cmp	r3, #1
 800396e:	d101      	bne.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003970:	2302      	movs	r3, #2
 8003972:	e04f      	b.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a21      	ldr	r2, [pc, #132]	@ (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d108      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80039a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d009      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039dc:	d004      	beq.n	80039e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a10      	ldr	r2, [pc, #64]	@ (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d10c      	bne.n	8003a02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40014000 	.word	0x40014000

08003a28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e040      	b.n	8003abc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7fd fc3e 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	@ 0x24
 8003a54:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0201 	bic.w	r2, r2, #1
 8003a64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fe3e 	bl	80046f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fc0f 	bl	8004298 <UART_SetConfig>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e01b      	b.n	8003abc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 febd 	bl	8004834 <UART_CheckIdleState>
 8003aba:	4603      	mov	r3, r0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	@ 0x28
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d177      	bne.n	8003bcc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_UART_Transmit+0x24>
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e070      	b.n	8003bce <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2221      	movs	r2, #33	@ 0x21
 8003af8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afa:	f7fd fe33 	bl	8001764 <HAL_GetTick>
 8003afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	88fa      	ldrh	r2, [r7, #6]
 8003b04:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	88fa      	ldrh	r2, [r7, #6]
 8003b0c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b18:	d108      	bne.n	8003b2c <HAL_UART_Transmit+0x68>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d104      	bne.n	8003b2c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e003      	b.n	8003b34 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b34:	e02f      	b.n	8003b96 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	2180      	movs	r1, #128	@ 0x80
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 ff1f 	bl	8004984 <UART_WaitOnFlagUntilTimeout>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d004      	beq.n	8003b56 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e03b      	b.n	8003bce <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b68:	b292      	uxth	r2, r2
 8003b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	3302      	adds	r3, #2
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e007      	b.n	8003b84 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	781a      	ldrb	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	3301      	adds	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1c9      	bne.n	8003b36 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2140      	movs	r1, #64	@ 0x40
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fee9 	bl	8004984 <UART_WaitOnFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d004      	beq.n	8003bc2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e005      	b.n	8003bce <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	@ 0x28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	4613      	mov	r3, r2
 8003be4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d137      	bne.n	8003c60 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <HAL_UART_Receive_DMA+0x24>
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e030      	b.n	8003c62 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a18      	ldr	r2, [pc, #96]	@ (8003c6c <HAL_UART_Receive_DMA+0x94>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01f      	beq.n	8003c50 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d018      	beq.n	8003c50 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	e853 3f00 	ldrex	r3, [r3]
 8003c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c40:	69f9      	ldr	r1, [r7, #28]
 8003c42:	6a3a      	ldr	r2, [r7, #32]
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e6      	bne.n	8003c1e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003c50:	88fb      	ldrh	r3, [r7, #6]
 8003c52:	461a      	mov	r2, r3
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fefc 	bl	8004a54 <UART_Start_Receive_DMA>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	e000      	b.n	8003c62 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c60:	2302      	movs	r3, #2
  }
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3728      	adds	r7, #40	@ 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40008000 	.word	0x40008000

08003c70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b0ba      	sub	sp, #232	@ 0xe8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003c9a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d115      	bne.n	8003cd8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00f      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f000 82ae 	beq.w	800422a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
      }
      return;
 8003cd6:	e2a8      	b.n	800422a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 8117 	beq.w	8003f10 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003cf2:	4b85      	ldr	r3, [pc, #532]	@ (8003f08 <HAL_UART_IRQHandler+0x298>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 810a 	beq.w	8003f10 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d00:	f003 0301 	and.w	r3, r3, #1
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d011      	beq.n	8003d2c <HAL_UART_IRQHandler+0xbc>
 8003d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d22:	f043 0201 	orr.w	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d011      	beq.n	8003d5c <HAL_UART_IRQHandler+0xec>
 8003d38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00b      	beq.n	8003d5c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d52:	f043 0204 	orr.w	r2, r3, #4
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d011      	beq.n	8003d8c <HAL_UART_IRQHandler+0x11c>
 8003d68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00b      	beq.n	8003d8c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2204      	movs	r2, #4
 8003d7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d82:	f043 0202 	orr.w	r2, r3, #2
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d017      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d105      	bne.n	8003db0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003da4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003da8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2208      	movs	r2, #8
 8003db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dbe:	f043 0208 	orr.w	r2, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d012      	beq.n	8003dfa <HAL_UART_IRQHandler+0x18a>
 8003dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00c      	beq.n	8003dfa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f000 8214 	beq.w	800422e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00d      	beq.n	8003e2e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e34:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d005      	beq.n	8003e52 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e4a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d04f      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fec4 	bl	8004be0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e62:	2b40      	cmp	r3, #64	@ 0x40
 8003e64:	d141      	bne.n	8003eea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	3308      	adds	r3, #8
 8003e8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003eaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1d9      	bne.n	8003e66 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d013      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	4a13      	ldr	r2, [pc, #76]	@ (8003f0c <HAL_UART_IRQHandler+0x29c>)
 8003ec0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fee4 	bl	8001c94 <HAL_DMA_Abort_IT>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003edc:	4610      	mov	r0, r2
 8003ede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee0:	e00f      	b.n	8003f02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f9c2 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee8:	e00b      	b.n	8003f02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f9be 	bl	800426c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ef0:	e007      	b.n	8003f02 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f9ba 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003f00:	e195      	b.n	800422e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f02:	bf00      	nop
    return;
 8003f04:	e193      	b.n	800422e <HAL_UART_IRQHandler+0x5be>
 8003f06:	bf00      	nop
 8003f08:	04000120 	.word	0x04000120
 8003f0c:	08004e91 	.word	0x08004e91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	f040 814e 	bne.w	80041b6 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 8147 	beq.w	80041b6 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8140 	beq.w	80041b6 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2210      	movs	r2, #16
 8003f3c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f48:	2b40      	cmp	r3, #64	@ 0x40
 8003f4a:	f040 80b8 	bne.w	80040be <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f5a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 8167 	beq.w	8004232 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	f080 815f 	bcs.w	8004232 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f7a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0320 	and.w	r3, r3, #32
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 8086 	bne.w	800409c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003fa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003fbe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fca:	e841 2300 	strex	r3, r2, [r1]
 8003fce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1da      	bne.n	8003f90 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3308      	adds	r3, #8
 8003fe0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ffe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004002:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004006:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e1      	bne.n	8003fda <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3308      	adds	r3, #8
 800401c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004026:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	3308      	adds	r3, #8
 8004036:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800403a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800403c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004040:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004048:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e3      	bne.n	8004016 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800406a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800406c:	f023 0310 	bic.w	r3, r3, #16
 8004070:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800407e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004080:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004082:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004084:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004086:	e841 2300 	strex	r3, r2, [r1]
 800408a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800408c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e4      	bne.n	800405c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004096:	4618      	mov	r0, r3
 8004098:	f7fd fdbe 	bl	8001c18 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8e2 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040bc:	e0b9      	b.n	8004232 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80ab 	beq.w	8004236 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 80040e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80a6 	beq.w	8004236 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040f2:	e853 3f00 	ldrex	r3, [r3]
 80040f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	461a      	mov	r2, r3
 8004108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
 800410e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800411a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e4      	bne.n	80040ea <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3308      	adds	r3, #8
 8004126:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	623b      	str	r3, [r7, #32]
   return(result);
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004144:	633a      	str	r2, [r7, #48]	@ 0x30
 8004146:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800414a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e3      	bne.n	8004120 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2220      	movs	r2, #32
 800415c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	60fb      	str	r3, [r7, #12]
   return(result);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f023 0310 	bic.w	r3, r3, #16
 8004180:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	461a      	mov	r2, r3
 800418a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800418e:	61fb      	str	r3, [r7, #28]
 8004190:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004192:	69b9      	ldr	r1, [r7, #24]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	e841 2300 	strex	r3, r2, [r1]
 800419a:	617b      	str	r3, [r7, #20]
   return(result);
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1e4      	bne.n	800416c <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2202      	movs	r2, #2
 80041a6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f866 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041b4:	e03f      	b.n	8004236 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <HAL_UART_IRQHandler+0x570>
 80041c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d008      	beq.n	80041e0 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80041d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fe99 	bl	8004f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041de:	e02d      	b.n	800423c <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01c      	beq.n	800423a <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	4798      	blx	r3
    }
    return;
 8004208:	e017      	b.n	800423a <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d012      	beq.n	800423c <HAL_UART_IRQHandler+0x5cc>
 8004216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fe4a 	bl	8004ebc <UART_EndTransmit_IT>
    return;
 8004228:	e008      	b.n	800423c <HAL_UART_IRQHandler+0x5cc>
      return;
 800422a:	bf00      	nop
 800422c:	e006      	b.n	800423c <HAL_UART_IRQHandler+0x5cc>
    return;
 800422e:	bf00      	nop
 8004230:	e004      	b.n	800423c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004232:	bf00      	nop
 8004234:	e002      	b.n	800423c <HAL_UART_IRQHandler+0x5cc>
      return;
 8004236:	bf00      	nop
 8004238:	e000      	b.n	800423c <HAL_UART_IRQHandler+0x5cc>
    return;
 800423a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800423c:	37e8      	adds	r7, #232	@ 0xe8
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop

08004244 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800429c:	b08a      	sub	sp, #40	@ 0x28
 800429e:	af00      	add	r7, sp, #0
 80042a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4313      	orrs	r3, r2
 80042be:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4bb4      	ldr	r3, [pc, #720]	@ (8004598 <UART_SetConfig+0x300>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4aa9      	ldr	r2, [pc, #676]	@ (800459c <UART_SetConfig+0x304>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d004      	beq.n	8004304 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004300:	4313      	orrs	r3, r2
 8004302:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4aa0      	ldr	r2, [pc, #640]	@ (80045a0 <UART_SetConfig+0x308>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d126      	bne.n	8004370 <UART_SetConfig+0xd8>
 8004322:	4ba0      	ldr	r3, [pc, #640]	@ (80045a4 <UART_SetConfig+0x30c>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f003 0303 	and.w	r3, r3, #3
 800432c:	2b03      	cmp	r3, #3
 800432e:	d81b      	bhi.n	8004368 <UART_SetConfig+0xd0>
 8004330:	a201      	add	r2, pc, #4	@ (adr r2, 8004338 <UART_SetConfig+0xa0>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	08004349 	.word	0x08004349
 800433c:	08004359 	.word	0x08004359
 8004340:	08004351 	.word	0x08004351
 8004344:	08004361 	.word	0x08004361
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e080      	b.n	8004452 <UART_SetConfig+0x1ba>
 8004350:	2302      	movs	r3, #2
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e07c      	b.n	8004452 <UART_SetConfig+0x1ba>
 8004358:	2304      	movs	r3, #4
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e078      	b.n	8004452 <UART_SetConfig+0x1ba>
 8004360:	2308      	movs	r3, #8
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004366:	e074      	b.n	8004452 <UART_SetConfig+0x1ba>
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436e:	e070      	b.n	8004452 <UART_SetConfig+0x1ba>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a8c      	ldr	r2, [pc, #560]	@ (80045a8 <UART_SetConfig+0x310>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d138      	bne.n	80043ec <UART_SetConfig+0x154>
 800437a:	4b8a      	ldr	r3, [pc, #552]	@ (80045a4 <UART_SetConfig+0x30c>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004380:	f003 030c 	and.w	r3, r3, #12
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d82d      	bhi.n	80043e4 <UART_SetConfig+0x14c>
 8004388:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <UART_SetConfig+0xf8>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043c5 	.word	0x080043c5
 8004394:	080043e5 	.word	0x080043e5
 8004398:	080043e5 	.word	0x080043e5
 800439c:	080043e5 	.word	0x080043e5
 80043a0:	080043d5 	.word	0x080043d5
 80043a4:	080043e5 	.word	0x080043e5
 80043a8:	080043e5 	.word	0x080043e5
 80043ac:	080043e5 	.word	0x080043e5
 80043b0:	080043cd 	.word	0x080043cd
 80043b4:	080043e5 	.word	0x080043e5
 80043b8:	080043e5 	.word	0x080043e5
 80043bc:	080043e5 	.word	0x080043e5
 80043c0:	080043dd 	.word	0x080043dd
 80043c4:	2300      	movs	r3, #0
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e042      	b.n	8004452 <UART_SetConfig+0x1ba>
 80043cc:	2302      	movs	r3, #2
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e03e      	b.n	8004452 <UART_SetConfig+0x1ba>
 80043d4:	2304      	movs	r3, #4
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e03a      	b.n	8004452 <UART_SetConfig+0x1ba>
 80043dc:	2308      	movs	r3, #8
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e036      	b.n	8004452 <UART_SetConfig+0x1ba>
 80043e4:	2310      	movs	r3, #16
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e032      	b.n	8004452 <UART_SetConfig+0x1ba>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a6a      	ldr	r2, [pc, #424]	@ (800459c <UART_SetConfig+0x304>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d12a      	bne.n	800444c <UART_SetConfig+0x1b4>
 80043f6:	4b6b      	ldr	r3, [pc, #428]	@ (80045a4 <UART_SetConfig+0x30c>)
 80043f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004400:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004404:	d01a      	beq.n	800443c <UART_SetConfig+0x1a4>
 8004406:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800440a:	d81b      	bhi.n	8004444 <UART_SetConfig+0x1ac>
 800440c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004410:	d00c      	beq.n	800442c <UART_SetConfig+0x194>
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004416:	d815      	bhi.n	8004444 <UART_SetConfig+0x1ac>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <UART_SetConfig+0x18c>
 800441c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004420:	d008      	beq.n	8004434 <UART_SetConfig+0x19c>
 8004422:	e00f      	b.n	8004444 <UART_SetConfig+0x1ac>
 8004424:	2300      	movs	r3, #0
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442a:	e012      	b.n	8004452 <UART_SetConfig+0x1ba>
 800442c:	2302      	movs	r3, #2
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004432:	e00e      	b.n	8004452 <UART_SetConfig+0x1ba>
 8004434:	2304      	movs	r3, #4
 8004436:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443a:	e00a      	b.n	8004452 <UART_SetConfig+0x1ba>
 800443c:	2308      	movs	r3, #8
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004442:	e006      	b.n	8004452 <UART_SetConfig+0x1ba>
 8004444:	2310      	movs	r3, #16
 8004446:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444a:	e002      	b.n	8004452 <UART_SetConfig+0x1ba>
 800444c:	2310      	movs	r3, #16
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a51      	ldr	r2, [pc, #324]	@ (800459c <UART_SetConfig+0x304>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d17a      	bne.n	8004552 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800445c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004460:	2b08      	cmp	r3, #8
 8004462:	d824      	bhi.n	80044ae <UART_SetConfig+0x216>
 8004464:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <UART_SetConfig+0x1d4>)
 8004466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446a:	bf00      	nop
 800446c:	08004491 	.word	0x08004491
 8004470:	080044af 	.word	0x080044af
 8004474:	08004499 	.word	0x08004499
 8004478:	080044af 	.word	0x080044af
 800447c:	0800449f 	.word	0x0800449f
 8004480:	080044af 	.word	0x080044af
 8004484:	080044af 	.word	0x080044af
 8004488:	080044af 	.word	0x080044af
 800448c:	080044a7 	.word	0x080044a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe fcc2 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8004494:	61f8      	str	r0, [r7, #28]
        break;
 8004496:	e010      	b.n	80044ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004498:	4b44      	ldr	r3, [pc, #272]	@ (80045ac <UART_SetConfig+0x314>)
 800449a:	61fb      	str	r3, [r7, #28]
        break;
 800449c:	e00d      	b.n	80044ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800449e:	f7fe fc23 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 80044a2:	61f8      	str	r0, [r7, #28]
        break;
 80044a4:	e009      	b.n	80044ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044aa:	61fb      	str	r3, [r7, #28]
        break;
 80044ac:	e005      	b.n	80044ba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80044b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 8107 	beq.w	80046d0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	4413      	add	r3, r2
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d305      	bcc.n	80044de <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044d8:	69fa      	ldr	r2, [r7, #28]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d903      	bls.n	80044e6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044e4:	e0f4      	b.n	80046d0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2200      	movs	r2, #0
 80044ea:	461c      	mov	r4, r3
 80044ec:	4615      	mov	r5, r2
 80044ee:	f04f 0200 	mov.w	r2, #0
 80044f2:	f04f 0300 	mov.w	r3, #0
 80044f6:	022b      	lsls	r3, r5, #8
 80044f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044fc:	0222      	lsls	r2, r4, #8
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	6849      	ldr	r1, [r1, #4]
 8004502:	0849      	lsrs	r1, r1, #1
 8004504:	2000      	movs	r0, #0
 8004506:	4688      	mov	r8, r1
 8004508:	4681      	mov	r9, r0
 800450a:	eb12 0a08 	adds.w	sl, r2, r8
 800450e:	eb43 0b09 	adc.w	fp, r3, r9
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004520:	4650      	mov	r0, sl
 8004522:	4659      	mov	r1, fp
 8004524:	f7fc fb40 	bl	8000ba8 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4613      	mov	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004536:	d308      	bcc.n	800454a <UART_SetConfig+0x2b2>
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800453e:	d204      	bcs.n	800454a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	e0c2      	b.n	80046d0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004550:	e0be      	b.n	80046d0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800455a:	d16a      	bne.n	8004632 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800455c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004560:	2b08      	cmp	r3, #8
 8004562:	d834      	bhi.n	80045ce <UART_SetConfig+0x336>
 8004564:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0x2d4>)
 8004566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456a:	bf00      	nop
 800456c:	08004591 	.word	0x08004591
 8004570:	080045b1 	.word	0x080045b1
 8004574:	080045b9 	.word	0x080045b9
 8004578:	080045cf 	.word	0x080045cf
 800457c:	080045bf 	.word	0x080045bf
 8004580:	080045cf 	.word	0x080045cf
 8004584:	080045cf 	.word	0x080045cf
 8004588:	080045cf 	.word	0x080045cf
 800458c:	080045c7 	.word	0x080045c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004590:	f7fe fc42 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8004594:	61f8      	str	r0, [r7, #28]
        break;
 8004596:	e020      	b.n	80045da <UART_SetConfig+0x342>
 8004598:	efff69f3 	.word	0xefff69f3
 800459c:	40008000 	.word	0x40008000
 80045a0:	40013800 	.word	0x40013800
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40004400 	.word	0x40004400
 80045ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045b0:	f7fe fc48 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 80045b4:	61f8      	str	r0, [r7, #28]
        break;
 80045b6:	e010      	b.n	80045da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045b8:	4b4c      	ldr	r3, [pc, #304]	@ (80046ec <UART_SetConfig+0x454>)
 80045ba:	61fb      	str	r3, [r7, #28]
        break;
 80045bc:	e00d      	b.n	80045da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045be:	f7fe fb93 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 80045c2:	61f8      	str	r0, [r7, #28]
        break;
 80045c4:	e009      	b.n	80045da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ca:	61fb      	str	r3, [r7, #28]
        break;
 80045cc:	e005      	b.n	80045da <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d077      	beq.n	80046d0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	005a      	lsls	r2, r3, #1
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	085b      	lsrs	r3, r3, #1
 80045ea:	441a      	add	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	2b0f      	cmp	r3, #15
 80045fa:	d916      	bls.n	800462a <UART_SetConfig+0x392>
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004602:	d212      	bcs.n	800462a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f023 030f 	bic.w	r3, r3, #15
 800460c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	b29b      	uxth	r3, r3
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	b29a      	uxth	r2, r3
 800461a:	8afb      	ldrh	r3, [r7, #22]
 800461c:	4313      	orrs	r3, r2
 800461e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	8afa      	ldrh	r2, [r7, #22]
 8004626:	60da      	str	r2, [r3, #12]
 8004628:	e052      	b.n	80046d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004630:	e04e      	b.n	80046d0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004632:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004636:	2b08      	cmp	r3, #8
 8004638:	d827      	bhi.n	800468a <UART_SetConfig+0x3f2>
 800463a:	a201      	add	r2, pc, #4	@ (adr r2, 8004640 <UART_SetConfig+0x3a8>)
 800463c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004640:	08004665 	.word	0x08004665
 8004644:	0800466d 	.word	0x0800466d
 8004648:	08004675 	.word	0x08004675
 800464c:	0800468b 	.word	0x0800468b
 8004650:	0800467b 	.word	0x0800467b
 8004654:	0800468b 	.word	0x0800468b
 8004658:	0800468b 	.word	0x0800468b
 800465c:	0800468b 	.word	0x0800468b
 8004660:	08004683 	.word	0x08004683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004664:	f7fe fbd8 	bl	8002e18 <HAL_RCC_GetPCLK1Freq>
 8004668:	61f8      	str	r0, [r7, #28]
        break;
 800466a:	e014      	b.n	8004696 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe fbea 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8004670:	61f8      	str	r0, [r7, #28]
        break;
 8004672:	e010      	b.n	8004696 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004674:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <UART_SetConfig+0x454>)
 8004676:	61fb      	str	r3, [r7, #28]
        break;
 8004678:	e00d      	b.n	8004696 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800467a:	f7fe fb35 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 800467e:	61f8      	str	r0, [r7, #28]
        break;
 8004680:	e009      	b.n	8004696 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004686:	61fb      	str	r3, [r7, #28]
        break;
 8004688:	e005      	b.n	8004696 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004694:	bf00      	nop
    }

    if (pclk != 0U)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d019      	beq.n	80046d0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	085a      	lsrs	r2, r3, #1
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	441a      	add	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b0f      	cmp	r3, #15
 80046b4:	d909      	bls.n	80046ca <UART_SetConfig+0x432>
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046bc:	d205      	bcs.n	80046ca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	60da      	str	r2, [r3, #12]
 80046c8:	e002      	b.n	80046d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3728      	adds	r7, #40	@ 0x28
 80046e4:	46bd      	mov	sp, r7
 80046e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ea:	bf00      	nop
 80046ec:	00f42400 	.word	0x00f42400

080046f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	430a      	orrs	r2, r1
 800475c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004784:	f003 0310 	and.w	r3, r3, #16
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00a      	beq.n	80047a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d01a      	beq.n	8004806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ee:	d10a      	bne.n	8004806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b098      	sub	sp, #96	@ 0x60
 8004838:	af02      	add	r7, sp, #8
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004844:	f7fc ff8e 	bl	8001764 <HAL_GetTick>
 8004848:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b08      	cmp	r3, #8
 8004856:	d12e      	bne.n	80048b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004858:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004860:	2200      	movs	r2, #0
 8004862:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f88c 	bl	8004984 <UART_WaitOnFlagUntilTimeout>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d021      	beq.n	80048b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004882:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004886:	653b      	str	r3, [r7, #80]	@ 0x50
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004890:	647b      	str	r3, [r7, #68]	@ 0x44
 8004892:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004896:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800489e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e6      	bne.n	8004872 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e062      	b.n	800497c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0304 	and.w	r3, r3, #4
 80048c0:	2b04      	cmp	r3, #4
 80048c2:	d149      	bne.n	8004958 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048cc:	2200      	movs	r2, #0
 80048ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f856 	bl	8004984 <UART_WaitOnFlagUntilTimeout>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03c      	beq.n	8004958 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	623b      	str	r3, [r7, #32]
   return(result);
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004930:	61fa      	str	r2, [r7, #28]
 8004932:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	69b9      	ldr	r1, [r7, #24]
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	617b      	str	r3, [r7, #20]
   return(result);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e011      	b.n	800497c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3758      	adds	r7, #88	@ 0x58
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	603b      	str	r3, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004994:	e049      	b.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499c:	d045      	beq.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800499e:	f7fc fee1 	bl	8001764 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d302      	bcc.n	80049b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e048      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d031      	beq.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b08      	cmp	r3, #8
 80049d2:	d110      	bne.n	80049f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2208      	movs	r2, #8
 80049da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 f8ff 	bl	8004be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2208      	movs	r2, #8
 80049e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e029      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a04:	d111      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 f8e5 	bl	8004be0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e00f      	b.n	8004a4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69da      	ldr	r2, [r3, #28]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4013      	ands	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	bf0c      	ite	eq
 8004a3a:	2301      	moveq	r3, #1
 8004a3c:	2300      	movne	r3, #0
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d0a6      	beq.n	8004996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b096      	sub	sp, #88	@ 0x58
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2222      	movs	r2, #34	@ 0x22
 8004a7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d028      	beq.n	8004ada <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8c:	4a3e      	ldr	r2, [pc, #248]	@ (8004b88 <UART_Start_Receive_DMA+0x134>)
 8004a8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a94:	4a3d      	ldr	r2, [pc, #244]	@ (8004b8c <UART_Start_Receive_DMA+0x138>)
 8004a96:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8004b90 <UART_Start_Receive_DMA+0x13c>)
 8004a9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3324      	adds	r3, #36	@ 0x24
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ab8:	461a      	mov	r2, r3
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	f7fd f84c 	bl	8001b58 <HAL_DMA_Start_IT>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d009      	beq.n	8004ada <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2210      	movs	r2, #16
 8004aca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e051      	b.n	8004b7e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d018      	beq.n	8004b14 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b02:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e6      	bne.n	8004ae2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004b34:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b36:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e5      	bne.n	8004b14 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	613b      	str	r3, [r7, #16]
   return(result);
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	3308      	adds	r3, #8
 8004b66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b68:	623a      	str	r2, [r7, #32]
 8004b6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	69f9      	ldr	r1, [r7, #28]
 8004b6e:	6a3a      	ldr	r2, [r7, #32]
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e5      	bne.n	8004b48 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3758      	adds	r7, #88	@ 0x58
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	08004ca9 	.word	0x08004ca9
 8004b8c:	08004dd5 	.word	0x08004dd5
 8004b90:	08004e13 	.word	0x08004e13

08004b94 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b089      	sub	sp, #36	@ 0x24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	61bb      	str	r3, [r7, #24]
 8004bbc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6979      	ldr	r1, [r7, #20]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e6      	bne.n	8004b9c <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004bd4:	bf00      	nop
 8004bd6:	3724      	adds	r7, #36	@ 0x24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b095      	sub	sp, #84	@ 0x54
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf0:	e853 3f00 	ldrex	r3, [r3]
 8004bf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c06:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c0e:	e841 2300 	strex	r3, r2, [r1]
 8004c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1e6      	bne.n	8004be8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	3308      	adds	r3, #8
 8004c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	3308      	adds	r3, #8
 8004c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c42:	e841 2300 	strex	r3, r2, [r1]
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1e5      	bne.n	8004c1a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d118      	bne.n	8004c88 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0310 	bic.w	r3, r3, #16
 8004c6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	613b      	str	r3, [r7, #16]
   return(result);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c9c:	bf00      	nop
 8004c9e:	3754      	adds	r7, #84	@ 0x54
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b09c      	sub	sp, #112	@ 0x70
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0320 	and.w	r3, r3, #32
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d171      	bne.n	8004da8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8004cc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004cec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004cf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e6      	bne.n	8004ccc <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3308      	adds	r3, #8
 8004d04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004d1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e5      	bne.n	8004cfe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	623b      	str	r3, [r7, #32]
   return(result);
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d48:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004d52:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d118      	bne.n	8004da8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	e853 3f00 	ldrex	r3, [r3]
 8004d82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0310 	bic.w	r3, r3, #16
 8004d8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	617b      	str	r3, [r7, #20]
   return(result);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e6      	bne.n	8004d76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004daa:	2200      	movs	r2, #0
 8004dac:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d107      	bne.n	8004dc6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004db6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004db8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004dc0:	f7ff fa5e 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004dc4:	e002      	b.n	8004dcc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004dc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004dc8:	f7fc fa18 	bl	80011fc <HAL_UART_RxCpltCallback>
}
 8004dcc:	bf00      	nop
 8004dce:	3770      	adds	r7, #112	@ 0x70
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2201      	movs	r2, #1
 8004de6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d109      	bne.n	8004e04 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff fa3f 	bl	8004280 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e02:	e002      	b.n	8004e0a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff fa27 	bl	8004258 <HAL_UART_RxHalfCpltCallback>
}
 8004e0a:	bf00      	nop
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e38:	2b80      	cmp	r3, #128	@ 0x80
 8004e3a:	d109      	bne.n	8004e50 <UART_DMAError+0x3e>
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b21      	cmp	r3, #33	@ 0x21
 8004e40:	d106      	bne.n	8004e50 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f7ff fea2 	bl	8004b94 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5a:	2b40      	cmp	r3, #64	@ 0x40
 8004e5c:	d109      	bne.n	8004e72 <UART_DMAError+0x60>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b22      	cmp	r3, #34	@ 0x22
 8004e62:	d106      	bne.n	8004e72 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004e6c:	6978      	ldr	r0, [r7, #20]
 8004e6e:	f7ff feb7 	bl	8004be0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e78:	f043 0210 	orr.w	r2, r3, #16
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e82:	6978      	ldr	r0, [r7, #20]
 8004e84:	f7ff f9f2 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e88:	bf00      	nop
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f7ff f9dc 	bl	800426c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eb4:	bf00      	nop
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b088      	sub	sp, #32
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	e853 3f00 	ldrex	r3, [r3]
 8004ed0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee6:	6979      	ldr	r1, [r7, #20]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1e6      	bne.n	8004ec4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2220      	movs	r2, #32
 8004efa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff f99e 	bl	8004244 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f08:	bf00      	nop
 8004f0a:	3720      	adds	r7, #32
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <__cvt>:
 8004f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f28:	ec57 6b10 	vmov	r6, r7, d0
 8004f2c:	2f00      	cmp	r7, #0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4619      	mov	r1, r3
 8004f32:	463b      	mov	r3, r7
 8004f34:	bfbb      	ittet	lt
 8004f36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004f3a:	461f      	movlt	r7, r3
 8004f3c:	2300      	movge	r3, #0
 8004f3e:	232d      	movlt	r3, #45	@ 0x2d
 8004f40:	700b      	strb	r3, [r1, #0]
 8004f42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004f48:	4691      	mov	r9, r2
 8004f4a:	f023 0820 	bic.w	r8, r3, #32
 8004f4e:	bfbc      	itt	lt
 8004f50:	4632      	movlt	r2, r6
 8004f52:	4616      	movlt	r6, r2
 8004f54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004f58:	d005      	beq.n	8004f66 <__cvt+0x42>
 8004f5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004f5e:	d100      	bne.n	8004f62 <__cvt+0x3e>
 8004f60:	3401      	adds	r4, #1
 8004f62:	2102      	movs	r1, #2
 8004f64:	e000      	b.n	8004f68 <__cvt+0x44>
 8004f66:	2103      	movs	r1, #3
 8004f68:	ab03      	add	r3, sp, #12
 8004f6a:	9301      	str	r3, [sp, #4]
 8004f6c:	ab02      	add	r3, sp, #8
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	ec47 6b10 	vmov	d0, r6, r7
 8004f74:	4653      	mov	r3, sl
 8004f76:	4622      	mov	r2, r4
 8004f78:	f000 fe5a 	bl	8005c30 <_dtoa_r>
 8004f7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004f80:	4605      	mov	r5, r0
 8004f82:	d119      	bne.n	8004fb8 <__cvt+0x94>
 8004f84:	f019 0f01 	tst.w	r9, #1
 8004f88:	d00e      	beq.n	8004fa8 <__cvt+0x84>
 8004f8a:	eb00 0904 	add.w	r9, r0, r4
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2300      	movs	r3, #0
 8004f92:	4630      	mov	r0, r6
 8004f94:	4639      	mov	r1, r7
 8004f96:	f7fb fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f9a:	b108      	cbz	r0, 8004fa0 <__cvt+0x7c>
 8004f9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004fa0:	2230      	movs	r2, #48	@ 0x30
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	454b      	cmp	r3, r9
 8004fa6:	d31e      	bcc.n	8004fe6 <__cvt+0xc2>
 8004fa8:	9b03      	ldr	r3, [sp, #12]
 8004faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004fac:	1b5b      	subs	r3, r3, r5
 8004fae:	4628      	mov	r0, r5
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	b004      	add	sp, #16
 8004fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004fbc:	eb00 0904 	add.w	r9, r0, r4
 8004fc0:	d1e5      	bne.n	8004f8e <__cvt+0x6a>
 8004fc2:	7803      	ldrb	r3, [r0, #0]
 8004fc4:	2b30      	cmp	r3, #48	@ 0x30
 8004fc6:	d10a      	bne.n	8004fde <__cvt+0xba>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2300      	movs	r3, #0
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4639      	mov	r1, r7
 8004fd0:	f7fb fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fd4:	b918      	cbnz	r0, 8004fde <__cvt+0xba>
 8004fd6:	f1c4 0401 	rsb	r4, r4, #1
 8004fda:	f8ca 4000 	str.w	r4, [sl]
 8004fde:	f8da 3000 	ldr.w	r3, [sl]
 8004fe2:	4499      	add	r9, r3
 8004fe4:	e7d3      	b.n	8004f8e <__cvt+0x6a>
 8004fe6:	1c59      	adds	r1, r3, #1
 8004fe8:	9103      	str	r1, [sp, #12]
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e7d9      	b.n	8004fa2 <__cvt+0x7e>

08004fee <__exponent>:
 8004fee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff0:	2900      	cmp	r1, #0
 8004ff2:	bfba      	itte	lt
 8004ff4:	4249      	neglt	r1, r1
 8004ff6:	232d      	movlt	r3, #45	@ 0x2d
 8004ff8:	232b      	movge	r3, #43	@ 0x2b
 8004ffa:	2909      	cmp	r1, #9
 8004ffc:	7002      	strb	r2, [r0, #0]
 8004ffe:	7043      	strb	r3, [r0, #1]
 8005000:	dd29      	ble.n	8005056 <__exponent+0x68>
 8005002:	f10d 0307 	add.w	r3, sp, #7
 8005006:	461d      	mov	r5, r3
 8005008:	270a      	movs	r7, #10
 800500a:	461a      	mov	r2, r3
 800500c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005010:	fb07 1416 	mls	r4, r7, r6, r1
 8005014:	3430      	adds	r4, #48	@ 0x30
 8005016:	f802 4c01 	strb.w	r4, [r2, #-1]
 800501a:	460c      	mov	r4, r1
 800501c:	2c63      	cmp	r4, #99	@ 0x63
 800501e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005022:	4631      	mov	r1, r6
 8005024:	dcf1      	bgt.n	800500a <__exponent+0x1c>
 8005026:	3130      	adds	r1, #48	@ 0x30
 8005028:	1e94      	subs	r4, r2, #2
 800502a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800502e:	1c41      	adds	r1, r0, #1
 8005030:	4623      	mov	r3, r4
 8005032:	42ab      	cmp	r3, r5
 8005034:	d30a      	bcc.n	800504c <__exponent+0x5e>
 8005036:	f10d 0309 	add.w	r3, sp, #9
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	42ac      	cmp	r4, r5
 800503e:	bf88      	it	hi
 8005040:	2300      	movhi	r3, #0
 8005042:	3302      	adds	r3, #2
 8005044:	4403      	add	r3, r0
 8005046:	1a18      	subs	r0, r3, r0
 8005048:	b003      	add	sp, #12
 800504a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005050:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005054:	e7ed      	b.n	8005032 <__exponent+0x44>
 8005056:	2330      	movs	r3, #48	@ 0x30
 8005058:	3130      	adds	r1, #48	@ 0x30
 800505a:	7083      	strb	r3, [r0, #2]
 800505c:	70c1      	strb	r1, [r0, #3]
 800505e:	1d03      	adds	r3, r0, #4
 8005060:	e7f1      	b.n	8005046 <__exponent+0x58>
	...

08005064 <_printf_float>:
 8005064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005068:	b08d      	sub	sp, #52	@ 0x34
 800506a:	460c      	mov	r4, r1
 800506c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005070:	4616      	mov	r6, r2
 8005072:	461f      	mov	r7, r3
 8005074:	4605      	mov	r5, r0
 8005076:	f000 fcdb 	bl	8005a30 <_localeconv_r>
 800507a:	6803      	ldr	r3, [r0, #0]
 800507c:	9304      	str	r3, [sp, #16]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb f8f6 	bl	8000270 <strlen>
 8005084:	2300      	movs	r3, #0
 8005086:	930a      	str	r3, [sp, #40]	@ 0x28
 8005088:	f8d8 3000 	ldr.w	r3, [r8]
 800508c:	9005      	str	r0, [sp, #20]
 800508e:	3307      	adds	r3, #7
 8005090:	f023 0307 	bic.w	r3, r3, #7
 8005094:	f103 0208 	add.w	r2, r3, #8
 8005098:	f894 a018 	ldrb.w	sl, [r4, #24]
 800509c:	f8d4 b000 	ldr.w	fp, [r4]
 80050a0:	f8c8 2000 	str.w	r2, [r8]
 80050a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80050ac:	9307      	str	r3, [sp, #28]
 80050ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80050b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80050b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ba:	4b9c      	ldr	r3, [pc, #624]	@ (800532c <_printf_float+0x2c8>)
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295
 80050c0:	f7fb fd34 	bl	8000b2c <__aeabi_dcmpun>
 80050c4:	bb70      	cbnz	r0, 8005124 <_printf_float+0xc0>
 80050c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80050ca:	4b98      	ldr	r3, [pc, #608]	@ (800532c <_printf_float+0x2c8>)
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295
 80050d0:	f7fb fd0e 	bl	8000af0 <__aeabi_dcmple>
 80050d4:	bb30      	cbnz	r0, 8005124 <_printf_float+0xc0>
 80050d6:	2200      	movs	r2, #0
 80050d8:	2300      	movs	r3, #0
 80050da:	4640      	mov	r0, r8
 80050dc:	4649      	mov	r1, r9
 80050de:	f7fb fcfd 	bl	8000adc <__aeabi_dcmplt>
 80050e2:	b110      	cbz	r0, 80050ea <_printf_float+0x86>
 80050e4:	232d      	movs	r3, #45	@ 0x2d
 80050e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ea:	4a91      	ldr	r2, [pc, #580]	@ (8005330 <_printf_float+0x2cc>)
 80050ec:	4b91      	ldr	r3, [pc, #580]	@ (8005334 <_printf_float+0x2d0>)
 80050ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80050f2:	bf94      	ite	ls
 80050f4:	4690      	movls	r8, r2
 80050f6:	4698      	movhi	r8, r3
 80050f8:	2303      	movs	r3, #3
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	f02b 0304 	bic.w	r3, fp, #4
 8005100:	6023      	str	r3, [r4, #0]
 8005102:	f04f 0900 	mov.w	r9, #0
 8005106:	9700      	str	r7, [sp, #0]
 8005108:	4633      	mov	r3, r6
 800510a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800510c:	4621      	mov	r1, r4
 800510e:	4628      	mov	r0, r5
 8005110:	f000 f9d2 	bl	80054b8 <_printf_common>
 8005114:	3001      	adds	r0, #1
 8005116:	f040 808d 	bne.w	8005234 <_printf_float+0x1d0>
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	b00d      	add	sp, #52	@ 0x34
 8005120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005124:	4642      	mov	r2, r8
 8005126:	464b      	mov	r3, r9
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb fcfe 	bl	8000b2c <__aeabi_dcmpun>
 8005130:	b140      	cbz	r0, 8005144 <_printf_float+0xe0>
 8005132:	464b      	mov	r3, r9
 8005134:	2b00      	cmp	r3, #0
 8005136:	bfbc      	itt	lt
 8005138:	232d      	movlt	r3, #45	@ 0x2d
 800513a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800513e:	4a7e      	ldr	r2, [pc, #504]	@ (8005338 <_printf_float+0x2d4>)
 8005140:	4b7e      	ldr	r3, [pc, #504]	@ (800533c <_printf_float+0x2d8>)
 8005142:	e7d4      	b.n	80050ee <_printf_float+0x8a>
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800514a:	9206      	str	r2, [sp, #24]
 800514c:	1c5a      	adds	r2, r3, #1
 800514e:	d13b      	bne.n	80051c8 <_printf_float+0x164>
 8005150:	2306      	movs	r3, #6
 8005152:	6063      	str	r3, [r4, #4]
 8005154:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005158:	2300      	movs	r3, #0
 800515a:	6022      	str	r2, [r4, #0]
 800515c:	9303      	str	r3, [sp, #12]
 800515e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005160:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005164:	ab09      	add	r3, sp, #36	@ 0x24
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	6861      	ldr	r1, [r4, #4]
 800516a:	ec49 8b10 	vmov	d0, r8, r9
 800516e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005172:	4628      	mov	r0, r5
 8005174:	f7ff fed6 	bl	8004f24 <__cvt>
 8005178:	9b06      	ldr	r3, [sp, #24]
 800517a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800517c:	2b47      	cmp	r3, #71	@ 0x47
 800517e:	4680      	mov	r8, r0
 8005180:	d129      	bne.n	80051d6 <_printf_float+0x172>
 8005182:	1cc8      	adds	r0, r1, #3
 8005184:	db02      	blt.n	800518c <_printf_float+0x128>
 8005186:	6863      	ldr	r3, [r4, #4]
 8005188:	4299      	cmp	r1, r3
 800518a:	dd41      	ble.n	8005210 <_printf_float+0x1ac>
 800518c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005190:	fa5f fa8a 	uxtb.w	sl, sl
 8005194:	3901      	subs	r1, #1
 8005196:	4652      	mov	r2, sl
 8005198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800519c:	9109      	str	r1, [sp, #36]	@ 0x24
 800519e:	f7ff ff26 	bl	8004fee <__exponent>
 80051a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80051a4:	1813      	adds	r3, r2, r0
 80051a6:	2a01      	cmp	r2, #1
 80051a8:	4681      	mov	r9, r0
 80051aa:	6123      	str	r3, [r4, #16]
 80051ac:	dc02      	bgt.n	80051b4 <_printf_float+0x150>
 80051ae:	6822      	ldr	r2, [r4, #0]
 80051b0:	07d2      	lsls	r2, r2, #31
 80051b2:	d501      	bpl.n	80051b8 <_printf_float+0x154>
 80051b4:	3301      	adds	r3, #1
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0a2      	beq.n	8005106 <_printf_float+0xa2>
 80051c0:	232d      	movs	r3, #45	@ 0x2d
 80051c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051c6:	e79e      	b.n	8005106 <_printf_float+0xa2>
 80051c8:	9a06      	ldr	r2, [sp, #24]
 80051ca:	2a47      	cmp	r2, #71	@ 0x47
 80051cc:	d1c2      	bne.n	8005154 <_printf_float+0xf0>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1c0      	bne.n	8005154 <_printf_float+0xf0>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e7bd      	b.n	8005152 <_printf_float+0xee>
 80051d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80051da:	d9db      	bls.n	8005194 <_printf_float+0x130>
 80051dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80051e0:	d118      	bne.n	8005214 <_printf_float+0x1b0>
 80051e2:	2900      	cmp	r1, #0
 80051e4:	6863      	ldr	r3, [r4, #4]
 80051e6:	dd0b      	ble.n	8005200 <_printf_float+0x19c>
 80051e8:	6121      	str	r1, [r4, #16]
 80051ea:	b913      	cbnz	r3, 80051f2 <_printf_float+0x18e>
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	07d0      	lsls	r0, r2, #31
 80051f0:	d502      	bpl.n	80051f8 <_printf_float+0x194>
 80051f2:	3301      	adds	r3, #1
 80051f4:	440b      	add	r3, r1
 80051f6:	6123      	str	r3, [r4, #16]
 80051f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80051fa:	f04f 0900 	mov.w	r9, #0
 80051fe:	e7db      	b.n	80051b8 <_printf_float+0x154>
 8005200:	b913      	cbnz	r3, 8005208 <_printf_float+0x1a4>
 8005202:	6822      	ldr	r2, [r4, #0]
 8005204:	07d2      	lsls	r2, r2, #31
 8005206:	d501      	bpl.n	800520c <_printf_float+0x1a8>
 8005208:	3302      	adds	r3, #2
 800520a:	e7f4      	b.n	80051f6 <_printf_float+0x192>
 800520c:	2301      	movs	r3, #1
 800520e:	e7f2      	b.n	80051f6 <_printf_float+0x192>
 8005210:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005216:	4299      	cmp	r1, r3
 8005218:	db05      	blt.n	8005226 <_printf_float+0x1c2>
 800521a:	6823      	ldr	r3, [r4, #0]
 800521c:	6121      	str	r1, [r4, #16]
 800521e:	07d8      	lsls	r0, r3, #31
 8005220:	d5ea      	bpl.n	80051f8 <_printf_float+0x194>
 8005222:	1c4b      	adds	r3, r1, #1
 8005224:	e7e7      	b.n	80051f6 <_printf_float+0x192>
 8005226:	2900      	cmp	r1, #0
 8005228:	bfd4      	ite	le
 800522a:	f1c1 0202 	rsble	r2, r1, #2
 800522e:	2201      	movgt	r2, #1
 8005230:	4413      	add	r3, r2
 8005232:	e7e0      	b.n	80051f6 <_printf_float+0x192>
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	055a      	lsls	r2, r3, #21
 8005238:	d407      	bmi.n	800524a <_printf_float+0x1e6>
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	4642      	mov	r2, r8
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	d12b      	bne.n	80052a0 <_printf_float+0x23c>
 8005248:	e767      	b.n	800511a <_printf_float+0xb6>
 800524a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800524e:	f240 80dd 	bls.w	800540c <_printf_float+0x3a8>
 8005252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005256:	2200      	movs	r2, #0
 8005258:	2300      	movs	r3, #0
 800525a:	f7fb fc35 	bl	8000ac8 <__aeabi_dcmpeq>
 800525e:	2800      	cmp	r0, #0
 8005260:	d033      	beq.n	80052ca <_printf_float+0x266>
 8005262:	4a37      	ldr	r2, [pc, #220]	@ (8005340 <_printf_float+0x2dc>)
 8005264:	2301      	movs	r3, #1
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f af54 	beq.w	800511a <_printf_float+0xb6>
 8005272:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005276:	4543      	cmp	r3, r8
 8005278:	db02      	blt.n	8005280 <_printf_float+0x21c>
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	07d8      	lsls	r0, r3, #31
 800527e:	d50f      	bpl.n	80052a0 <_printf_float+0x23c>
 8005280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005284:	4631      	mov	r1, r6
 8005286:	4628      	mov	r0, r5
 8005288:	47b8      	blx	r7
 800528a:	3001      	adds	r0, #1
 800528c:	f43f af45 	beq.w	800511a <_printf_float+0xb6>
 8005290:	f04f 0900 	mov.w	r9, #0
 8005294:	f108 38ff 	add.w	r8, r8, #4294967295
 8005298:	f104 0a1a 	add.w	sl, r4, #26
 800529c:	45c8      	cmp	r8, r9
 800529e:	dc09      	bgt.n	80052b4 <_printf_float+0x250>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	079b      	lsls	r3, r3, #30
 80052a4:	f100 8103 	bmi.w	80054ae <_printf_float+0x44a>
 80052a8:	68e0      	ldr	r0, [r4, #12]
 80052aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80052ac:	4298      	cmp	r0, r3
 80052ae:	bfb8      	it	lt
 80052b0:	4618      	movlt	r0, r3
 80052b2:	e734      	b.n	800511e <_printf_float+0xba>
 80052b4:	2301      	movs	r3, #1
 80052b6:	4652      	mov	r2, sl
 80052b8:	4631      	mov	r1, r6
 80052ba:	4628      	mov	r0, r5
 80052bc:	47b8      	blx	r7
 80052be:	3001      	adds	r0, #1
 80052c0:	f43f af2b 	beq.w	800511a <_printf_float+0xb6>
 80052c4:	f109 0901 	add.w	r9, r9, #1
 80052c8:	e7e8      	b.n	800529c <_printf_float+0x238>
 80052ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dc39      	bgt.n	8005344 <_printf_float+0x2e0>
 80052d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005340 <_printf_float+0x2dc>)
 80052d2:	2301      	movs	r3, #1
 80052d4:	4631      	mov	r1, r6
 80052d6:	4628      	mov	r0, r5
 80052d8:	47b8      	blx	r7
 80052da:	3001      	adds	r0, #1
 80052dc:	f43f af1d 	beq.w	800511a <_printf_float+0xb6>
 80052e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80052e4:	ea59 0303 	orrs.w	r3, r9, r3
 80052e8:	d102      	bne.n	80052f0 <_printf_float+0x28c>
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	07d9      	lsls	r1, r3, #31
 80052ee:	d5d7      	bpl.n	80052a0 <_printf_float+0x23c>
 80052f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052f4:	4631      	mov	r1, r6
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	f43f af0d 	beq.w	800511a <_printf_float+0xb6>
 8005300:	f04f 0a00 	mov.w	sl, #0
 8005304:	f104 0b1a 	add.w	fp, r4, #26
 8005308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530a:	425b      	negs	r3, r3
 800530c:	4553      	cmp	r3, sl
 800530e:	dc01      	bgt.n	8005314 <_printf_float+0x2b0>
 8005310:	464b      	mov	r3, r9
 8005312:	e793      	b.n	800523c <_printf_float+0x1d8>
 8005314:	2301      	movs	r3, #1
 8005316:	465a      	mov	r2, fp
 8005318:	4631      	mov	r1, r6
 800531a:	4628      	mov	r0, r5
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f aefb 	beq.w	800511a <_printf_float+0xb6>
 8005324:	f10a 0a01 	add.w	sl, sl, #1
 8005328:	e7ee      	b.n	8005308 <_printf_float+0x2a4>
 800532a:	bf00      	nop
 800532c:	7fefffff 	.word	0x7fefffff
 8005330:	08007c28 	.word	0x08007c28
 8005334:	08007c2c 	.word	0x08007c2c
 8005338:	08007c30 	.word	0x08007c30
 800533c:	08007c34 	.word	0x08007c34
 8005340:	08007c38 	.word	0x08007c38
 8005344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800534a:	4553      	cmp	r3, sl
 800534c:	bfa8      	it	ge
 800534e:	4653      	movge	r3, sl
 8005350:	2b00      	cmp	r3, #0
 8005352:	4699      	mov	r9, r3
 8005354:	dc36      	bgt.n	80053c4 <_printf_float+0x360>
 8005356:	f04f 0b00 	mov.w	fp, #0
 800535a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800535e:	f104 021a 	add.w	r2, r4, #26
 8005362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005364:	9306      	str	r3, [sp, #24]
 8005366:	eba3 0309 	sub.w	r3, r3, r9
 800536a:	455b      	cmp	r3, fp
 800536c:	dc31      	bgt.n	80053d2 <_printf_float+0x36e>
 800536e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005370:	459a      	cmp	sl, r3
 8005372:	dc3a      	bgt.n	80053ea <_printf_float+0x386>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	07da      	lsls	r2, r3, #31
 8005378:	d437      	bmi.n	80053ea <_printf_float+0x386>
 800537a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800537c:	ebaa 0903 	sub.w	r9, sl, r3
 8005380:	9b06      	ldr	r3, [sp, #24]
 8005382:	ebaa 0303 	sub.w	r3, sl, r3
 8005386:	4599      	cmp	r9, r3
 8005388:	bfa8      	it	ge
 800538a:	4699      	movge	r9, r3
 800538c:	f1b9 0f00 	cmp.w	r9, #0
 8005390:	dc33      	bgt.n	80053fa <_printf_float+0x396>
 8005392:	f04f 0800 	mov.w	r8, #0
 8005396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800539a:	f104 0b1a 	add.w	fp, r4, #26
 800539e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053a0:	ebaa 0303 	sub.w	r3, sl, r3
 80053a4:	eba3 0309 	sub.w	r3, r3, r9
 80053a8:	4543      	cmp	r3, r8
 80053aa:	f77f af79 	ble.w	80052a0 <_printf_float+0x23c>
 80053ae:	2301      	movs	r3, #1
 80053b0:	465a      	mov	r2, fp
 80053b2:	4631      	mov	r1, r6
 80053b4:	4628      	mov	r0, r5
 80053b6:	47b8      	blx	r7
 80053b8:	3001      	adds	r0, #1
 80053ba:	f43f aeae 	beq.w	800511a <_printf_float+0xb6>
 80053be:	f108 0801 	add.w	r8, r8, #1
 80053c2:	e7ec      	b.n	800539e <_printf_float+0x33a>
 80053c4:	4642      	mov	r2, r8
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	d1c2      	bne.n	8005356 <_printf_float+0x2f2>
 80053d0:	e6a3      	b.n	800511a <_printf_float+0xb6>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4631      	mov	r1, r6
 80053d6:	4628      	mov	r0, r5
 80053d8:	9206      	str	r2, [sp, #24]
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae9c 	beq.w	800511a <_printf_float+0xb6>
 80053e2:	9a06      	ldr	r2, [sp, #24]
 80053e4:	f10b 0b01 	add.w	fp, fp, #1
 80053e8:	e7bb      	b.n	8005362 <_printf_float+0x2fe>
 80053ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	d1c0      	bne.n	800537a <_printf_float+0x316>
 80053f8:	e68f      	b.n	800511a <_printf_float+0xb6>
 80053fa:	9a06      	ldr	r2, [sp, #24]
 80053fc:	464b      	mov	r3, r9
 80053fe:	4442      	add	r2, r8
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	d1c3      	bne.n	8005392 <_printf_float+0x32e>
 800540a:	e686      	b.n	800511a <_printf_float+0xb6>
 800540c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005410:	f1ba 0f01 	cmp.w	sl, #1
 8005414:	dc01      	bgt.n	800541a <_printf_float+0x3b6>
 8005416:	07db      	lsls	r3, r3, #31
 8005418:	d536      	bpl.n	8005488 <_printf_float+0x424>
 800541a:	2301      	movs	r3, #1
 800541c:	4642      	mov	r2, r8
 800541e:	4631      	mov	r1, r6
 8005420:	4628      	mov	r0, r5
 8005422:	47b8      	blx	r7
 8005424:	3001      	adds	r0, #1
 8005426:	f43f ae78 	beq.w	800511a <_printf_float+0xb6>
 800542a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542e:	4631      	mov	r1, r6
 8005430:	4628      	mov	r0, r5
 8005432:	47b8      	blx	r7
 8005434:	3001      	adds	r0, #1
 8005436:	f43f ae70 	beq.w	800511a <_printf_float+0xb6>
 800543a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800543e:	2200      	movs	r2, #0
 8005440:	2300      	movs	r3, #0
 8005442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005446:	f7fb fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800544a:	b9c0      	cbnz	r0, 800547e <_printf_float+0x41a>
 800544c:	4653      	mov	r3, sl
 800544e:	f108 0201 	add.w	r2, r8, #1
 8005452:	4631      	mov	r1, r6
 8005454:	4628      	mov	r0, r5
 8005456:	47b8      	blx	r7
 8005458:	3001      	adds	r0, #1
 800545a:	d10c      	bne.n	8005476 <_printf_float+0x412>
 800545c:	e65d      	b.n	800511a <_printf_float+0xb6>
 800545e:	2301      	movs	r3, #1
 8005460:	465a      	mov	r2, fp
 8005462:	4631      	mov	r1, r6
 8005464:	4628      	mov	r0, r5
 8005466:	47b8      	blx	r7
 8005468:	3001      	adds	r0, #1
 800546a:	f43f ae56 	beq.w	800511a <_printf_float+0xb6>
 800546e:	f108 0801 	add.w	r8, r8, #1
 8005472:	45d0      	cmp	r8, sl
 8005474:	dbf3      	blt.n	800545e <_printf_float+0x3fa>
 8005476:	464b      	mov	r3, r9
 8005478:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800547c:	e6df      	b.n	800523e <_printf_float+0x1da>
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	f104 0b1a 	add.w	fp, r4, #26
 8005486:	e7f4      	b.n	8005472 <_printf_float+0x40e>
 8005488:	2301      	movs	r3, #1
 800548a:	4642      	mov	r2, r8
 800548c:	e7e1      	b.n	8005452 <_printf_float+0x3ee>
 800548e:	2301      	movs	r3, #1
 8005490:	464a      	mov	r2, r9
 8005492:	4631      	mov	r1, r6
 8005494:	4628      	mov	r0, r5
 8005496:	47b8      	blx	r7
 8005498:	3001      	adds	r0, #1
 800549a:	f43f ae3e 	beq.w	800511a <_printf_float+0xb6>
 800549e:	f108 0801 	add.w	r8, r8, #1
 80054a2:	68e3      	ldr	r3, [r4, #12]
 80054a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054a6:	1a5b      	subs	r3, r3, r1
 80054a8:	4543      	cmp	r3, r8
 80054aa:	dcf0      	bgt.n	800548e <_printf_float+0x42a>
 80054ac:	e6fc      	b.n	80052a8 <_printf_float+0x244>
 80054ae:	f04f 0800 	mov.w	r8, #0
 80054b2:	f104 0919 	add.w	r9, r4, #25
 80054b6:	e7f4      	b.n	80054a2 <_printf_float+0x43e>

080054b8 <_printf_common>:
 80054b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	4616      	mov	r6, r2
 80054be:	4698      	mov	r8, r3
 80054c0:	688a      	ldr	r2, [r1, #8]
 80054c2:	690b      	ldr	r3, [r1, #16]
 80054c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bfb8      	it	lt
 80054cc:	4613      	movlt	r3, r2
 80054ce:	6033      	str	r3, [r6, #0]
 80054d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80054d4:	4607      	mov	r7, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	b10a      	cbz	r2, 80054de <_printf_common+0x26>
 80054da:	3301      	adds	r3, #1
 80054dc:	6033      	str	r3, [r6, #0]
 80054de:	6823      	ldr	r3, [r4, #0]
 80054e0:	0699      	lsls	r1, r3, #26
 80054e2:	bf42      	ittt	mi
 80054e4:	6833      	ldrmi	r3, [r6, #0]
 80054e6:	3302      	addmi	r3, #2
 80054e8:	6033      	strmi	r3, [r6, #0]
 80054ea:	6825      	ldr	r5, [r4, #0]
 80054ec:	f015 0506 	ands.w	r5, r5, #6
 80054f0:	d106      	bne.n	8005500 <_printf_common+0x48>
 80054f2:	f104 0a19 	add.w	sl, r4, #25
 80054f6:	68e3      	ldr	r3, [r4, #12]
 80054f8:	6832      	ldr	r2, [r6, #0]
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	42ab      	cmp	r3, r5
 80054fe:	dc26      	bgt.n	800554e <_printf_common+0x96>
 8005500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	3b00      	subs	r3, #0
 8005508:	bf18      	it	ne
 800550a:	2301      	movne	r3, #1
 800550c:	0692      	lsls	r2, r2, #26
 800550e:	d42b      	bmi.n	8005568 <_printf_common+0xb0>
 8005510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005514:	4641      	mov	r1, r8
 8005516:	4638      	mov	r0, r7
 8005518:	47c8      	blx	r9
 800551a:	3001      	adds	r0, #1
 800551c:	d01e      	beq.n	800555c <_printf_common+0xa4>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	6922      	ldr	r2, [r4, #16]
 8005522:	f003 0306 	and.w	r3, r3, #6
 8005526:	2b04      	cmp	r3, #4
 8005528:	bf02      	ittt	eq
 800552a:	68e5      	ldreq	r5, [r4, #12]
 800552c:	6833      	ldreq	r3, [r6, #0]
 800552e:	1aed      	subeq	r5, r5, r3
 8005530:	68a3      	ldr	r3, [r4, #8]
 8005532:	bf0c      	ite	eq
 8005534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005538:	2500      	movne	r5, #0
 800553a:	4293      	cmp	r3, r2
 800553c:	bfc4      	itt	gt
 800553e:	1a9b      	subgt	r3, r3, r2
 8005540:	18ed      	addgt	r5, r5, r3
 8005542:	2600      	movs	r6, #0
 8005544:	341a      	adds	r4, #26
 8005546:	42b5      	cmp	r5, r6
 8005548:	d11a      	bne.n	8005580 <_printf_common+0xc8>
 800554a:	2000      	movs	r0, #0
 800554c:	e008      	b.n	8005560 <_printf_common+0xa8>
 800554e:	2301      	movs	r3, #1
 8005550:	4652      	mov	r2, sl
 8005552:	4641      	mov	r1, r8
 8005554:	4638      	mov	r0, r7
 8005556:	47c8      	blx	r9
 8005558:	3001      	adds	r0, #1
 800555a:	d103      	bne.n	8005564 <_printf_common+0xac>
 800555c:	f04f 30ff 	mov.w	r0, #4294967295
 8005560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005564:	3501      	adds	r5, #1
 8005566:	e7c6      	b.n	80054f6 <_printf_common+0x3e>
 8005568:	18e1      	adds	r1, r4, r3
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	2030      	movs	r0, #48	@ 0x30
 800556e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005572:	4422      	add	r2, r4
 8005574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800557c:	3302      	adds	r3, #2
 800557e:	e7c7      	b.n	8005510 <_printf_common+0x58>
 8005580:	2301      	movs	r3, #1
 8005582:	4622      	mov	r2, r4
 8005584:	4641      	mov	r1, r8
 8005586:	4638      	mov	r0, r7
 8005588:	47c8      	blx	r9
 800558a:	3001      	adds	r0, #1
 800558c:	d0e6      	beq.n	800555c <_printf_common+0xa4>
 800558e:	3601      	adds	r6, #1
 8005590:	e7d9      	b.n	8005546 <_printf_common+0x8e>
	...

08005594 <_printf_i>:
 8005594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	7e0f      	ldrb	r7, [r1, #24]
 800559a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800559c:	2f78      	cmp	r7, #120	@ 0x78
 800559e:	4691      	mov	r9, r2
 80055a0:	4680      	mov	r8, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	469a      	mov	sl, r3
 80055a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055aa:	d807      	bhi.n	80055bc <_printf_i+0x28>
 80055ac:	2f62      	cmp	r7, #98	@ 0x62
 80055ae:	d80a      	bhi.n	80055c6 <_printf_i+0x32>
 80055b0:	2f00      	cmp	r7, #0
 80055b2:	f000 80d2 	beq.w	800575a <_printf_i+0x1c6>
 80055b6:	2f58      	cmp	r7, #88	@ 0x58
 80055b8:	f000 80b9 	beq.w	800572e <_printf_i+0x19a>
 80055bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80055c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80055c4:	e03a      	b.n	800563c <_printf_i+0xa8>
 80055c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80055ca:	2b15      	cmp	r3, #21
 80055cc:	d8f6      	bhi.n	80055bc <_printf_i+0x28>
 80055ce:	a101      	add	r1, pc, #4	@ (adr r1, 80055d4 <_printf_i+0x40>)
 80055d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80055d4:	0800562d 	.word	0x0800562d
 80055d8:	08005641 	.word	0x08005641
 80055dc:	080055bd 	.word	0x080055bd
 80055e0:	080055bd 	.word	0x080055bd
 80055e4:	080055bd 	.word	0x080055bd
 80055e8:	080055bd 	.word	0x080055bd
 80055ec:	08005641 	.word	0x08005641
 80055f0:	080055bd 	.word	0x080055bd
 80055f4:	080055bd 	.word	0x080055bd
 80055f8:	080055bd 	.word	0x080055bd
 80055fc:	080055bd 	.word	0x080055bd
 8005600:	08005741 	.word	0x08005741
 8005604:	0800566b 	.word	0x0800566b
 8005608:	080056fb 	.word	0x080056fb
 800560c:	080055bd 	.word	0x080055bd
 8005610:	080055bd 	.word	0x080055bd
 8005614:	08005763 	.word	0x08005763
 8005618:	080055bd 	.word	0x080055bd
 800561c:	0800566b 	.word	0x0800566b
 8005620:	080055bd 	.word	0x080055bd
 8005624:	080055bd 	.word	0x080055bd
 8005628:	08005703 	.word	0x08005703
 800562c:	6833      	ldr	r3, [r6, #0]
 800562e:	1d1a      	adds	r2, r3, #4
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6032      	str	r2, [r6, #0]
 8005634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800563c:	2301      	movs	r3, #1
 800563e:	e09d      	b.n	800577c <_printf_i+0x1e8>
 8005640:	6833      	ldr	r3, [r6, #0]
 8005642:	6820      	ldr	r0, [r4, #0]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	6031      	str	r1, [r6, #0]
 8005648:	0606      	lsls	r6, r0, #24
 800564a:	d501      	bpl.n	8005650 <_printf_i+0xbc>
 800564c:	681d      	ldr	r5, [r3, #0]
 800564e:	e003      	b.n	8005658 <_printf_i+0xc4>
 8005650:	0645      	lsls	r5, r0, #25
 8005652:	d5fb      	bpl.n	800564c <_printf_i+0xb8>
 8005654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005658:	2d00      	cmp	r5, #0
 800565a:	da03      	bge.n	8005664 <_printf_i+0xd0>
 800565c:	232d      	movs	r3, #45	@ 0x2d
 800565e:	426d      	negs	r5, r5
 8005660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005664:	4859      	ldr	r0, [pc, #356]	@ (80057cc <_printf_i+0x238>)
 8005666:	230a      	movs	r3, #10
 8005668:	e011      	b.n	800568e <_printf_i+0xfa>
 800566a:	6821      	ldr	r1, [r4, #0]
 800566c:	6833      	ldr	r3, [r6, #0]
 800566e:	0608      	lsls	r0, r1, #24
 8005670:	f853 5b04 	ldr.w	r5, [r3], #4
 8005674:	d402      	bmi.n	800567c <_printf_i+0xe8>
 8005676:	0649      	lsls	r1, r1, #25
 8005678:	bf48      	it	mi
 800567a:	b2ad      	uxthmi	r5, r5
 800567c:	2f6f      	cmp	r7, #111	@ 0x6f
 800567e:	4853      	ldr	r0, [pc, #332]	@ (80057cc <_printf_i+0x238>)
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	bf14      	ite	ne
 8005684:	230a      	movne	r3, #10
 8005686:	2308      	moveq	r3, #8
 8005688:	2100      	movs	r1, #0
 800568a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800568e:	6866      	ldr	r6, [r4, #4]
 8005690:	60a6      	str	r6, [r4, #8]
 8005692:	2e00      	cmp	r6, #0
 8005694:	bfa2      	ittt	ge
 8005696:	6821      	ldrge	r1, [r4, #0]
 8005698:	f021 0104 	bicge.w	r1, r1, #4
 800569c:	6021      	strge	r1, [r4, #0]
 800569e:	b90d      	cbnz	r5, 80056a4 <_printf_i+0x110>
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	d04b      	beq.n	800573c <_printf_i+0x1a8>
 80056a4:	4616      	mov	r6, r2
 80056a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80056aa:	fb03 5711 	mls	r7, r3, r1, r5
 80056ae:	5dc7      	ldrb	r7, [r0, r7]
 80056b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056b4:	462f      	mov	r7, r5
 80056b6:	42bb      	cmp	r3, r7
 80056b8:	460d      	mov	r5, r1
 80056ba:	d9f4      	bls.n	80056a6 <_printf_i+0x112>
 80056bc:	2b08      	cmp	r3, #8
 80056be:	d10b      	bne.n	80056d8 <_printf_i+0x144>
 80056c0:	6823      	ldr	r3, [r4, #0]
 80056c2:	07df      	lsls	r7, r3, #31
 80056c4:	d508      	bpl.n	80056d8 <_printf_i+0x144>
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	6861      	ldr	r1, [r4, #4]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	bfde      	ittt	le
 80056ce:	2330      	movle	r3, #48	@ 0x30
 80056d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056d8:	1b92      	subs	r2, r2, r6
 80056da:	6122      	str	r2, [r4, #16]
 80056dc:	f8cd a000 	str.w	sl, [sp]
 80056e0:	464b      	mov	r3, r9
 80056e2:	aa03      	add	r2, sp, #12
 80056e4:	4621      	mov	r1, r4
 80056e6:	4640      	mov	r0, r8
 80056e8:	f7ff fee6 	bl	80054b8 <_printf_common>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d14a      	bne.n	8005786 <_printf_i+0x1f2>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	b004      	add	sp, #16
 80056f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056fa:	6823      	ldr	r3, [r4, #0]
 80056fc:	f043 0320 	orr.w	r3, r3, #32
 8005700:	6023      	str	r3, [r4, #0]
 8005702:	4833      	ldr	r0, [pc, #204]	@ (80057d0 <_printf_i+0x23c>)
 8005704:	2778      	movs	r7, #120	@ 0x78
 8005706:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	6831      	ldr	r1, [r6, #0]
 800570e:	061f      	lsls	r7, r3, #24
 8005710:	f851 5b04 	ldr.w	r5, [r1], #4
 8005714:	d402      	bmi.n	800571c <_printf_i+0x188>
 8005716:	065f      	lsls	r7, r3, #25
 8005718:	bf48      	it	mi
 800571a:	b2ad      	uxthmi	r5, r5
 800571c:	6031      	str	r1, [r6, #0]
 800571e:	07d9      	lsls	r1, r3, #31
 8005720:	bf44      	itt	mi
 8005722:	f043 0320 	orrmi.w	r3, r3, #32
 8005726:	6023      	strmi	r3, [r4, #0]
 8005728:	b11d      	cbz	r5, 8005732 <_printf_i+0x19e>
 800572a:	2310      	movs	r3, #16
 800572c:	e7ac      	b.n	8005688 <_printf_i+0xf4>
 800572e:	4827      	ldr	r0, [pc, #156]	@ (80057cc <_printf_i+0x238>)
 8005730:	e7e9      	b.n	8005706 <_printf_i+0x172>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f023 0320 	bic.w	r3, r3, #32
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	e7f6      	b.n	800572a <_printf_i+0x196>
 800573c:	4616      	mov	r6, r2
 800573e:	e7bd      	b.n	80056bc <_printf_i+0x128>
 8005740:	6833      	ldr	r3, [r6, #0]
 8005742:	6825      	ldr	r5, [r4, #0]
 8005744:	6961      	ldr	r1, [r4, #20]
 8005746:	1d18      	adds	r0, r3, #4
 8005748:	6030      	str	r0, [r6, #0]
 800574a:	062e      	lsls	r6, r5, #24
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	d501      	bpl.n	8005754 <_printf_i+0x1c0>
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	e002      	b.n	800575a <_printf_i+0x1c6>
 8005754:	0668      	lsls	r0, r5, #25
 8005756:	d5fb      	bpl.n	8005750 <_printf_i+0x1bc>
 8005758:	8019      	strh	r1, [r3, #0]
 800575a:	2300      	movs	r3, #0
 800575c:	6123      	str	r3, [r4, #16]
 800575e:	4616      	mov	r6, r2
 8005760:	e7bc      	b.n	80056dc <_printf_i+0x148>
 8005762:	6833      	ldr	r3, [r6, #0]
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	6032      	str	r2, [r6, #0]
 8005768:	681e      	ldr	r6, [r3, #0]
 800576a:	6862      	ldr	r2, [r4, #4]
 800576c:	2100      	movs	r1, #0
 800576e:	4630      	mov	r0, r6
 8005770:	f7fa fd2e 	bl	80001d0 <memchr>
 8005774:	b108      	cbz	r0, 800577a <_printf_i+0x1e6>
 8005776:	1b80      	subs	r0, r0, r6
 8005778:	6060      	str	r0, [r4, #4]
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	2300      	movs	r3, #0
 8005780:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005784:	e7aa      	b.n	80056dc <_printf_i+0x148>
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	4632      	mov	r2, r6
 800578a:	4649      	mov	r1, r9
 800578c:	4640      	mov	r0, r8
 800578e:	47d0      	blx	sl
 8005790:	3001      	adds	r0, #1
 8005792:	d0ad      	beq.n	80056f0 <_printf_i+0x15c>
 8005794:	6823      	ldr	r3, [r4, #0]
 8005796:	079b      	lsls	r3, r3, #30
 8005798:	d413      	bmi.n	80057c2 <_printf_i+0x22e>
 800579a:	68e0      	ldr	r0, [r4, #12]
 800579c:	9b03      	ldr	r3, [sp, #12]
 800579e:	4298      	cmp	r0, r3
 80057a0:	bfb8      	it	lt
 80057a2:	4618      	movlt	r0, r3
 80057a4:	e7a6      	b.n	80056f4 <_printf_i+0x160>
 80057a6:	2301      	movs	r3, #1
 80057a8:	4632      	mov	r2, r6
 80057aa:	4649      	mov	r1, r9
 80057ac:	4640      	mov	r0, r8
 80057ae:	47d0      	blx	sl
 80057b0:	3001      	adds	r0, #1
 80057b2:	d09d      	beq.n	80056f0 <_printf_i+0x15c>
 80057b4:	3501      	adds	r5, #1
 80057b6:	68e3      	ldr	r3, [r4, #12]
 80057b8:	9903      	ldr	r1, [sp, #12]
 80057ba:	1a5b      	subs	r3, r3, r1
 80057bc:	42ab      	cmp	r3, r5
 80057be:	dcf2      	bgt.n	80057a6 <_printf_i+0x212>
 80057c0:	e7eb      	b.n	800579a <_printf_i+0x206>
 80057c2:	2500      	movs	r5, #0
 80057c4:	f104 0619 	add.w	r6, r4, #25
 80057c8:	e7f5      	b.n	80057b6 <_printf_i+0x222>
 80057ca:	bf00      	nop
 80057cc:	08007c3a 	.word	0x08007c3a
 80057d0:	08007c4b 	.word	0x08007c4b

080057d4 <std>:
 80057d4:	2300      	movs	r3, #0
 80057d6:	b510      	push	{r4, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	e9c0 3300 	strd	r3, r3, [r0]
 80057de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057e2:	6083      	str	r3, [r0, #8]
 80057e4:	8181      	strh	r1, [r0, #12]
 80057e6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057e8:	81c2      	strh	r2, [r0, #14]
 80057ea:	6183      	str	r3, [r0, #24]
 80057ec:	4619      	mov	r1, r3
 80057ee:	2208      	movs	r2, #8
 80057f0:	305c      	adds	r0, #92	@ 0x5c
 80057f2:	f000 f914 	bl	8005a1e <memset>
 80057f6:	4b0d      	ldr	r3, [pc, #52]	@ (800582c <std+0x58>)
 80057f8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <std+0x5c>)
 80057fc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005834 <std+0x60>)
 8005800:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005802:	4b0d      	ldr	r3, [pc, #52]	@ (8005838 <std+0x64>)
 8005804:	6323      	str	r3, [r4, #48]	@ 0x30
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <std+0x68>)
 8005808:	6224      	str	r4, [r4, #32]
 800580a:	429c      	cmp	r4, r3
 800580c:	d006      	beq.n	800581c <std+0x48>
 800580e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005812:	4294      	cmp	r4, r2
 8005814:	d002      	beq.n	800581c <std+0x48>
 8005816:	33d0      	adds	r3, #208	@ 0xd0
 8005818:	429c      	cmp	r4, r3
 800581a:	d105      	bne.n	8005828 <std+0x54>
 800581c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005824:	f000 b978 	b.w	8005b18 <__retarget_lock_init_recursive>
 8005828:	bd10      	pop	{r4, pc}
 800582a:	bf00      	nop
 800582c:	08005999 	.word	0x08005999
 8005830:	080059bb 	.word	0x080059bb
 8005834:	080059f3 	.word	0x080059f3
 8005838:	08005a17 	.word	0x08005a17
 800583c:	20000388 	.word	0x20000388

08005840 <stdio_exit_handler>:
 8005840:	4a02      	ldr	r2, [pc, #8]	@ (800584c <stdio_exit_handler+0xc>)
 8005842:	4903      	ldr	r1, [pc, #12]	@ (8005850 <stdio_exit_handler+0x10>)
 8005844:	4803      	ldr	r0, [pc, #12]	@ (8005854 <stdio_exit_handler+0x14>)
 8005846:	f000 b869 	b.w	800591c <_fwalk_sglue>
 800584a:	bf00      	nop
 800584c:	2000000c 	.word	0x2000000c
 8005850:	08007475 	.word	0x08007475
 8005854:	2000001c 	.word	0x2000001c

08005858 <cleanup_stdio>:
 8005858:	6841      	ldr	r1, [r0, #4]
 800585a:	4b0c      	ldr	r3, [pc, #48]	@ (800588c <cleanup_stdio+0x34>)
 800585c:	4299      	cmp	r1, r3
 800585e:	b510      	push	{r4, lr}
 8005860:	4604      	mov	r4, r0
 8005862:	d001      	beq.n	8005868 <cleanup_stdio+0x10>
 8005864:	f001 fe06 	bl	8007474 <_fflush_r>
 8005868:	68a1      	ldr	r1, [r4, #8]
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <cleanup_stdio+0x38>)
 800586c:	4299      	cmp	r1, r3
 800586e:	d002      	beq.n	8005876 <cleanup_stdio+0x1e>
 8005870:	4620      	mov	r0, r4
 8005872:	f001 fdff 	bl	8007474 <_fflush_r>
 8005876:	68e1      	ldr	r1, [r4, #12]
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <cleanup_stdio+0x3c>)
 800587a:	4299      	cmp	r1, r3
 800587c:	d004      	beq.n	8005888 <cleanup_stdio+0x30>
 800587e:	4620      	mov	r0, r4
 8005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005884:	f001 bdf6 	b.w	8007474 <_fflush_r>
 8005888:	bd10      	pop	{r4, pc}
 800588a:	bf00      	nop
 800588c:	20000388 	.word	0x20000388
 8005890:	200003f0 	.word	0x200003f0
 8005894:	20000458 	.word	0x20000458

08005898 <global_stdio_init.part.0>:
 8005898:	b510      	push	{r4, lr}
 800589a:	4b0b      	ldr	r3, [pc, #44]	@ (80058c8 <global_stdio_init.part.0+0x30>)
 800589c:	4c0b      	ldr	r4, [pc, #44]	@ (80058cc <global_stdio_init.part.0+0x34>)
 800589e:	4a0c      	ldr	r2, [pc, #48]	@ (80058d0 <global_stdio_init.part.0+0x38>)
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	4620      	mov	r0, r4
 80058a4:	2200      	movs	r2, #0
 80058a6:	2104      	movs	r1, #4
 80058a8:	f7ff ff94 	bl	80057d4 <std>
 80058ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80058b0:	2201      	movs	r2, #1
 80058b2:	2109      	movs	r1, #9
 80058b4:	f7ff ff8e 	bl	80057d4 <std>
 80058b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80058bc:	2202      	movs	r2, #2
 80058be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058c2:	2112      	movs	r1, #18
 80058c4:	f7ff bf86 	b.w	80057d4 <std>
 80058c8:	200004c0 	.word	0x200004c0
 80058cc:	20000388 	.word	0x20000388
 80058d0:	08005841 	.word	0x08005841

080058d4 <__sfp_lock_acquire>:
 80058d4:	4801      	ldr	r0, [pc, #4]	@ (80058dc <__sfp_lock_acquire+0x8>)
 80058d6:	f000 b920 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80058da:	bf00      	nop
 80058dc:	200004c9 	.word	0x200004c9

080058e0 <__sfp_lock_release>:
 80058e0:	4801      	ldr	r0, [pc, #4]	@ (80058e8 <__sfp_lock_release+0x8>)
 80058e2:	f000 b91b 	b.w	8005b1c <__retarget_lock_release_recursive>
 80058e6:	bf00      	nop
 80058e8:	200004c9 	.word	0x200004c9

080058ec <__sinit>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	4604      	mov	r4, r0
 80058f0:	f7ff fff0 	bl	80058d4 <__sfp_lock_acquire>
 80058f4:	6a23      	ldr	r3, [r4, #32]
 80058f6:	b11b      	cbz	r3, 8005900 <__sinit+0x14>
 80058f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058fc:	f7ff bff0 	b.w	80058e0 <__sfp_lock_release>
 8005900:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <__sinit+0x28>)
 8005902:	6223      	str	r3, [r4, #32]
 8005904:	4b04      	ldr	r3, [pc, #16]	@ (8005918 <__sinit+0x2c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f5      	bne.n	80058f8 <__sinit+0xc>
 800590c:	f7ff ffc4 	bl	8005898 <global_stdio_init.part.0>
 8005910:	e7f2      	b.n	80058f8 <__sinit+0xc>
 8005912:	bf00      	nop
 8005914:	08005859 	.word	0x08005859
 8005918:	200004c0 	.word	0x200004c0

0800591c <_fwalk_sglue>:
 800591c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005920:	4607      	mov	r7, r0
 8005922:	4688      	mov	r8, r1
 8005924:	4614      	mov	r4, r2
 8005926:	2600      	movs	r6, #0
 8005928:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800592c:	f1b9 0901 	subs.w	r9, r9, #1
 8005930:	d505      	bpl.n	800593e <_fwalk_sglue+0x22>
 8005932:	6824      	ldr	r4, [r4, #0]
 8005934:	2c00      	cmp	r4, #0
 8005936:	d1f7      	bne.n	8005928 <_fwalk_sglue+0xc>
 8005938:	4630      	mov	r0, r6
 800593a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593e:	89ab      	ldrh	r3, [r5, #12]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d907      	bls.n	8005954 <_fwalk_sglue+0x38>
 8005944:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005948:	3301      	adds	r3, #1
 800594a:	d003      	beq.n	8005954 <_fwalk_sglue+0x38>
 800594c:	4629      	mov	r1, r5
 800594e:	4638      	mov	r0, r7
 8005950:	47c0      	blx	r8
 8005952:	4306      	orrs	r6, r0
 8005954:	3568      	adds	r5, #104	@ 0x68
 8005956:	e7e9      	b.n	800592c <_fwalk_sglue+0x10>

08005958 <siprintf>:
 8005958:	b40e      	push	{r1, r2, r3}
 800595a:	b500      	push	{lr}
 800595c:	b09c      	sub	sp, #112	@ 0x70
 800595e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005960:	9002      	str	r0, [sp, #8]
 8005962:	9006      	str	r0, [sp, #24]
 8005964:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005968:	4809      	ldr	r0, [pc, #36]	@ (8005990 <siprintf+0x38>)
 800596a:	9107      	str	r1, [sp, #28]
 800596c:	9104      	str	r1, [sp, #16]
 800596e:	4909      	ldr	r1, [pc, #36]	@ (8005994 <siprintf+0x3c>)
 8005970:	f853 2b04 	ldr.w	r2, [r3], #4
 8005974:	9105      	str	r1, [sp, #20]
 8005976:	6800      	ldr	r0, [r0, #0]
 8005978:	9301      	str	r3, [sp, #4]
 800597a:	a902      	add	r1, sp, #8
 800597c:	f001 fbfa 	bl	8007174 <_svfiprintf_r>
 8005980:	9b02      	ldr	r3, [sp, #8]
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	b01c      	add	sp, #112	@ 0x70
 8005988:	f85d eb04 	ldr.w	lr, [sp], #4
 800598c:	b003      	add	sp, #12
 800598e:	4770      	bx	lr
 8005990:	20000018 	.word	0x20000018
 8005994:	ffff0208 	.word	0xffff0208

08005998 <__sread>:
 8005998:	b510      	push	{r4, lr}
 800599a:	460c      	mov	r4, r1
 800599c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059a0:	f000 f86c 	bl	8005a7c <_read_r>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	bfab      	itete	ge
 80059a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059aa:	89a3      	ldrhlt	r3, [r4, #12]
 80059ac:	181b      	addge	r3, r3, r0
 80059ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059b2:	bfac      	ite	ge
 80059b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059b6:	81a3      	strhlt	r3, [r4, #12]
 80059b8:	bd10      	pop	{r4, pc}

080059ba <__swrite>:
 80059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	461f      	mov	r7, r3
 80059c0:	898b      	ldrh	r3, [r1, #12]
 80059c2:	05db      	lsls	r3, r3, #23
 80059c4:	4605      	mov	r5, r0
 80059c6:	460c      	mov	r4, r1
 80059c8:	4616      	mov	r6, r2
 80059ca:	d505      	bpl.n	80059d8 <__swrite+0x1e>
 80059cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059d0:	2302      	movs	r3, #2
 80059d2:	2200      	movs	r2, #0
 80059d4:	f000 f840 	bl	8005a58 <_lseek_r>
 80059d8:	89a3      	ldrh	r3, [r4, #12]
 80059da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	4632      	mov	r2, r6
 80059e6:	463b      	mov	r3, r7
 80059e8:	4628      	mov	r0, r5
 80059ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059ee:	f000 b857 	b.w	8005aa0 <_write_r>

080059f2 <__sseek>:
 80059f2:	b510      	push	{r4, lr}
 80059f4:	460c      	mov	r4, r1
 80059f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059fa:	f000 f82d 	bl	8005a58 <_lseek_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	89a3      	ldrh	r3, [r4, #12]
 8005a02:	bf15      	itete	ne
 8005a04:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005a06:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a0a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a0e:	81a3      	strheq	r3, [r4, #12]
 8005a10:	bf18      	it	ne
 8005a12:	81a3      	strhne	r3, [r4, #12]
 8005a14:	bd10      	pop	{r4, pc}

08005a16 <__sclose>:
 8005a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1a:	f000 b80d 	b.w	8005a38 <_close_r>

08005a1e <memset>:
 8005a1e:	4402      	add	r2, r0
 8005a20:	4603      	mov	r3, r0
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d100      	bne.n	8005a28 <memset+0xa>
 8005a26:	4770      	bx	lr
 8005a28:	f803 1b01 	strb.w	r1, [r3], #1
 8005a2c:	e7f9      	b.n	8005a22 <memset+0x4>
	...

08005a30 <_localeconv_r>:
 8005a30:	4800      	ldr	r0, [pc, #0]	@ (8005a34 <_localeconv_r+0x4>)
 8005a32:	4770      	bx	lr
 8005a34:	20000158 	.word	0x20000158

08005a38 <_close_r>:
 8005a38:	b538      	push	{r3, r4, r5, lr}
 8005a3a:	4d06      	ldr	r5, [pc, #24]	@ (8005a54 <_close_r+0x1c>)
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	4604      	mov	r4, r0
 8005a40:	4608      	mov	r0, r1
 8005a42:	602b      	str	r3, [r5, #0]
 8005a44:	f7fb fd80 	bl	8001548 <_close>
 8005a48:	1c43      	adds	r3, r0, #1
 8005a4a:	d102      	bne.n	8005a52 <_close_r+0x1a>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	b103      	cbz	r3, 8005a52 <_close_r+0x1a>
 8005a50:	6023      	str	r3, [r4, #0]
 8005a52:	bd38      	pop	{r3, r4, r5, pc}
 8005a54:	200004c4 	.word	0x200004c4

08005a58 <_lseek_r>:
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4d07      	ldr	r5, [pc, #28]	@ (8005a78 <_lseek_r+0x20>)
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	4608      	mov	r0, r1
 8005a60:	4611      	mov	r1, r2
 8005a62:	2200      	movs	r2, #0
 8005a64:	602a      	str	r2, [r5, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f7fb fd95 	bl	8001596 <_lseek>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d102      	bne.n	8005a76 <_lseek_r+0x1e>
 8005a70:	682b      	ldr	r3, [r5, #0]
 8005a72:	b103      	cbz	r3, 8005a76 <_lseek_r+0x1e>
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	bd38      	pop	{r3, r4, r5, pc}
 8005a78:	200004c4 	.word	0x200004c4

08005a7c <_read_r>:
 8005a7c:	b538      	push	{r3, r4, r5, lr}
 8005a7e:	4d07      	ldr	r5, [pc, #28]	@ (8005a9c <_read_r+0x20>)
 8005a80:	4604      	mov	r4, r0
 8005a82:	4608      	mov	r0, r1
 8005a84:	4611      	mov	r1, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	602a      	str	r2, [r5, #0]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f7fb fd23 	bl	80014d6 <_read>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_read_r+0x1e>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_read_r+0x1e>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200004c4 	.word	0x200004c4

08005aa0 <_write_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_write_r+0x20>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	4608      	mov	r0, r1
 8005aa8:	4611      	mov	r1, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	461a      	mov	r2, r3
 8005ab0:	f7fb fd2e 	bl	8001510 <_write>
 8005ab4:	1c43      	adds	r3, r0, #1
 8005ab6:	d102      	bne.n	8005abe <_write_r+0x1e>
 8005ab8:	682b      	ldr	r3, [r5, #0]
 8005aba:	b103      	cbz	r3, 8005abe <_write_r+0x1e>
 8005abc:	6023      	str	r3, [r4, #0]
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
 8005ac0:	200004c4 	.word	0x200004c4

08005ac4 <__errno>:
 8005ac4:	4b01      	ldr	r3, [pc, #4]	@ (8005acc <__errno+0x8>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20000018 	.word	0x20000018

08005ad0 <__libc_init_array>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4d0d      	ldr	r5, [pc, #52]	@ (8005b08 <__libc_init_array+0x38>)
 8005ad4:	4c0d      	ldr	r4, [pc, #52]	@ (8005b0c <__libc_init_array+0x3c>)
 8005ad6:	1b64      	subs	r4, r4, r5
 8005ad8:	10a4      	asrs	r4, r4, #2
 8005ada:	2600      	movs	r6, #0
 8005adc:	42a6      	cmp	r6, r4
 8005ade:	d109      	bne.n	8005af4 <__libc_init_array+0x24>
 8005ae0:	4d0b      	ldr	r5, [pc, #44]	@ (8005b10 <__libc_init_array+0x40>)
 8005ae2:	4c0c      	ldr	r4, [pc, #48]	@ (8005b14 <__libc_init_array+0x44>)
 8005ae4:	f002 f864 	bl	8007bb0 <_init>
 8005ae8:	1b64      	subs	r4, r4, r5
 8005aea:	10a4      	asrs	r4, r4, #2
 8005aec:	2600      	movs	r6, #0
 8005aee:	42a6      	cmp	r6, r4
 8005af0:	d105      	bne.n	8005afe <__libc_init_array+0x2e>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af8:	4798      	blx	r3
 8005afa:	3601      	adds	r6, #1
 8005afc:	e7ee      	b.n	8005adc <__libc_init_array+0xc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	4798      	blx	r3
 8005b04:	3601      	adds	r6, #1
 8005b06:	e7f2      	b.n	8005aee <__libc_init_array+0x1e>
 8005b08:	08007fa0 	.word	0x08007fa0
 8005b0c:	08007fa0 	.word	0x08007fa0
 8005b10:	08007fa0 	.word	0x08007fa0
 8005b14:	08007fa4 	.word	0x08007fa4

08005b18 <__retarget_lock_init_recursive>:
 8005b18:	4770      	bx	lr

08005b1a <__retarget_lock_acquire_recursive>:
 8005b1a:	4770      	bx	lr

08005b1c <__retarget_lock_release_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <quorem>:
 8005b1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b22:	6903      	ldr	r3, [r0, #16]
 8005b24:	690c      	ldr	r4, [r1, #16]
 8005b26:	42a3      	cmp	r3, r4
 8005b28:	4607      	mov	r7, r0
 8005b2a:	db7e      	blt.n	8005c2a <quorem+0x10c>
 8005b2c:	3c01      	subs	r4, #1
 8005b2e:	f101 0814 	add.w	r8, r1, #20
 8005b32:	00a3      	lsls	r3, r4, #2
 8005b34:	f100 0514 	add.w	r5, r0, #20
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005b44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005b50:	fbb2 f6f3 	udiv	r6, r2, r3
 8005b54:	d32e      	bcc.n	8005bb4 <quorem+0x96>
 8005b56:	f04f 0a00 	mov.w	sl, #0
 8005b5a:	46c4      	mov	ip, r8
 8005b5c:	46ae      	mov	lr, r5
 8005b5e:	46d3      	mov	fp, sl
 8005b60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005b64:	b298      	uxth	r0, r3
 8005b66:	fb06 a000 	mla	r0, r6, r0, sl
 8005b6a:	0c02      	lsrs	r2, r0, #16
 8005b6c:	0c1b      	lsrs	r3, r3, #16
 8005b6e:	fb06 2303 	mla	r3, r6, r3, r2
 8005b72:	f8de 2000 	ldr.w	r2, [lr]
 8005b76:	b280      	uxth	r0, r0
 8005b78:	b292      	uxth	r2, r2
 8005b7a:	1a12      	subs	r2, r2, r0
 8005b7c:	445a      	add	r2, fp
 8005b7e:	f8de 0000 	ldr.w	r0, [lr]
 8005b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005b8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005b90:	b292      	uxth	r2, r2
 8005b92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005b96:	45e1      	cmp	r9, ip
 8005b98:	f84e 2b04 	str.w	r2, [lr], #4
 8005b9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ba0:	d2de      	bcs.n	8005b60 <quorem+0x42>
 8005ba2:	9b00      	ldr	r3, [sp, #0]
 8005ba4:	58eb      	ldr	r3, [r5, r3]
 8005ba6:	b92b      	cbnz	r3, 8005bb4 <quorem+0x96>
 8005ba8:	9b01      	ldr	r3, [sp, #4]
 8005baa:	3b04      	subs	r3, #4
 8005bac:	429d      	cmp	r5, r3
 8005bae:	461a      	mov	r2, r3
 8005bb0:	d32f      	bcc.n	8005c12 <quorem+0xf4>
 8005bb2:	613c      	str	r4, [r7, #16]
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	f001 f979 	bl	8006eac <__mcmp>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	db25      	blt.n	8005c0a <quorem+0xec>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005bc6:	f8d1 c000 	ldr.w	ip, [r1]
 8005bca:	fa1f fe82 	uxth.w	lr, r2
 8005bce:	fa1f f38c 	uxth.w	r3, ip
 8005bd2:	eba3 030e 	sub.w	r3, r3, lr
 8005bd6:	4403      	add	r3, r0
 8005bd8:	0c12      	lsrs	r2, r2, #16
 8005bda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005bde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005be8:	45c1      	cmp	r9, r8
 8005bea:	f841 3b04 	str.w	r3, [r1], #4
 8005bee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005bf2:	d2e6      	bcs.n	8005bc2 <quorem+0xa4>
 8005bf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bfc:	b922      	cbnz	r2, 8005c08 <quorem+0xea>
 8005bfe:	3b04      	subs	r3, #4
 8005c00:	429d      	cmp	r5, r3
 8005c02:	461a      	mov	r2, r3
 8005c04:	d30b      	bcc.n	8005c1e <quorem+0x100>
 8005c06:	613c      	str	r4, [r7, #16]
 8005c08:	3601      	adds	r6, #1
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	b003      	add	sp, #12
 8005c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c12:	6812      	ldr	r2, [r2, #0]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	2a00      	cmp	r2, #0
 8005c18:	d1cb      	bne.n	8005bb2 <quorem+0x94>
 8005c1a:	3c01      	subs	r4, #1
 8005c1c:	e7c6      	b.n	8005bac <quorem+0x8e>
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	3b04      	subs	r3, #4
 8005c22:	2a00      	cmp	r2, #0
 8005c24:	d1ef      	bne.n	8005c06 <quorem+0xe8>
 8005c26:	3c01      	subs	r4, #1
 8005c28:	e7ea      	b.n	8005c00 <quorem+0xe2>
 8005c2a:	2000      	movs	r0, #0
 8005c2c:	e7ee      	b.n	8005c0c <quorem+0xee>
	...

08005c30 <_dtoa_r>:
 8005c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	69c7      	ldr	r7, [r0, #28]
 8005c36:	b099      	sub	sp, #100	@ 0x64
 8005c38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005c3c:	ec55 4b10 	vmov	r4, r5, d0
 8005c40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005c42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005c44:	4683      	mov	fp, r0
 8005c46:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c4a:	b97f      	cbnz	r7, 8005c6c <_dtoa_r+0x3c>
 8005c4c:	2010      	movs	r0, #16
 8005c4e:	f000 fdfd 	bl	800684c <malloc>
 8005c52:	4602      	mov	r2, r0
 8005c54:	f8cb 001c 	str.w	r0, [fp, #28]
 8005c58:	b920      	cbnz	r0, 8005c64 <_dtoa_r+0x34>
 8005c5a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ef8 <_dtoa_r+0x2c8>)
 8005c5c:	21ef      	movs	r1, #239	@ 0xef
 8005c5e:	48a7      	ldr	r0, [pc, #668]	@ (8005efc <_dtoa_r+0x2cc>)
 8005c60:	f001 fc68 	bl	8007534 <__assert_func>
 8005c64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005c68:	6007      	str	r7, [r0, #0]
 8005c6a:	60c7      	str	r7, [r0, #12]
 8005c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c70:	6819      	ldr	r1, [r3, #0]
 8005c72:	b159      	cbz	r1, 8005c8c <_dtoa_r+0x5c>
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	604a      	str	r2, [r1, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	4093      	lsls	r3, r2
 8005c7c:	608b      	str	r3, [r1, #8]
 8005c7e:	4658      	mov	r0, fp
 8005c80:	f000 feda 	bl	8006a38 <_Bfree>
 8005c84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	1e2b      	subs	r3, r5, #0
 8005c8e:	bfb9      	ittee	lt
 8005c90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005c94:	9303      	strlt	r3, [sp, #12]
 8005c96:	2300      	movge	r3, #0
 8005c98:	6033      	strge	r3, [r6, #0]
 8005c9a:	9f03      	ldr	r7, [sp, #12]
 8005c9c:	4b98      	ldr	r3, [pc, #608]	@ (8005f00 <_dtoa_r+0x2d0>)
 8005c9e:	bfbc      	itt	lt
 8005ca0:	2201      	movlt	r2, #1
 8005ca2:	6032      	strlt	r2, [r6, #0]
 8005ca4:	43bb      	bics	r3, r7
 8005ca6:	d112      	bne.n	8005cce <_dtoa_r+0x9e>
 8005ca8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005caa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005cae:	6013      	str	r3, [r2, #0]
 8005cb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005cb4:	4323      	orrs	r3, r4
 8005cb6:	f000 854d 	beq.w	8006754 <_dtoa_r+0xb24>
 8005cba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005f14 <_dtoa_r+0x2e4>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f000 854f 	beq.w	8006764 <_dtoa_r+0xb34>
 8005cc6:	f10a 0303 	add.w	r3, sl, #3
 8005cca:	f000 bd49 	b.w	8006760 <_dtoa_r+0xb30>
 8005cce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	ec51 0b17 	vmov	r0, r1, d7
 8005cd8:	2300      	movs	r3, #0
 8005cda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005cde:	f7fa fef3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	b158      	cbz	r0, 8005cfe <_dtoa_r+0xce>
 8005ce6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ce8:	2301      	movs	r3, #1
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005cee:	b113      	cbz	r3, 8005cf6 <_dtoa_r+0xc6>
 8005cf0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005cf2:	4b84      	ldr	r3, [pc, #528]	@ (8005f04 <_dtoa_r+0x2d4>)
 8005cf4:	6013      	str	r3, [r2, #0]
 8005cf6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005f18 <_dtoa_r+0x2e8>
 8005cfa:	f000 bd33 	b.w	8006764 <_dtoa_r+0xb34>
 8005cfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005d02:	aa16      	add	r2, sp, #88	@ 0x58
 8005d04:	a917      	add	r1, sp, #92	@ 0x5c
 8005d06:	4658      	mov	r0, fp
 8005d08:	f001 f980 	bl	800700c <__d2b>
 8005d0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005d10:	4681      	mov	r9, r0
 8005d12:	2e00      	cmp	r6, #0
 8005d14:	d077      	beq.n	8005e06 <_dtoa_r+0x1d6>
 8005d16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005d28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005d2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005d30:	4619      	mov	r1, r3
 8005d32:	2200      	movs	r2, #0
 8005d34:	4b74      	ldr	r3, [pc, #464]	@ (8005f08 <_dtoa_r+0x2d8>)
 8005d36:	f7fa faa7 	bl	8000288 <__aeabi_dsub>
 8005d3a:	a369      	add	r3, pc, #420	@ (adr r3, 8005ee0 <_dtoa_r+0x2b0>)
 8005d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d40:	f7fa fc5a 	bl	80005f8 <__aeabi_dmul>
 8005d44:	a368      	add	r3, pc, #416	@ (adr r3, 8005ee8 <_dtoa_r+0x2b8>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fa9f 	bl	800028c <__adddf3>
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4630      	mov	r0, r6
 8005d52:	460d      	mov	r5, r1
 8005d54:	f7fa fbe6 	bl	8000524 <__aeabi_i2d>
 8005d58:	a365      	add	r3, pc, #404	@ (adr r3, 8005ef0 <_dtoa_r+0x2c0>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fc4b 	bl	80005f8 <__aeabi_dmul>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	4620      	mov	r0, r4
 8005d68:	4629      	mov	r1, r5
 8005d6a:	f7fa fa8f 	bl	800028c <__adddf3>
 8005d6e:	4604      	mov	r4, r0
 8005d70:	460d      	mov	r5, r1
 8005d72:	f7fa fef1 	bl	8000b58 <__aeabi_d2iz>
 8005d76:	2200      	movs	r2, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	4629      	mov	r1, r5
 8005d80:	f7fa feac 	bl	8000adc <__aeabi_dcmplt>
 8005d84:	b140      	cbz	r0, 8005d98 <_dtoa_r+0x168>
 8005d86:	4638      	mov	r0, r7
 8005d88:	f7fa fbcc 	bl	8000524 <__aeabi_i2d>
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	462b      	mov	r3, r5
 8005d90:	f7fa fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d94:	b900      	cbnz	r0, 8005d98 <_dtoa_r+0x168>
 8005d96:	3f01      	subs	r7, #1
 8005d98:	2f16      	cmp	r7, #22
 8005d9a:	d851      	bhi.n	8005e40 <_dtoa_r+0x210>
 8005d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8005f0c <_dtoa_r+0x2dc>)
 8005d9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005daa:	f7fa fe97 	bl	8000adc <__aeabi_dcmplt>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d048      	beq.n	8005e44 <_dtoa_r+0x214>
 8005db2:	3f01      	subs	r7, #1
 8005db4:	2300      	movs	r3, #0
 8005db6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005db8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005dba:	1b9b      	subs	r3, r3, r6
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	bf44      	itt	mi
 8005dc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005dc4:	2300      	movmi	r3, #0
 8005dc6:	9208      	str	r2, [sp, #32]
 8005dc8:	bf54      	ite	pl
 8005dca:	f04f 0800 	movpl.w	r8, #0
 8005dce:	9308      	strmi	r3, [sp, #32]
 8005dd0:	2f00      	cmp	r7, #0
 8005dd2:	db39      	blt.n	8005e48 <_dtoa_r+0x218>
 8005dd4:	9b08      	ldr	r3, [sp, #32]
 8005dd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005dd8:	443b      	add	r3, r7
 8005dda:	9308      	str	r3, [sp, #32]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	d864      	bhi.n	8005eb0 <_dtoa_r+0x280>
 8005de6:	2b05      	cmp	r3, #5
 8005de8:	bfc4      	itt	gt
 8005dea:	3b04      	subgt	r3, #4
 8005dec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005df0:	f1a3 0302 	sub.w	r3, r3, #2
 8005df4:	bfcc      	ite	gt
 8005df6:	2400      	movgt	r4, #0
 8005df8:	2401      	movle	r4, #1
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d863      	bhi.n	8005ec6 <_dtoa_r+0x296>
 8005dfe:	e8df f003 	tbb	[pc, r3]
 8005e02:	372a      	.short	0x372a
 8005e04:	5535      	.short	0x5535
 8005e06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005e0a:	441e      	add	r6, r3
 8005e0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005e10:	2b20      	cmp	r3, #32
 8005e12:	bfc1      	itttt	gt
 8005e14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005e18:	409f      	lslgt	r7, r3
 8005e1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005e1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005e22:	bfd6      	itet	le
 8005e24:	f1c3 0320 	rsble	r3, r3, #32
 8005e28:	ea47 0003 	orrgt.w	r0, r7, r3
 8005e2c:	fa04 f003 	lslle.w	r0, r4, r3
 8005e30:	f7fa fb68 	bl	8000504 <__aeabi_ui2d>
 8005e34:	2201      	movs	r2, #1
 8005e36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005e3a:	3e01      	subs	r6, #1
 8005e3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005e3e:	e777      	b.n	8005d30 <_dtoa_r+0x100>
 8005e40:	2301      	movs	r3, #1
 8005e42:	e7b8      	b.n	8005db6 <_dtoa_r+0x186>
 8005e44:	9012      	str	r0, [sp, #72]	@ 0x48
 8005e46:	e7b7      	b.n	8005db8 <_dtoa_r+0x188>
 8005e48:	427b      	negs	r3, r7
 8005e4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	eba8 0807 	sub.w	r8, r8, r7
 8005e52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005e54:	e7c4      	b.n	8005de0 <_dtoa_r+0x1b0>
 8005e56:	2300      	movs	r3, #0
 8005e58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	dc35      	bgt.n	8005ecc <_dtoa_r+0x29c>
 8005e60:	2301      	movs	r3, #1
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	9307      	str	r3, [sp, #28]
 8005e66:	461a      	mov	r2, r3
 8005e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e6a:	e00b      	b.n	8005e84 <_dtoa_r+0x254>
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e7f3      	b.n	8005e58 <_dtoa_r+0x228>
 8005e70:	2300      	movs	r3, #0
 8005e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005e74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e76:	18fb      	adds	r3, r7, r3
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	9307      	str	r3, [sp, #28]
 8005e80:	bfb8      	it	lt
 8005e82:	2301      	movlt	r3, #1
 8005e84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005e88:	2100      	movs	r1, #0
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	f102 0514 	add.w	r5, r2, #20
 8005e90:	429d      	cmp	r5, r3
 8005e92:	d91f      	bls.n	8005ed4 <_dtoa_r+0x2a4>
 8005e94:	6041      	str	r1, [r0, #4]
 8005e96:	4658      	mov	r0, fp
 8005e98:	f000 fd8e 	bl	80069b8 <_Balloc>
 8005e9c:	4682      	mov	sl, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d13c      	bne.n	8005f1c <_dtoa_r+0x2ec>
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <_dtoa_r+0x2e0>)
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005eaa:	e6d8      	b.n	8005c5e <_dtoa_r+0x2e>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e7e0      	b.n	8005e72 <_dtoa_r+0x242>
 8005eb0:	2401      	movs	r4, #1
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2312      	movs	r3, #18
 8005ec4:	e7d0      	b.n	8005e68 <_dtoa_r+0x238>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005eca:	e7f5      	b.n	8005eb8 <_dtoa_r+0x288>
 8005ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	9307      	str	r3, [sp, #28]
 8005ed2:	e7d7      	b.n	8005e84 <_dtoa_r+0x254>
 8005ed4:	3101      	adds	r1, #1
 8005ed6:	0052      	lsls	r2, r2, #1
 8005ed8:	e7d8      	b.n	8005e8c <_dtoa_r+0x25c>
 8005eda:	bf00      	nop
 8005edc:	f3af 8000 	nop.w
 8005ee0:	636f4361 	.word	0x636f4361
 8005ee4:	3fd287a7 	.word	0x3fd287a7
 8005ee8:	8b60c8b3 	.word	0x8b60c8b3
 8005eec:	3fc68a28 	.word	0x3fc68a28
 8005ef0:	509f79fb 	.word	0x509f79fb
 8005ef4:	3fd34413 	.word	0x3fd34413
 8005ef8:	08007c69 	.word	0x08007c69
 8005efc:	08007c80 	.word	0x08007c80
 8005f00:	7ff00000 	.word	0x7ff00000
 8005f04:	08007c39 	.word	0x08007c39
 8005f08:	3ff80000 	.word	0x3ff80000
 8005f0c:	08007d78 	.word	0x08007d78
 8005f10:	08007cd8 	.word	0x08007cd8
 8005f14:	08007c65 	.word	0x08007c65
 8005f18:	08007c38 	.word	0x08007c38
 8005f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f20:	6018      	str	r0, [r3, #0]
 8005f22:	9b07      	ldr	r3, [sp, #28]
 8005f24:	2b0e      	cmp	r3, #14
 8005f26:	f200 80a4 	bhi.w	8006072 <_dtoa_r+0x442>
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	f000 80a1 	beq.w	8006072 <_dtoa_r+0x442>
 8005f30:	2f00      	cmp	r7, #0
 8005f32:	dd33      	ble.n	8005f9c <_dtoa_r+0x36c>
 8005f34:	4bad      	ldr	r3, [pc, #692]	@ (80061ec <_dtoa_r+0x5bc>)
 8005f36:	f007 020f 	and.w	r2, r7, #15
 8005f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3e:	ed93 7b00 	vldr	d7, [r3]
 8005f42:	05f8      	lsls	r0, r7, #23
 8005f44:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005f4c:	d516      	bpl.n	8005f7c <_dtoa_r+0x34c>
 8005f4e:	4ba8      	ldr	r3, [pc, #672]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005f50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005f58:	f7fa fc78 	bl	800084c <__aeabi_ddiv>
 8005f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f60:	f004 040f 	and.w	r4, r4, #15
 8005f64:	2603      	movs	r6, #3
 8005f66:	4da2      	ldr	r5, [pc, #648]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005f68:	b954      	cbnz	r4, 8005f80 <_dtoa_r+0x350>
 8005f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f72:	f7fa fc6b 	bl	800084c <__aeabi_ddiv>
 8005f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f7a:	e028      	b.n	8005fce <_dtoa_r+0x39e>
 8005f7c:	2602      	movs	r6, #2
 8005f7e:	e7f2      	b.n	8005f66 <_dtoa_r+0x336>
 8005f80:	07e1      	lsls	r1, r4, #31
 8005f82:	d508      	bpl.n	8005f96 <_dtoa_r+0x366>
 8005f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005f8c:	f7fa fb34 	bl	80005f8 <__aeabi_dmul>
 8005f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f94:	3601      	adds	r6, #1
 8005f96:	1064      	asrs	r4, r4, #1
 8005f98:	3508      	adds	r5, #8
 8005f9a:	e7e5      	b.n	8005f68 <_dtoa_r+0x338>
 8005f9c:	f000 80d2 	beq.w	8006144 <_dtoa_r+0x514>
 8005fa0:	427c      	negs	r4, r7
 8005fa2:	4b92      	ldr	r3, [pc, #584]	@ (80061ec <_dtoa_r+0x5bc>)
 8005fa4:	4d92      	ldr	r5, [pc, #584]	@ (80061f0 <_dtoa_r+0x5c0>)
 8005fa6:	f004 020f 	and.w	r2, r4, #15
 8005faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fb6:	f7fa fb1f 	bl	80005f8 <__aeabi_dmul>
 8005fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fbe:	1124      	asrs	r4, r4, #4
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	2602      	movs	r6, #2
 8005fc4:	2c00      	cmp	r4, #0
 8005fc6:	f040 80b2 	bne.w	800612e <_dtoa_r+0x4fe>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1d3      	bne.n	8005f76 <_dtoa_r+0x346>
 8005fce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005fd0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80b7 	beq.w	8006148 <_dtoa_r+0x518>
 8005fda:	4b86      	ldr	r3, [pc, #536]	@ (80061f4 <_dtoa_r+0x5c4>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4620      	mov	r0, r4
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7fa fd7b 	bl	8000adc <__aeabi_dcmplt>
 8005fe6:	2800      	cmp	r0, #0
 8005fe8:	f000 80ae 	beq.w	8006148 <_dtoa_r+0x518>
 8005fec:	9b07      	ldr	r3, [sp, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80aa 	beq.w	8006148 <_dtoa_r+0x518>
 8005ff4:	9b00      	ldr	r3, [sp, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	dd37      	ble.n	800606a <_dtoa_r+0x43a>
 8005ffa:	1e7b      	subs	r3, r7, #1
 8005ffc:	9304      	str	r3, [sp, #16]
 8005ffe:	4620      	mov	r0, r4
 8006000:	4b7d      	ldr	r3, [pc, #500]	@ (80061f8 <_dtoa_r+0x5c8>)
 8006002:	2200      	movs	r2, #0
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa faf7 	bl	80005f8 <__aeabi_dmul>
 800600a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800600e:	9c00      	ldr	r4, [sp, #0]
 8006010:	3601      	adds	r6, #1
 8006012:	4630      	mov	r0, r6
 8006014:	f7fa fa86 	bl	8000524 <__aeabi_i2d>
 8006018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800601c:	f7fa faec 	bl	80005f8 <__aeabi_dmul>
 8006020:	4b76      	ldr	r3, [pc, #472]	@ (80061fc <_dtoa_r+0x5cc>)
 8006022:	2200      	movs	r2, #0
 8006024:	f7fa f932 	bl	800028c <__adddf3>
 8006028:	4605      	mov	r5, r0
 800602a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800602e:	2c00      	cmp	r4, #0
 8006030:	f040 808d 	bne.w	800614e <_dtoa_r+0x51e>
 8006034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006038:	4b71      	ldr	r3, [pc, #452]	@ (8006200 <_dtoa_r+0x5d0>)
 800603a:	2200      	movs	r2, #0
 800603c:	f7fa f924 	bl	8000288 <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006048:	462a      	mov	r2, r5
 800604a:	4633      	mov	r3, r6
 800604c:	f7fa fd64 	bl	8000b18 <__aeabi_dcmpgt>
 8006050:	2800      	cmp	r0, #0
 8006052:	f040 828b 	bne.w	800656c <_dtoa_r+0x93c>
 8006056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800605a:	462a      	mov	r2, r5
 800605c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006060:	f7fa fd3c 	bl	8000adc <__aeabi_dcmplt>
 8006064:	2800      	cmp	r0, #0
 8006066:	f040 8128 	bne.w	80062ba <_dtoa_r+0x68a>
 800606a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800606e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006072:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006074:	2b00      	cmp	r3, #0
 8006076:	f2c0 815a 	blt.w	800632e <_dtoa_r+0x6fe>
 800607a:	2f0e      	cmp	r7, #14
 800607c:	f300 8157 	bgt.w	800632e <_dtoa_r+0x6fe>
 8006080:	4b5a      	ldr	r3, [pc, #360]	@ (80061ec <_dtoa_r+0x5bc>)
 8006082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006086:	ed93 7b00 	vldr	d7, [r3]
 800608a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	ed8d 7b00 	vstr	d7, [sp]
 8006092:	da03      	bge.n	800609c <_dtoa_r+0x46c>
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f340 8101 	ble.w	800629e <_dtoa_r+0x66e>
 800609c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060a0:	4656      	mov	r6, sl
 80060a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa fbcf 	bl	800084c <__aeabi_ddiv>
 80060ae:	f7fa fd53 	bl	8000b58 <__aeabi_d2iz>
 80060b2:	4680      	mov	r8, r0
 80060b4:	f7fa fa36 	bl	8000524 <__aeabi_i2d>
 80060b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060bc:	f7fa fa9c 	bl	80005f8 <__aeabi_dmul>
 80060c0:	4602      	mov	r2, r0
 80060c2:	460b      	mov	r3, r1
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80060cc:	f7fa f8dc 	bl	8000288 <__aeabi_dsub>
 80060d0:	f806 4b01 	strb.w	r4, [r6], #1
 80060d4:	9d07      	ldr	r5, [sp, #28]
 80060d6:	eba6 040a 	sub.w	r4, r6, sl
 80060da:	42a5      	cmp	r5, r4
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	f040 8117 	bne.w	8006312 <_dtoa_r+0x6e2>
 80060e4:	f7fa f8d2 	bl	800028c <__adddf3>
 80060e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060ec:	4604      	mov	r4, r0
 80060ee:	460d      	mov	r5, r1
 80060f0:	f7fa fd12 	bl	8000b18 <__aeabi_dcmpgt>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f040 80f9 	bne.w	80062ec <_dtoa_r+0x6bc>
 80060fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060fe:	4620      	mov	r0, r4
 8006100:	4629      	mov	r1, r5
 8006102:	f7fa fce1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006106:	b118      	cbz	r0, 8006110 <_dtoa_r+0x4e0>
 8006108:	f018 0f01 	tst.w	r8, #1
 800610c:	f040 80ee 	bne.w	80062ec <_dtoa_r+0x6bc>
 8006110:	4649      	mov	r1, r9
 8006112:	4658      	mov	r0, fp
 8006114:	f000 fc90 	bl	8006a38 <_Bfree>
 8006118:	2300      	movs	r3, #0
 800611a:	7033      	strb	r3, [r6, #0]
 800611c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800611e:	3701      	adds	r7, #1
 8006120:	601f      	str	r7, [r3, #0]
 8006122:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 831d 	beq.w	8006764 <_dtoa_r+0xb34>
 800612a:	601e      	str	r6, [r3, #0]
 800612c:	e31a      	b.n	8006764 <_dtoa_r+0xb34>
 800612e:	07e2      	lsls	r2, r4, #31
 8006130:	d505      	bpl.n	800613e <_dtoa_r+0x50e>
 8006132:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006136:	f7fa fa5f 	bl	80005f8 <__aeabi_dmul>
 800613a:	3601      	adds	r6, #1
 800613c:	2301      	movs	r3, #1
 800613e:	1064      	asrs	r4, r4, #1
 8006140:	3508      	adds	r5, #8
 8006142:	e73f      	b.n	8005fc4 <_dtoa_r+0x394>
 8006144:	2602      	movs	r6, #2
 8006146:	e742      	b.n	8005fce <_dtoa_r+0x39e>
 8006148:	9c07      	ldr	r4, [sp, #28]
 800614a:	9704      	str	r7, [sp, #16]
 800614c:	e761      	b.n	8006012 <_dtoa_r+0x3e2>
 800614e:	4b27      	ldr	r3, [pc, #156]	@ (80061ec <_dtoa_r+0x5bc>)
 8006150:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006152:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006156:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800615a:	4454      	add	r4, sl
 800615c:	2900      	cmp	r1, #0
 800615e:	d053      	beq.n	8006208 <_dtoa_r+0x5d8>
 8006160:	4928      	ldr	r1, [pc, #160]	@ (8006204 <_dtoa_r+0x5d4>)
 8006162:	2000      	movs	r0, #0
 8006164:	f7fa fb72 	bl	800084c <__aeabi_ddiv>
 8006168:	4633      	mov	r3, r6
 800616a:	462a      	mov	r2, r5
 800616c:	f7fa f88c 	bl	8000288 <__aeabi_dsub>
 8006170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006174:	4656      	mov	r6, sl
 8006176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800617a:	f7fa fced 	bl	8000b58 <__aeabi_d2iz>
 800617e:	4605      	mov	r5, r0
 8006180:	f7fa f9d0 	bl	8000524 <__aeabi_i2d>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800618c:	f7fa f87c 	bl	8000288 <__aeabi_dsub>
 8006190:	3530      	adds	r5, #48	@ 0x30
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800619a:	f806 5b01 	strb.w	r5, [r6], #1
 800619e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061a2:	f7fa fc9b 	bl	8000adc <__aeabi_dcmplt>
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d171      	bne.n	800628e <_dtoa_r+0x65e>
 80061aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061ae:	4911      	ldr	r1, [pc, #68]	@ (80061f4 <_dtoa_r+0x5c4>)
 80061b0:	2000      	movs	r0, #0
 80061b2:	f7fa f869 	bl	8000288 <__aeabi_dsub>
 80061b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80061ba:	f7fa fc8f 	bl	8000adc <__aeabi_dcmplt>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f040 8095 	bne.w	80062ee <_dtoa_r+0x6be>
 80061c4:	42a6      	cmp	r6, r4
 80061c6:	f43f af50 	beq.w	800606a <_dtoa_r+0x43a>
 80061ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80061ce:	4b0a      	ldr	r3, [pc, #40]	@ (80061f8 <_dtoa_r+0x5c8>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	f7fa fa11 	bl	80005f8 <__aeabi_dmul>
 80061d6:	4b08      	ldr	r3, [pc, #32]	@ (80061f8 <_dtoa_r+0x5c8>)
 80061d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80061dc:	2200      	movs	r2, #0
 80061de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e2:	f7fa fa09 	bl	80005f8 <__aeabi_dmul>
 80061e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ea:	e7c4      	b.n	8006176 <_dtoa_r+0x546>
 80061ec:	08007d78 	.word	0x08007d78
 80061f0:	08007d50 	.word	0x08007d50
 80061f4:	3ff00000 	.word	0x3ff00000
 80061f8:	40240000 	.word	0x40240000
 80061fc:	401c0000 	.word	0x401c0000
 8006200:	40140000 	.word	0x40140000
 8006204:	3fe00000 	.word	0x3fe00000
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	f7fa f9f4 	bl	80005f8 <__aeabi_dmul>
 8006210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006214:	9415      	str	r4, [sp, #84]	@ 0x54
 8006216:	4656      	mov	r6, sl
 8006218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800621c:	f7fa fc9c 	bl	8000b58 <__aeabi_d2iz>
 8006220:	4605      	mov	r5, r0
 8006222:	f7fa f97f 	bl	8000524 <__aeabi_i2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800622e:	f7fa f82b 	bl	8000288 <__aeabi_dsub>
 8006232:	3530      	adds	r5, #48	@ 0x30
 8006234:	f806 5b01 	strb.w	r5, [r6], #1
 8006238:	4602      	mov	r2, r0
 800623a:	460b      	mov	r3, r1
 800623c:	42a6      	cmp	r6, r4
 800623e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	d124      	bne.n	8006292 <_dtoa_r+0x662>
 8006248:	4bac      	ldr	r3, [pc, #688]	@ (80064fc <_dtoa_r+0x8cc>)
 800624a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800624e:	f7fa f81d 	bl	800028c <__adddf3>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625a:	f7fa fc5d 	bl	8000b18 <__aeabi_dcmpgt>
 800625e:	2800      	cmp	r0, #0
 8006260:	d145      	bne.n	80062ee <_dtoa_r+0x6be>
 8006262:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006266:	49a5      	ldr	r1, [pc, #660]	@ (80064fc <_dtoa_r+0x8cc>)
 8006268:	2000      	movs	r0, #0
 800626a:	f7fa f80d 	bl	8000288 <__aeabi_dsub>
 800626e:	4602      	mov	r2, r0
 8006270:	460b      	mov	r3, r1
 8006272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006276:	f7fa fc31 	bl	8000adc <__aeabi_dcmplt>
 800627a:	2800      	cmp	r0, #0
 800627c:	f43f aef5 	beq.w	800606a <_dtoa_r+0x43a>
 8006280:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006282:	1e73      	subs	r3, r6, #1
 8006284:	9315      	str	r3, [sp, #84]	@ 0x54
 8006286:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800628a:	2b30      	cmp	r3, #48	@ 0x30
 800628c:	d0f8      	beq.n	8006280 <_dtoa_r+0x650>
 800628e:	9f04      	ldr	r7, [sp, #16]
 8006290:	e73e      	b.n	8006110 <_dtoa_r+0x4e0>
 8006292:	4b9b      	ldr	r3, [pc, #620]	@ (8006500 <_dtoa_r+0x8d0>)
 8006294:	f7fa f9b0 	bl	80005f8 <__aeabi_dmul>
 8006298:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629c:	e7bc      	b.n	8006218 <_dtoa_r+0x5e8>
 800629e:	d10c      	bne.n	80062ba <_dtoa_r+0x68a>
 80062a0:	4b98      	ldr	r3, [pc, #608]	@ (8006504 <_dtoa_r+0x8d4>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80062a8:	f7fa f9a6 	bl	80005f8 <__aeabi_dmul>
 80062ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062b0:	f7fa fc28 	bl	8000b04 <__aeabi_dcmpge>
 80062b4:	2800      	cmp	r0, #0
 80062b6:	f000 8157 	beq.w	8006568 <_dtoa_r+0x938>
 80062ba:	2400      	movs	r4, #0
 80062bc:	4625      	mov	r5, r4
 80062be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062c0:	43db      	mvns	r3, r3
 80062c2:	9304      	str	r3, [sp, #16]
 80062c4:	4656      	mov	r6, sl
 80062c6:	2700      	movs	r7, #0
 80062c8:	4621      	mov	r1, r4
 80062ca:	4658      	mov	r0, fp
 80062cc:	f000 fbb4 	bl	8006a38 <_Bfree>
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d0dc      	beq.n	800628e <_dtoa_r+0x65e>
 80062d4:	b12f      	cbz	r7, 80062e2 <_dtoa_r+0x6b2>
 80062d6:	42af      	cmp	r7, r5
 80062d8:	d003      	beq.n	80062e2 <_dtoa_r+0x6b2>
 80062da:	4639      	mov	r1, r7
 80062dc:	4658      	mov	r0, fp
 80062de:	f000 fbab 	bl	8006a38 <_Bfree>
 80062e2:	4629      	mov	r1, r5
 80062e4:	4658      	mov	r0, fp
 80062e6:	f000 fba7 	bl	8006a38 <_Bfree>
 80062ea:	e7d0      	b.n	800628e <_dtoa_r+0x65e>
 80062ec:	9704      	str	r7, [sp, #16]
 80062ee:	4633      	mov	r3, r6
 80062f0:	461e      	mov	r6, r3
 80062f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062f6:	2a39      	cmp	r2, #57	@ 0x39
 80062f8:	d107      	bne.n	800630a <_dtoa_r+0x6da>
 80062fa:	459a      	cmp	sl, r3
 80062fc:	d1f8      	bne.n	80062f0 <_dtoa_r+0x6c0>
 80062fe:	9a04      	ldr	r2, [sp, #16]
 8006300:	3201      	adds	r2, #1
 8006302:	9204      	str	r2, [sp, #16]
 8006304:	2230      	movs	r2, #48	@ 0x30
 8006306:	f88a 2000 	strb.w	r2, [sl]
 800630a:	781a      	ldrb	r2, [r3, #0]
 800630c:	3201      	adds	r2, #1
 800630e:	701a      	strb	r2, [r3, #0]
 8006310:	e7bd      	b.n	800628e <_dtoa_r+0x65e>
 8006312:	4b7b      	ldr	r3, [pc, #492]	@ (8006500 <_dtoa_r+0x8d0>)
 8006314:	2200      	movs	r2, #0
 8006316:	f7fa f96f 	bl	80005f8 <__aeabi_dmul>
 800631a:	2200      	movs	r2, #0
 800631c:	2300      	movs	r3, #0
 800631e:	4604      	mov	r4, r0
 8006320:	460d      	mov	r5, r1
 8006322:	f7fa fbd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006326:	2800      	cmp	r0, #0
 8006328:	f43f aebb 	beq.w	80060a2 <_dtoa_r+0x472>
 800632c:	e6f0      	b.n	8006110 <_dtoa_r+0x4e0>
 800632e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006330:	2a00      	cmp	r2, #0
 8006332:	f000 80db 	beq.w	80064ec <_dtoa_r+0x8bc>
 8006336:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006338:	2a01      	cmp	r2, #1
 800633a:	f300 80bf 	bgt.w	80064bc <_dtoa_r+0x88c>
 800633e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006340:	2a00      	cmp	r2, #0
 8006342:	f000 80b7 	beq.w	80064b4 <_dtoa_r+0x884>
 8006346:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800634a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800634c:	4646      	mov	r6, r8
 800634e:	9a08      	ldr	r2, [sp, #32]
 8006350:	2101      	movs	r1, #1
 8006352:	441a      	add	r2, r3
 8006354:	4658      	mov	r0, fp
 8006356:	4498      	add	r8, r3
 8006358:	9208      	str	r2, [sp, #32]
 800635a:	f000 fc21 	bl	8006ba0 <__i2b>
 800635e:	4605      	mov	r5, r0
 8006360:	b15e      	cbz	r6, 800637a <_dtoa_r+0x74a>
 8006362:	9b08      	ldr	r3, [sp, #32]
 8006364:	2b00      	cmp	r3, #0
 8006366:	dd08      	ble.n	800637a <_dtoa_r+0x74a>
 8006368:	42b3      	cmp	r3, r6
 800636a:	9a08      	ldr	r2, [sp, #32]
 800636c:	bfa8      	it	ge
 800636e:	4633      	movge	r3, r6
 8006370:	eba8 0803 	sub.w	r8, r8, r3
 8006374:	1af6      	subs	r6, r6, r3
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	9308      	str	r3, [sp, #32]
 800637a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800637c:	b1f3      	cbz	r3, 80063bc <_dtoa_r+0x78c>
 800637e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 80b7 	beq.w	80064f4 <_dtoa_r+0x8c4>
 8006386:	b18c      	cbz	r4, 80063ac <_dtoa_r+0x77c>
 8006388:	4629      	mov	r1, r5
 800638a:	4622      	mov	r2, r4
 800638c:	4658      	mov	r0, fp
 800638e:	f000 fcc7 	bl	8006d20 <__pow5mult>
 8006392:	464a      	mov	r2, r9
 8006394:	4601      	mov	r1, r0
 8006396:	4605      	mov	r5, r0
 8006398:	4658      	mov	r0, fp
 800639a:	f000 fc17 	bl	8006bcc <__multiply>
 800639e:	4649      	mov	r1, r9
 80063a0:	9004      	str	r0, [sp, #16]
 80063a2:	4658      	mov	r0, fp
 80063a4:	f000 fb48 	bl	8006a38 <_Bfree>
 80063a8:	9b04      	ldr	r3, [sp, #16]
 80063aa:	4699      	mov	r9, r3
 80063ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ae:	1b1a      	subs	r2, r3, r4
 80063b0:	d004      	beq.n	80063bc <_dtoa_r+0x78c>
 80063b2:	4649      	mov	r1, r9
 80063b4:	4658      	mov	r0, fp
 80063b6:	f000 fcb3 	bl	8006d20 <__pow5mult>
 80063ba:	4681      	mov	r9, r0
 80063bc:	2101      	movs	r1, #1
 80063be:	4658      	mov	r0, fp
 80063c0:	f000 fbee 	bl	8006ba0 <__i2b>
 80063c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063c6:	4604      	mov	r4, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 81cf 	beq.w	800676c <_dtoa_r+0xb3c>
 80063ce:	461a      	mov	r2, r3
 80063d0:	4601      	mov	r1, r0
 80063d2:	4658      	mov	r0, fp
 80063d4:	f000 fca4 	bl	8006d20 <__pow5mult>
 80063d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063da:	2b01      	cmp	r3, #1
 80063dc:	4604      	mov	r4, r0
 80063de:	f300 8095 	bgt.w	800650c <_dtoa_r+0x8dc>
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 8087 	bne.w	80064f8 <_dtoa_r+0x8c8>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f040 8089 	bne.w	8006508 <_dtoa_r+0x8d8>
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80063fc:	0d1b      	lsrs	r3, r3, #20
 80063fe:	051b      	lsls	r3, r3, #20
 8006400:	b12b      	cbz	r3, 800640e <_dtoa_r+0x7de>
 8006402:	9b08      	ldr	r3, [sp, #32]
 8006404:	3301      	adds	r3, #1
 8006406:	9308      	str	r3, [sp, #32]
 8006408:	f108 0801 	add.w	r8, r8, #1
 800640c:	2301      	movs	r3, #1
 800640e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006412:	2b00      	cmp	r3, #0
 8006414:	f000 81b0 	beq.w	8006778 <_dtoa_r+0xb48>
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800641e:	6918      	ldr	r0, [r3, #16]
 8006420:	f000 fb72 	bl	8006b08 <__hi0bits>
 8006424:	f1c0 0020 	rsb	r0, r0, #32
 8006428:	9b08      	ldr	r3, [sp, #32]
 800642a:	4418      	add	r0, r3
 800642c:	f010 001f 	ands.w	r0, r0, #31
 8006430:	d077      	beq.n	8006522 <_dtoa_r+0x8f2>
 8006432:	f1c0 0320 	rsb	r3, r0, #32
 8006436:	2b04      	cmp	r3, #4
 8006438:	dd6b      	ble.n	8006512 <_dtoa_r+0x8e2>
 800643a:	9b08      	ldr	r3, [sp, #32]
 800643c:	f1c0 001c 	rsb	r0, r0, #28
 8006440:	4403      	add	r3, r0
 8006442:	4480      	add	r8, r0
 8006444:	4406      	add	r6, r0
 8006446:	9308      	str	r3, [sp, #32]
 8006448:	f1b8 0f00 	cmp.w	r8, #0
 800644c:	dd05      	ble.n	800645a <_dtoa_r+0x82a>
 800644e:	4649      	mov	r1, r9
 8006450:	4642      	mov	r2, r8
 8006452:	4658      	mov	r0, fp
 8006454:	f000 fcbe 	bl	8006dd4 <__lshift>
 8006458:	4681      	mov	r9, r0
 800645a:	9b08      	ldr	r3, [sp, #32]
 800645c:	2b00      	cmp	r3, #0
 800645e:	dd05      	ble.n	800646c <_dtoa_r+0x83c>
 8006460:	4621      	mov	r1, r4
 8006462:	461a      	mov	r2, r3
 8006464:	4658      	mov	r0, fp
 8006466:	f000 fcb5 	bl	8006dd4 <__lshift>
 800646a:	4604      	mov	r4, r0
 800646c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800646e:	2b00      	cmp	r3, #0
 8006470:	d059      	beq.n	8006526 <_dtoa_r+0x8f6>
 8006472:	4621      	mov	r1, r4
 8006474:	4648      	mov	r0, r9
 8006476:	f000 fd19 	bl	8006eac <__mcmp>
 800647a:	2800      	cmp	r0, #0
 800647c:	da53      	bge.n	8006526 <_dtoa_r+0x8f6>
 800647e:	1e7b      	subs	r3, r7, #1
 8006480:	9304      	str	r3, [sp, #16]
 8006482:	4649      	mov	r1, r9
 8006484:	2300      	movs	r3, #0
 8006486:	220a      	movs	r2, #10
 8006488:	4658      	mov	r0, fp
 800648a:	f000 faf7 	bl	8006a7c <__multadd>
 800648e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006490:	4681      	mov	r9, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8172 	beq.w	800677c <_dtoa_r+0xb4c>
 8006498:	2300      	movs	r3, #0
 800649a:	4629      	mov	r1, r5
 800649c:	220a      	movs	r2, #10
 800649e:	4658      	mov	r0, fp
 80064a0:	f000 faec 	bl	8006a7c <__multadd>
 80064a4:	9b00      	ldr	r3, [sp, #0]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	4605      	mov	r5, r0
 80064aa:	dc67      	bgt.n	800657c <_dtoa_r+0x94c>
 80064ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	dc41      	bgt.n	8006536 <_dtoa_r+0x906>
 80064b2:	e063      	b.n	800657c <_dtoa_r+0x94c>
 80064b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80064ba:	e746      	b.n	800634a <_dtoa_r+0x71a>
 80064bc:	9b07      	ldr	r3, [sp, #28]
 80064be:	1e5c      	subs	r4, r3, #1
 80064c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064c2:	42a3      	cmp	r3, r4
 80064c4:	bfbf      	itttt	lt
 80064c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80064c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80064ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80064cc:	1ae3      	sublt	r3, r4, r3
 80064ce:	bfb4      	ite	lt
 80064d0:	18d2      	addlt	r2, r2, r3
 80064d2:	1b1c      	subge	r4, r3, r4
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	bfbc      	itt	lt
 80064d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80064da:	2400      	movlt	r4, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	bfb5      	itete	lt
 80064e0:	eba8 0603 	sublt.w	r6, r8, r3
 80064e4:	9b07      	ldrge	r3, [sp, #28]
 80064e6:	2300      	movlt	r3, #0
 80064e8:	4646      	movge	r6, r8
 80064ea:	e730      	b.n	800634e <_dtoa_r+0x71e>
 80064ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80064ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80064f0:	4646      	mov	r6, r8
 80064f2:	e735      	b.n	8006360 <_dtoa_r+0x730>
 80064f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064f6:	e75c      	b.n	80063b2 <_dtoa_r+0x782>
 80064f8:	2300      	movs	r3, #0
 80064fa:	e788      	b.n	800640e <_dtoa_r+0x7de>
 80064fc:	3fe00000 	.word	0x3fe00000
 8006500:	40240000 	.word	0x40240000
 8006504:	40140000 	.word	0x40140000
 8006508:	9b02      	ldr	r3, [sp, #8]
 800650a:	e780      	b.n	800640e <_dtoa_r+0x7de>
 800650c:	2300      	movs	r3, #0
 800650e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006510:	e782      	b.n	8006418 <_dtoa_r+0x7e8>
 8006512:	d099      	beq.n	8006448 <_dtoa_r+0x818>
 8006514:	9a08      	ldr	r2, [sp, #32]
 8006516:	331c      	adds	r3, #28
 8006518:	441a      	add	r2, r3
 800651a:	4498      	add	r8, r3
 800651c:	441e      	add	r6, r3
 800651e:	9208      	str	r2, [sp, #32]
 8006520:	e792      	b.n	8006448 <_dtoa_r+0x818>
 8006522:	4603      	mov	r3, r0
 8006524:	e7f6      	b.n	8006514 <_dtoa_r+0x8e4>
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	9704      	str	r7, [sp, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dc20      	bgt.n	8006570 <_dtoa_r+0x940>
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006532:	2b02      	cmp	r3, #2
 8006534:	dd1e      	ble.n	8006574 <_dtoa_r+0x944>
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	f47f aec0 	bne.w	80062be <_dtoa_r+0x68e>
 800653e:	4621      	mov	r1, r4
 8006540:	2205      	movs	r2, #5
 8006542:	4658      	mov	r0, fp
 8006544:	f000 fa9a 	bl	8006a7c <__multadd>
 8006548:	4601      	mov	r1, r0
 800654a:	4604      	mov	r4, r0
 800654c:	4648      	mov	r0, r9
 800654e:	f000 fcad 	bl	8006eac <__mcmp>
 8006552:	2800      	cmp	r0, #0
 8006554:	f77f aeb3 	ble.w	80062be <_dtoa_r+0x68e>
 8006558:	4656      	mov	r6, sl
 800655a:	2331      	movs	r3, #49	@ 0x31
 800655c:	f806 3b01 	strb.w	r3, [r6], #1
 8006560:	9b04      	ldr	r3, [sp, #16]
 8006562:	3301      	adds	r3, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	e6ae      	b.n	80062c6 <_dtoa_r+0x696>
 8006568:	9c07      	ldr	r4, [sp, #28]
 800656a:	9704      	str	r7, [sp, #16]
 800656c:	4625      	mov	r5, r4
 800656e:	e7f3      	b.n	8006558 <_dtoa_r+0x928>
 8006570:	9b07      	ldr	r3, [sp, #28]
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8104 	beq.w	8006784 <_dtoa_r+0xb54>
 800657c:	2e00      	cmp	r6, #0
 800657e:	dd05      	ble.n	800658c <_dtoa_r+0x95c>
 8006580:	4629      	mov	r1, r5
 8006582:	4632      	mov	r2, r6
 8006584:	4658      	mov	r0, fp
 8006586:	f000 fc25 	bl	8006dd4 <__lshift>
 800658a:	4605      	mov	r5, r0
 800658c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d05a      	beq.n	8006648 <_dtoa_r+0xa18>
 8006592:	6869      	ldr	r1, [r5, #4]
 8006594:	4658      	mov	r0, fp
 8006596:	f000 fa0f 	bl	80069b8 <_Balloc>
 800659a:	4606      	mov	r6, r0
 800659c:	b928      	cbnz	r0, 80065aa <_dtoa_r+0x97a>
 800659e:	4b84      	ldr	r3, [pc, #528]	@ (80067b0 <_dtoa_r+0xb80>)
 80065a0:	4602      	mov	r2, r0
 80065a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80065a6:	f7ff bb5a 	b.w	8005c5e <_dtoa_r+0x2e>
 80065aa:	692a      	ldr	r2, [r5, #16]
 80065ac:	3202      	adds	r2, #2
 80065ae:	0092      	lsls	r2, r2, #2
 80065b0:	f105 010c 	add.w	r1, r5, #12
 80065b4:	300c      	adds	r0, #12
 80065b6:	f000 ffaf 	bl	8007518 <memcpy>
 80065ba:	2201      	movs	r2, #1
 80065bc:	4631      	mov	r1, r6
 80065be:	4658      	mov	r0, fp
 80065c0:	f000 fc08 	bl	8006dd4 <__lshift>
 80065c4:	f10a 0301 	add.w	r3, sl, #1
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	9b00      	ldr	r3, [sp, #0]
 80065cc:	4453      	add	r3, sl
 80065ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d0:	9b02      	ldr	r3, [sp, #8]
 80065d2:	f003 0301 	and.w	r3, r3, #1
 80065d6:	462f      	mov	r7, r5
 80065d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80065da:	4605      	mov	r5, r0
 80065dc:	9b07      	ldr	r3, [sp, #28]
 80065de:	4621      	mov	r1, r4
 80065e0:	3b01      	subs	r3, #1
 80065e2:	4648      	mov	r0, r9
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	f7ff fa9a 	bl	8005b1e <quorem>
 80065ea:	4639      	mov	r1, r7
 80065ec:	9002      	str	r0, [sp, #8]
 80065ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80065f2:	4648      	mov	r0, r9
 80065f4:	f000 fc5a 	bl	8006eac <__mcmp>
 80065f8:	462a      	mov	r2, r5
 80065fa:	9008      	str	r0, [sp, #32]
 80065fc:	4621      	mov	r1, r4
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fc70 	bl	8006ee4 <__mdiff>
 8006604:	68c2      	ldr	r2, [r0, #12]
 8006606:	4606      	mov	r6, r0
 8006608:	bb02      	cbnz	r2, 800664c <_dtoa_r+0xa1c>
 800660a:	4601      	mov	r1, r0
 800660c:	4648      	mov	r0, r9
 800660e:	f000 fc4d 	bl	8006eac <__mcmp>
 8006612:	4602      	mov	r2, r0
 8006614:	4631      	mov	r1, r6
 8006616:	4658      	mov	r0, fp
 8006618:	920e      	str	r2, [sp, #56]	@ 0x38
 800661a:	f000 fa0d 	bl	8006a38 <_Bfree>
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006622:	9e07      	ldr	r6, [sp, #28]
 8006624:	ea43 0102 	orr.w	r1, r3, r2
 8006628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800662a:	4319      	orrs	r1, r3
 800662c:	d110      	bne.n	8006650 <_dtoa_r+0xa20>
 800662e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006632:	d029      	beq.n	8006688 <_dtoa_r+0xa58>
 8006634:	9b08      	ldr	r3, [sp, #32]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dd02      	ble.n	8006640 <_dtoa_r+0xa10>
 800663a:	9b02      	ldr	r3, [sp, #8]
 800663c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006640:	9b00      	ldr	r3, [sp, #0]
 8006642:	f883 8000 	strb.w	r8, [r3]
 8006646:	e63f      	b.n	80062c8 <_dtoa_r+0x698>
 8006648:	4628      	mov	r0, r5
 800664a:	e7bb      	b.n	80065c4 <_dtoa_r+0x994>
 800664c:	2201      	movs	r2, #1
 800664e:	e7e1      	b.n	8006614 <_dtoa_r+0x9e4>
 8006650:	9b08      	ldr	r3, [sp, #32]
 8006652:	2b00      	cmp	r3, #0
 8006654:	db04      	blt.n	8006660 <_dtoa_r+0xa30>
 8006656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006658:	430b      	orrs	r3, r1
 800665a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800665c:	430b      	orrs	r3, r1
 800665e:	d120      	bne.n	80066a2 <_dtoa_r+0xa72>
 8006660:	2a00      	cmp	r2, #0
 8006662:	dded      	ble.n	8006640 <_dtoa_r+0xa10>
 8006664:	4649      	mov	r1, r9
 8006666:	2201      	movs	r2, #1
 8006668:	4658      	mov	r0, fp
 800666a:	f000 fbb3 	bl	8006dd4 <__lshift>
 800666e:	4621      	mov	r1, r4
 8006670:	4681      	mov	r9, r0
 8006672:	f000 fc1b 	bl	8006eac <__mcmp>
 8006676:	2800      	cmp	r0, #0
 8006678:	dc03      	bgt.n	8006682 <_dtoa_r+0xa52>
 800667a:	d1e1      	bne.n	8006640 <_dtoa_r+0xa10>
 800667c:	f018 0f01 	tst.w	r8, #1
 8006680:	d0de      	beq.n	8006640 <_dtoa_r+0xa10>
 8006682:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006686:	d1d8      	bne.n	800663a <_dtoa_r+0xa0a>
 8006688:	9a00      	ldr	r2, [sp, #0]
 800668a:	2339      	movs	r3, #57	@ 0x39
 800668c:	7013      	strb	r3, [r2, #0]
 800668e:	4633      	mov	r3, r6
 8006690:	461e      	mov	r6, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006698:	2a39      	cmp	r2, #57	@ 0x39
 800669a:	d052      	beq.n	8006742 <_dtoa_r+0xb12>
 800669c:	3201      	adds	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e612      	b.n	80062c8 <_dtoa_r+0x698>
 80066a2:	2a00      	cmp	r2, #0
 80066a4:	dd07      	ble.n	80066b6 <_dtoa_r+0xa86>
 80066a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80066aa:	d0ed      	beq.n	8006688 <_dtoa_r+0xa58>
 80066ac:	9a00      	ldr	r2, [sp, #0]
 80066ae:	f108 0301 	add.w	r3, r8, #1
 80066b2:	7013      	strb	r3, [r2, #0]
 80066b4:	e608      	b.n	80062c8 <_dtoa_r+0x698>
 80066b6:	9b07      	ldr	r3, [sp, #28]
 80066b8:	9a07      	ldr	r2, [sp, #28]
 80066ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80066be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d028      	beq.n	8006716 <_dtoa_r+0xae6>
 80066c4:	4649      	mov	r1, r9
 80066c6:	2300      	movs	r3, #0
 80066c8:	220a      	movs	r2, #10
 80066ca:	4658      	mov	r0, fp
 80066cc:	f000 f9d6 	bl	8006a7c <__multadd>
 80066d0:	42af      	cmp	r7, r5
 80066d2:	4681      	mov	r9, r0
 80066d4:	f04f 0300 	mov.w	r3, #0
 80066d8:	f04f 020a 	mov.w	r2, #10
 80066dc:	4639      	mov	r1, r7
 80066de:	4658      	mov	r0, fp
 80066e0:	d107      	bne.n	80066f2 <_dtoa_r+0xac2>
 80066e2:	f000 f9cb 	bl	8006a7c <__multadd>
 80066e6:	4607      	mov	r7, r0
 80066e8:	4605      	mov	r5, r0
 80066ea:	9b07      	ldr	r3, [sp, #28]
 80066ec:	3301      	adds	r3, #1
 80066ee:	9307      	str	r3, [sp, #28]
 80066f0:	e774      	b.n	80065dc <_dtoa_r+0x9ac>
 80066f2:	f000 f9c3 	bl	8006a7c <__multadd>
 80066f6:	4629      	mov	r1, r5
 80066f8:	4607      	mov	r7, r0
 80066fa:	2300      	movs	r3, #0
 80066fc:	220a      	movs	r2, #10
 80066fe:	4658      	mov	r0, fp
 8006700:	f000 f9bc 	bl	8006a7c <__multadd>
 8006704:	4605      	mov	r5, r0
 8006706:	e7f0      	b.n	80066ea <_dtoa_r+0xaba>
 8006708:	9b00      	ldr	r3, [sp, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfcc      	ite	gt
 800670e:	461e      	movgt	r6, r3
 8006710:	2601      	movle	r6, #1
 8006712:	4456      	add	r6, sl
 8006714:	2700      	movs	r7, #0
 8006716:	4649      	mov	r1, r9
 8006718:	2201      	movs	r2, #1
 800671a:	4658      	mov	r0, fp
 800671c:	f000 fb5a 	bl	8006dd4 <__lshift>
 8006720:	4621      	mov	r1, r4
 8006722:	4681      	mov	r9, r0
 8006724:	f000 fbc2 	bl	8006eac <__mcmp>
 8006728:	2800      	cmp	r0, #0
 800672a:	dcb0      	bgt.n	800668e <_dtoa_r+0xa5e>
 800672c:	d102      	bne.n	8006734 <_dtoa_r+0xb04>
 800672e:	f018 0f01 	tst.w	r8, #1
 8006732:	d1ac      	bne.n	800668e <_dtoa_r+0xa5e>
 8006734:	4633      	mov	r3, r6
 8006736:	461e      	mov	r6, r3
 8006738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800673c:	2a30      	cmp	r2, #48	@ 0x30
 800673e:	d0fa      	beq.n	8006736 <_dtoa_r+0xb06>
 8006740:	e5c2      	b.n	80062c8 <_dtoa_r+0x698>
 8006742:	459a      	cmp	sl, r3
 8006744:	d1a4      	bne.n	8006690 <_dtoa_r+0xa60>
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	3301      	adds	r3, #1
 800674a:	9304      	str	r3, [sp, #16]
 800674c:	2331      	movs	r3, #49	@ 0x31
 800674e:	f88a 3000 	strb.w	r3, [sl]
 8006752:	e5b9      	b.n	80062c8 <_dtoa_r+0x698>
 8006754:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006756:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80067b4 <_dtoa_r+0xb84>
 800675a:	b11b      	cbz	r3, 8006764 <_dtoa_r+0xb34>
 800675c:	f10a 0308 	add.w	r3, sl, #8
 8006760:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	4650      	mov	r0, sl
 8006766:	b019      	add	sp, #100	@ 0x64
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800676e:	2b01      	cmp	r3, #1
 8006770:	f77f ae37 	ble.w	80063e2 <_dtoa_r+0x7b2>
 8006774:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006776:	930a      	str	r3, [sp, #40]	@ 0x28
 8006778:	2001      	movs	r0, #1
 800677a:	e655      	b.n	8006428 <_dtoa_r+0x7f8>
 800677c:	9b00      	ldr	r3, [sp, #0]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f77f aed6 	ble.w	8006530 <_dtoa_r+0x900>
 8006784:	4656      	mov	r6, sl
 8006786:	4621      	mov	r1, r4
 8006788:	4648      	mov	r0, r9
 800678a:	f7ff f9c8 	bl	8005b1e <quorem>
 800678e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006792:	f806 8b01 	strb.w	r8, [r6], #1
 8006796:	9b00      	ldr	r3, [sp, #0]
 8006798:	eba6 020a 	sub.w	r2, r6, sl
 800679c:	4293      	cmp	r3, r2
 800679e:	ddb3      	ble.n	8006708 <_dtoa_r+0xad8>
 80067a0:	4649      	mov	r1, r9
 80067a2:	2300      	movs	r3, #0
 80067a4:	220a      	movs	r2, #10
 80067a6:	4658      	mov	r0, fp
 80067a8:	f000 f968 	bl	8006a7c <__multadd>
 80067ac:	4681      	mov	r9, r0
 80067ae:	e7ea      	b.n	8006786 <_dtoa_r+0xb56>
 80067b0:	08007cd8 	.word	0x08007cd8
 80067b4:	08007c5c 	.word	0x08007c5c

080067b8 <_free_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	2900      	cmp	r1, #0
 80067be:	d041      	beq.n	8006844 <_free_r+0x8c>
 80067c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c4:	1f0c      	subs	r4, r1, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	18e4      	addlt	r4, r4, r3
 80067cc:	f000 f8e8 	bl	80069a0 <__malloc_lock>
 80067d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006848 <_free_r+0x90>)
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x2c>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	4628      	mov	r0, r5
 80067dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e0:	f000 b8e4 	b.w	80069ac <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x42>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	1821      	adds	r1, r4, r0
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x1e>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x4c>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x42>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1850      	adds	r0, r2, r1
 8006808:	42a0      	cmp	r0, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x6c>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	4401      	add	r1, r0
 8006810:	1850      	adds	r0, r2, r1
 8006812:	4283      	cmp	r3, r0
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x22>
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	6053      	str	r3, [r2, #4]
 800681e:	4408      	add	r0, r1
 8006820:	6010      	str	r0, [r2, #0]
 8006822:	e7da      	b.n	80067da <_free_r+0x22>
 8006824:	d902      	bls.n	800682c <_free_r+0x74>
 8006826:	230c      	movs	r3, #12
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x22>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	1821      	adds	r1, r4, r0
 8006830:	428b      	cmp	r3, r1
 8006832:	bf04      	itt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	6063      	str	r3, [r4, #4]
 800683a:	bf04      	itt	eq
 800683c:	1809      	addeq	r1, r1, r0
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	6054      	str	r4, [r2, #4]
 8006842:	e7ca      	b.n	80067da <_free_r+0x22>
 8006844:	bd38      	pop	{r3, r4, r5, pc}
 8006846:	bf00      	nop
 8006848:	200004d0 	.word	0x200004d0

0800684c <malloc>:
 800684c:	4b02      	ldr	r3, [pc, #8]	@ (8006858 <malloc+0xc>)
 800684e:	4601      	mov	r1, r0
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	f000 b825 	b.w	80068a0 <_malloc_r>
 8006856:	bf00      	nop
 8006858:	20000018 	.word	0x20000018

0800685c <sbrk_aligned>:
 800685c:	b570      	push	{r4, r5, r6, lr}
 800685e:	4e0f      	ldr	r6, [pc, #60]	@ (800689c <sbrk_aligned+0x40>)
 8006860:	460c      	mov	r4, r1
 8006862:	6831      	ldr	r1, [r6, #0]
 8006864:	4605      	mov	r5, r0
 8006866:	b911      	cbnz	r1, 800686e <sbrk_aligned+0x12>
 8006868:	f000 fe46 	bl	80074f8 <_sbrk_r>
 800686c:	6030      	str	r0, [r6, #0]
 800686e:	4621      	mov	r1, r4
 8006870:	4628      	mov	r0, r5
 8006872:	f000 fe41 	bl	80074f8 <_sbrk_r>
 8006876:	1c43      	adds	r3, r0, #1
 8006878:	d103      	bne.n	8006882 <sbrk_aligned+0x26>
 800687a:	f04f 34ff 	mov.w	r4, #4294967295
 800687e:	4620      	mov	r0, r4
 8006880:	bd70      	pop	{r4, r5, r6, pc}
 8006882:	1cc4      	adds	r4, r0, #3
 8006884:	f024 0403 	bic.w	r4, r4, #3
 8006888:	42a0      	cmp	r0, r4
 800688a:	d0f8      	beq.n	800687e <sbrk_aligned+0x22>
 800688c:	1a21      	subs	r1, r4, r0
 800688e:	4628      	mov	r0, r5
 8006890:	f000 fe32 	bl	80074f8 <_sbrk_r>
 8006894:	3001      	adds	r0, #1
 8006896:	d1f2      	bne.n	800687e <sbrk_aligned+0x22>
 8006898:	e7ef      	b.n	800687a <sbrk_aligned+0x1e>
 800689a:	bf00      	nop
 800689c:	200004cc 	.word	0x200004cc

080068a0 <_malloc_r>:
 80068a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068a4:	1ccd      	adds	r5, r1, #3
 80068a6:	f025 0503 	bic.w	r5, r5, #3
 80068aa:	3508      	adds	r5, #8
 80068ac:	2d0c      	cmp	r5, #12
 80068ae:	bf38      	it	cc
 80068b0:	250c      	movcc	r5, #12
 80068b2:	2d00      	cmp	r5, #0
 80068b4:	4606      	mov	r6, r0
 80068b6:	db01      	blt.n	80068bc <_malloc_r+0x1c>
 80068b8:	42a9      	cmp	r1, r5
 80068ba:	d904      	bls.n	80068c6 <_malloc_r+0x26>
 80068bc:	230c      	movs	r3, #12
 80068be:	6033      	str	r3, [r6, #0]
 80068c0:	2000      	movs	r0, #0
 80068c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800699c <_malloc_r+0xfc>
 80068ca:	f000 f869 	bl	80069a0 <__malloc_lock>
 80068ce:	f8d8 3000 	ldr.w	r3, [r8]
 80068d2:	461c      	mov	r4, r3
 80068d4:	bb44      	cbnz	r4, 8006928 <_malloc_r+0x88>
 80068d6:	4629      	mov	r1, r5
 80068d8:	4630      	mov	r0, r6
 80068da:	f7ff ffbf 	bl	800685c <sbrk_aligned>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	4604      	mov	r4, r0
 80068e2:	d158      	bne.n	8006996 <_malloc_r+0xf6>
 80068e4:	f8d8 4000 	ldr.w	r4, [r8]
 80068e8:	4627      	mov	r7, r4
 80068ea:	2f00      	cmp	r7, #0
 80068ec:	d143      	bne.n	8006976 <_malloc_r+0xd6>
 80068ee:	2c00      	cmp	r4, #0
 80068f0:	d04b      	beq.n	800698a <_malloc_r+0xea>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	4639      	mov	r1, r7
 80068f6:	4630      	mov	r0, r6
 80068f8:	eb04 0903 	add.w	r9, r4, r3
 80068fc:	f000 fdfc 	bl	80074f8 <_sbrk_r>
 8006900:	4581      	cmp	r9, r0
 8006902:	d142      	bne.n	800698a <_malloc_r+0xea>
 8006904:	6821      	ldr	r1, [r4, #0]
 8006906:	1a6d      	subs	r5, r5, r1
 8006908:	4629      	mov	r1, r5
 800690a:	4630      	mov	r0, r6
 800690c:	f7ff ffa6 	bl	800685c <sbrk_aligned>
 8006910:	3001      	adds	r0, #1
 8006912:	d03a      	beq.n	800698a <_malloc_r+0xea>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	442b      	add	r3, r5
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	f8d8 3000 	ldr.w	r3, [r8]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	bb62      	cbnz	r2, 800697c <_malloc_r+0xdc>
 8006922:	f8c8 7000 	str.w	r7, [r8]
 8006926:	e00f      	b.n	8006948 <_malloc_r+0xa8>
 8006928:	6822      	ldr	r2, [r4, #0]
 800692a:	1b52      	subs	r2, r2, r5
 800692c:	d420      	bmi.n	8006970 <_malloc_r+0xd0>
 800692e:	2a0b      	cmp	r2, #11
 8006930:	d917      	bls.n	8006962 <_malloc_r+0xc2>
 8006932:	1961      	adds	r1, r4, r5
 8006934:	42a3      	cmp	r3, r4
 8006936:	6025      	str	r5, [r4, #0]
 8006938:	bf18      	it	ne
 800693a:	6059      	strne	r1, [r3, #4]
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	bf08      	it	eq
 8006940:	f8c8 1000 	streq.w	r1, [r8]
 8006944:	5162      	str	r2, [r4, r5]
 8006946:	604b      	str	r3, [r1, #4]
 8006948:	4630      	mov	r0, r6
 800694a:	f000 f82f 	bl	80069ac <__malloc_unlock>
 800694e:	f104 000b 	add.w	r0, r4, #11
 8006952:	1d23      	adds	r3, r4, #4
 8006954:	f020 0007 	bic.w	r0, r0, #7
 8006958:	1ac2      	subs	r2, r0, r3
 800695a:	bf1c      	itt	ne
 800695c:	1a1b      	subne	r3, r3, r0
 800695e:	50a3      	strne	r3, [r4, r2]
 8006960:	e7af      	b.n	80068c2 <_malloc_r+0x22>
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	42a3      	cmp	r3, r4
 8006966:	bf0c      	ite	eq
 8006968:	f8c8 2000 	streq.w	r2, [r8]
 800696c:	605a      	strne	r2, [r3, #4]
 800696e:	e7eb      	b.n	8006948 <_malloc_r+0xa8>
 8006970:	4623      	mov	r3, r4
 8006972:	6864      	ldr	r4, [r4, #4]
 8006974:	e7ae      	b.n	80068d4 <_malloc_r+0x34>
 8006976:	463c      	mov	r4, r7
 8006978:	687f      	ldr	r7, [r7, #4]
 800697a:	e7b6      	b.n	80068ea <_malloc_r+0x4a>
 800697c:	461a      	mov	r2, r3
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	42a3      	cmp	r3, r4
 8006982:	d1fb      	bne.n	800697c <_malloc_r+0xdc>
 8006984:	2300      	movs	r3, #0
 8006986:	6053      	str	r3, [r2, #4]
 8006988:	e7de      	b.n	8006948 <_malloc_r+0xa8>
 800698a:	230c      	movs	r3, #12
 800698c:	6033      	str	r3, [r6, #0]
 800698e:	4630      	mov	r0, r6
 8006990:	f000 f80c 	bl	80069ac <__malloc_unlock>
 8006994:	e794      	b.n	80068c0 <_malloc_r+0x20>
 8006996:	6005      	str	r5, [r0, #0]
 8006998:	e7d6      	b.n	8006948 <_malloc_r+0xa8>
 800699a:	bf00      	nop
 800699c:	200004d0 	.word	0x200004d0

080069a0 <__malloc_lock>:
 80069a0:	4801      	ldr	r0, [pc, #4]	@ (80069a8 <__malloc_lock+0x8>)
 80069a2:	f7ff b8ba 	b.w	8005b1a <__retarget_lock_acquire_recursive>
 80069a6:	bf00      	nop
 80069a8:	200004c8 	.word	0x200004c8

080069ac <__malloc_unlock>:
 80069ac:	4801      	ldr	r0, [pc, #4]	@ (80069b4 <__malloc_unlock+0x8>)
 80069ae:	f7ff b8b5 	b.w	8005b1c <__retarget_lock_release_recursive>
 80069b2:	bf00      	nop
 80069b4:	200004c8 	.word	0x200004c8

080069b8 <_Balloc>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	69c6      	ldr	r6, [r0, #28]
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	b976      	cbnz	r6, 80069e0 <_Balloc+0x28>
 80069c2:	2010      	movs	r0, #16
 80069c4:	f7ff ff42 	bl	800684c <malloc>
 80069c8:	4602      	mov	r2, r0
 80069ca:	61e0      	str	r0, [r4, #28]
 80069cc:	b920      	cbnz	r0, 80069d8 <_Balloc+0x20>
 80069ce:	4b18      	ldr	r3, [pc, #96]	@ (8006a30 <_Balloc+0x78>)
 80069d0:	4818      	ldr	r0, [pc, #96]	@ (8006a34 <_Balloc+0x7c>)
 80069d2:	216b      	movs	r1, #107	@ 0x6b
 80069d4:	f000 fdae 	bl	8007534 <__assert_func>
 80069d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069dc:	6006      	str	r6, [r0, #0]
 80069de:	60c6      	str	r6, [r0, #12]
 80069e0:	69e6      	ldr	r6, [r4, #28]
 80069e2:	68f3      	ldr	r3, [r6, #12]
 80069e4:	b183      	cbz	r3, 8006a08 <_Balloc+0x50>
 80069e6:	69e3      	ldr	r3, [r4, #28]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80069ee:	b9b8      	cbnz	r0, 8006a20 <_Balloc+0x68>
 80069f0:	2101      	movs	r1, #1
 80069f2:	fa01 f605 	lsl.w	r6, r1, r5
 80069f6:	1d72      	adds	r2, r6, #5
 80069f8:	0092      	lsls	r2, r2, #2
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 fdb8 	bl	8007570 <_calloc_r>
 8006a00:	b160      	cbz	r0, 8006a1c <_Balloc+0x64>
 8006a02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a06:	e00e      	b.n	8006a26 <_Balloc+0x6e>
 8006a08:	2221      	movs	r2, #33	@ 0x21
 8006a0a:	2104      	movs	r1, #4
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	f000 fdaf 	bl	8007570 <_calloc_r>
 8006a12:	69e3      	ldr	r3, [r4, #28]
 8006a14:	60f0      	str	r0, [r6, #12]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1e4      	bne.n	80069e6 <_Balloc+0x2e>
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	6802      	ldr	r2, [r0, #0]
 8006a22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006a26:	2300      	movs	r3, #0
 8006a28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a2c:	e7f7      	b.n	8006a1e <_Balloc+0x66>
 8006a2e:	bf00      	nop
 8006a30:	08007c69 	.word	0x08007c69
 8006a34:	08007ce9 	.word	0x08007ce9

08006a38 <_Bfree>:
 8006a38:	b570      	push	{r4, r5, r6, lr}
 8006a3a:	69c6      	ldr	r6, [r0, #28]
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b976      	cbnz	r6, 8006a60 <_Bfree+0x28>
 8006a42:	2010      	movs	r0, #16
 8006a44:	f7ff ff02 	bl	800684c <malloc>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	61e8      	str	r0, [r5, #28]
 8006a4c:	b920      	cbnz	r0, 8006a58 <_Bfree+0x20>
 8006a4e:	4b09      	ldr	r3, [pc, #36]	@ (8006a74 <_Bfree+0x3c>)
 8006a50:	4809      	ldr	r0, [pc, #36]	@ (8006a78 <_Bfree+0x40>)
 8006a52:	218f      	movs	r1, #143	@ 0x8f
 8006a54:	f000 fd6e 	bl	8007534 <__assert_func>
 8006a58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a5c:	6006      	str	r6, [r0, #0]
 8006a5e:	60c6      	str	r6, [r0, #12]
 8006a60:	b13c      	cbz	r4, 8006a72 <_Bfree+0x3a>
 8006a62:	69eb      	ldr	r3, [r5, #28]
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a6c:	6021      	str	r1, [r4, #0]
 8006a6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006a72:	bd70      	pop	{r4, r5, r6, pc}
 8006a74:	08007c69 	.word	0x08007c69
 8006a78:	08007ce9 	.word	0x08007ce9

08006a7c <__multadd>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	690d      	ldr	r5, [r1, #16]
 8006a82:	4607      	mov	r7, r0
 8006a84:	460c      	mov	r4, r1
 8006a86:	461e      	mov	r6, r3
 8006a88:	f101 0c14 	add.w	ip, r1, #20
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f8dc 3000 	ldr.w	r3, [ip]
 8006a92:	b299      	uxth	r1, r3
 8006a94:	fb02 6101 	mla	r1, r2, r1, r6
 8006a98:	0c1e      	lsrs	r6, r3, #16
 8006a9a:	0c0b      	lsrs	r3, r1, #16
 8006a9c:	fb02 3306 	mla	r3, r2, r6, r3
 8006aa0:	b289      	uxth	r1, r1
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006aa8:	4285      	cmp	r5, r0
 8006aaa:	f84c 1b04 	str.w	r1, [ip], #4
 8006aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ab2:	dcec      	bgt.n	8006a8e <__multadd+0x12>
 8006ab4:	b30e      	cbz	r6, 8006afa <__multadd+0x7e>
 8006ab6:	68a3      	ldr	r3, [r4, #8]
 8006ab8:	42ab      	cmp	r3, r5
 8006aba:	dc19      	bgt.n	8006af0 <__multadd+0x74>
 8006abc:	6861      	ldr	r1, [r4, #4]
 8006abe:	4638      	mov	r0, r7
 8006ac0:	3101      	adds	r1, #1
 8006ac2:	f7ff ff79 	bl	80069b8 <_Balloc>
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	b928      	cbnz	r0, 8006ad6 <__multadd+0x5a>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <__multadd+0x84>)
 8006ace:	480d      	ldr	r0, [pc, #52]	@ (8006b04 <__multadd+0x88>)
 8006ad0:	21ba      	movs	r1, #186	@ 0xba
 8006ad2:	f000 fd2f 	bl	8007534 <__assert_func>
 8006ad6:	6922      	ldr	r2, [r4, #16]
 8006ad8:	3202      	adds	r2, #2
 8006ada:	f104 010c 	add.w	r1, r4, #12
 8006ade:	0092      	lsls	r2, r2, #2
 8006ae0:	300c      	adds	r0, #12
 8006ae2:	f000 fd19 	bl	8007518 <memcpy>
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	4638      	mov	r0, r7
 8006aea:	f7ff ffa5 	bl	8006a38 <_Bfree>
 8006aee:	4644      	mov	r4, r8
 8006af0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006af4:	3501      	adds	r5, #1
 8006af6:	615e      	str	r6, [r3, #20]
 8006af8:	6125      	str	r5, [r4, #16]
 8006afa:	4620      	mov	r0, r4
 8006afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b00:	08007cd8 	.word	0x08007cd8
 8006b04:	08007ce9 	.word	0x08007ce9

08006b08 <__hi0bits>:
 8006b08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	bf36      	itet	cc
 8006b10:	0403      	lslcc	r3, r0, #16
 8006b12:	2000      	movcs	r0, #0
 8006b14:	2010      	movcc	r0, #16
 8006b16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b1a:	bf3c      	itt	cc
 8006b1c:	021b      	lslcc	r3, r3, #8
 8006b1e:	3008      	addcc	r0, #8
 8006b20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b24:	bf3c      	itt	cc
 8006b26:	011b      	lslcc	r3, r3, #4
 8006b28:	3004      	addcc	r0, #4
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2e:	bf3c      	itt	cc
 8006b30:	009b      	lslcc	r3, r3, #2
 8006b32:	3002      	addcc	r0, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	db05      	blt.n	8006b44 <__hi0bits+0x3c>
 8006b38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006b3c:	f100 0001 	add.w	r0, r0, #1
 8006b40:	bf08      	it	eq
 8006b42:	2020      	moveq	r0, #32
 8006b44:	4770      	bx	lr

08006b46 <__lo0bits>:
 8006b46:	6803      	ldr	r3, [r0, #0]
 8006b48:	4602      	mov	r2, r0
 8006b4a:	f013 0007 	ands.w	r0, r3, #7
 8006b4e:	d00b      	beq.n	8006b68 <__lo0bits+0x22>
 8006b50:	07d9      	lsls	r1, r3, #31
 8006b52:	d421      	bmi.n	8006b98 <__lo0bits+0x52>
 8006b54:	0798      	lsls	r0, r3, #30
 8006b56:	bf49      	itett	mi
 8006b58:	085b      	lsrmi	r3, r3, #1
 8006b5a:	089b      	lsrpl	r3, r3, #2
 8006b5c:	2001      	movmi	r0, #1
 8006b5e:	6013      	strmi	r3, [r2, #0]
 8006b60:	bf5c      	itt	pl
 8006b62:	6013      	strpl	r3, [r2, #0]
 8006b64:	2002      	movpl	r0, #2
 8006b66:	4770      	bx	lr
 8006b68:	b299      	uxth	r1, r3
 8006b6a:	b909      	cbnz	r1, 8006b70 <__lo0bits+0x2a>
 8006b6c:	0c1b      	lsrs	r3, r3, #16
 8006b6e:	2010      	movs	r0, #16
 8006b70:	b2d9      	uxtb	r1, r3
 8006b72:	b909      	cbnz	r1, 8006b78 <__lo0bits+0x32>
 8006b74:	3008      	adds	r0, #8
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	0719      	lsls	r1, r3, #28
 8006b7a:	bf04      	itt	eq
 8006b7c:	091b      	lsreq	r3, r3, #4
 8006b7e:	3004      	addeq	r0, #4
 8006b80:	0799      	lsls	r1, r3, #30
 8006b82:	bf04      	itt	eq
 8006b84:	089b      	lsreq	r3, r3, #2
 8006b86:	3002      	addeq	r0, #2
 8006b88:	07d9      	lsls	r1, r3, #31
 8006b8a:	d403      	bmi.n	8006b94 <__lo0bits+0x4e>
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	f100 0001 	add.w	r0, r0, #1
 8006b92:	d003      	beq.n	8006b9c <__lo0bits+0x56>
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	4770      	bx	lr
 8006b98:	2000      	movs	r0, #0
 8006b9a:	4770      	bx	lr
 8006b9c:	2020      	movs	r0, #32
 8006b9e:	4770      	bx	lr

08006ba0 <__i2b>:
 8006ba0:	b510      	push	{r4, lr}
 8006ba2:	460c      	mov	r4, r1
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	f7ff ff07 	bl	80069b8 <_Balloc>
 8006baa:	4602      	mov	r2, r0
 8006bac:	b928      	cbnz	r0, 8006bba <__i2b+0x1a>
 8006bae:	4b05      	ldr	r3, [pc, #20]	@ (8006bc4 <__i2b+0x24>)
 8006bb0:	4805      	ldr	r0, [pc, #20]	@ (8006bc8 <__i2b+0x28>)
 8006bb2:	f240 1145 	movw	r1, #325	@ 0x145
 8006bb6:	f000 fcbd 	bl	8007534 <__assert_func>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	6144      	str	r4, [r0, #20]
 8006bbe:	6103      	str	r3, [r0, #16]
 8006bc0:	bd10      	pop	{r4, pc}
 8006bc2:	bf00      	nop
 8006bc4:	08007cd8 	.word	0x08007cd8
 8006bc8:	08007ce9 	.word	0x08007ce9

08006bcc <__multiply>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	690a      	ldr	r2, [r1, #16]
 8006bd4:	6923      	ldr	r3, [r4, #16]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	bfa8      	it	ge
 8006bda:	4623      	movge	r3, r4
 8006bdc:	460f      	mov	r7, r1
 8006bde:	bfa4      	itt	ge
 8006be0:	460c      	movge	r4, r1
 8006be2:	461f      	movge	r7, r3
 8006be4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006be8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006bec:	68a3      	ldr	r3, [r4, #8]
 8006bee:	6861      	ldr	r1, [r4, #4]
 8006bf0:	eb0a 0609 	add.w	r6, sl, r9
 8006bf4:	42b3      	cmp	r3, r6
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	bfb8      	it	lt
 8006bfa:	3101      	addlt	r1, #1
 8006bfc:	f7ff fedc 	bl	80069b8 <_Balloc>
 8006c00:	b930      	cbnz	r0, 8006c10 <__multiply+0x44>
 8006c02:	4602      	mov	r2, r0
 8006c04:	4b44      	ldr	r3, [pc, #272]	@ (8006d18 <__multiply+0x14c>)
 8006c06:	4845      	ldr	r0, [pc, #276]	@ (8006d1c <__multiply+0x150>)
 8006c08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006c0c:	f000 fc92 	bl	8007534 <__assert_func>
 8006c10:	f100 0514 	add.w	r5, r0, #20
 8006c14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006c18:	462b      	mov	r3, r5
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	4543      	cmp	r3, r8
 8006c1e:	d321      	bcc.n	8006c64 <__multiply+0x98>
 8006c20:	f107 0114 	add.w	r1, r7, #20
 8006c24:	f104 0214 	add.w	r2, r4, #20
 8006c28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006c2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006c30:	9302      	str	r3, [sp, #8]
 8006c32:	1b13      	subs	r3, r2, r4
 8006c34:	3b15      	subs	r3, #21
 8006c36:	f023 0303 	bic.w	r3, r3, #3
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	f104 0715 	add.w	r7, r4, #21
 8006c40:	42ba      	cmp	r2, r7
 8006c42:	bf38      	it	cc
 8006c44:	2304      	movcc	r3, #4
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	9b02      	ldr	r3, [sp, #8]
 8006c4a:	9103      	str	r1, [sp, #12]
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	d80c      	bhi.n	8006c6a <__multiply+0x9e>
 8006c50:	2e00      	cmp	r6, #0
 8006c52:	dd03      	ble.n	8006c5c <__multiply+0x90>
 8006c54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d05b      	beq.n	8006d14 <__multiply+0x148>
 8006c5c:	6106      	str	r6, [r0, #16]
 8006c5e:	b005      	add	sp, #20
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	f843 2b04 	str.w	r2, [r3], #4
 8006c68:	e7d8      	b.n	8006c1c <__multiply+0x50>
 8006c6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006c6e:	f1ba 0f00 	cmp.w	sl, #0
 8006c72:	d024      	beq.n	8006cbe <__multiply+0xf2>
 8006c74:	f104 0e14 	add.w	lr, r4, #20
 8006c78:	46a9      	mov	r9, r5
 8006c7a:	f04f 0c00 	mov.w	ip, #0
 8006c7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c82:	f8d9 3000 	ldr.w	r3, [r9]
 8006c86:	fa1f fb87 	uxth.w	fp, r7
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006c90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006c94:	f8d9 7000 	ldr.w	r7, [r9]
 8006c98:	4463      	add	r3, ip
 8006c9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006c9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006ca2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cac:	4572      	cmp	r2, lr
 8006cae:	f849 3b04 	str.w	r3, [r9], #4
 8006cb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006cb6:	d8e2      	bhi.n	8006c7e <__multiply+0xb2>
 8006cb8:	9b01      	ldr	r3, [sp, #4]
 8006cba:	f845 c003 	str.w	ip, [r5, r3]
 8006cbe:	9b03      	ldr	r3, [sp, #12]
 8006cc0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006cc4:	3104      	adds	r1, #4
 8006cc6:	f1b9 0f00 	cmp.w	r9, #0
 8006cca:	d021      	beq.n	8006d10 <__multiply+0x144>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	f104 0c14 	add.w	ip, r4, #20
 8006cd2:	46ae      	mov	lr, r5
 8006cd4:	f04f 0a00 	mov.w	sl, #0
 8006cd8:	f8bc b000 	ldrh.w	fp, [ip]
 8006cdc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ce0:	fb09 770b 	mla	r7, r9, fp, r7
 8006ce4:	4457      	add	r7, sl
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006cec:	f84e 3b04 	str.w	r3, [lr], #4
 8006cf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cf8:	f8be 3000 	ldrh.w	r3, [lr]
 8006cfc:	fb09 330a 	mla	r3, r9, sl, r3
 8006d00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006d04:	4562      	cmp	r2, ip
 8006d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d0a:	d8e5      	bhi.n	8006cd8 <__multiply+0x10c>
 8006d0c:	9f01      	ldr	r7, [sp, #4]
 8006d0e:	51eb      	str	r3, [r5, r7]
 8006d10:	3504      	adds	r5, #4
 8006d12:	e799      	b.n	8006c48 <__multiply+0x7c>
 8006d14:	3e01      	subs	r6, #1
 8006d16:	e79b      	b.n	8006c50 <__multiply+0x84>
 8006d18:	08007cd8 	.word	0x08007cd8
 8006d1c:	08007ce9 	.word	0x08007ce9

08006d20 <__pow5mult>:
 8006d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	4615      	mov	r5, r2
 8006d26:	f012 0203 	ands.w	r2, r2, #3
 8006d2a:	4607      	mov	r7, r0
 8006d2c:	460e      	mov	r6, r1
 8006d2e:	d007      	beq.n	8006d40 <__pow5mult+0x20>
 8006d30:	4c25      	ldr	r4, [pc, #148]	@ (8006dc8 <__pow5mult+0xa8>)
 8006d32:	3a01      	subs	r2, #1
 8006d34:	2300      	movs	r3, #0
 8006d36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d3a:	f7ff fe9f 	bl	8006a7c <__multadd>
 8006d3e:	4606      	mov	r6, r0
 8006d40:	10ad      	asrs	r5, r5, #2
 8006d42:	d03d      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006d44:	69fc      	ldr	r4, [r7, #28]
 8006d46:	b97c      	cbnz	r4, 8006d68 <__pow5mult+0x48>
 8006d48:	2010      	movs	r0, #16
 8006d4a:	f7ff fd7f 	bl	800684c <malloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	61f8      	str	r0, [r7, #28]
 8006d52:	b928      	cbnz	r0, 8006d60 <__pow5mult+0x40>
 8006d54:	4b1d      	ldr	r3, [pc, #116]	@ (8006dcc <__pow5mult+0xac>)
 8006d56:	481e      	ldr	r0, [pc, #120]	@ (8006dd0 <__pow5mult+0xb0>)
 8006d58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006d5c:	f000 fbea 	bl	8007534 <__assert_func>
 8006d60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d64:	6004      	str	r4, [r0, #0]
 8006d66:	60c4      	str	r4, [r0, #12]
 8006d68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006d6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d70:	b94c      	cbnz	r4, 8006d86 <__pow5mult+0x66>
 8006d72:	f240 2171 	movw	r1, #625	@ 0x271
 8006d76:	4638      	mov	r0, r7
 8006d78:	f7ff ff12 	bl	8006ba0 <__i2b>
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d82:	4604      	mov	r4, r0
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	07eb      	lsls	r3, r5, #31
 8006d8c:	d50a      	bpl.n	8006da4 <__pow5mult+0x84>
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4622      	mov	r2, r4
 8006d92:	4638      	mov	r0, r7
 8006d94:	f7ff ff1a 	bl	8006bcc <__multiply>
 8006d98:	4631      	mov	r1, r6
 8006d9a:	4680      	mov	r8, r0
 8006d9c:	4638      	mov	r0, r7
 8006d9e:	f7ff fe4b 	bl	8006a38 <_Bfree>
 8006da2:	4646      	mov	r6, r8
 8006da4:	106d      	asrs	r5, r5, #1
 8006da6:	d00b      	beq.n	8006dc0 <__pow5mult+0xa0>
 8006da8:	6820      	ldr	r0, [r4, #0]
 8006daa:	b938      	cbnz	r0, 8006dbc <__pow5mult+0x9c>
 8006dac:	4622      	mov	r2, r4
 8006dae:	4621      	mov	r1, r4
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff ff0b 	bl	8006bcc <__multiply>
 8006db6:	6020      	str	r0, [r4, #0]
 8006db8:	f8c0 9000 	str.w	r9, [r0]
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	e7e4      	b.n	8006d8a <__pow5mult+0x6a>
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dc6:	bf00      	nop
 8006dc8:	08007d44 	.word	0x08007d44
 8006dcc:	08007c69 	.word	0x08007c69
 8006dd0:	08007ce9 	.word	0x08007ce9

08006dd4 <__lshift>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	460c      	mov	r4, r1
 8006dda:	6849      	ldr	r1, [r1, #4]
 8006ddc:	6923      	ldr	r3, [r4, #16]
 8006dde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006de2:	68a3      	ldr	r3, [r4, #8]
 8006de4:	4607      	mov	r7, r0
 8006de6:	4691      	mov	r9, r2
 8006de8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006dec:	f108 0601 	add.w	r6, r8, #1
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	db0b      	blt.n	8006e0c <__lshift+0x38>
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff fddf 	bl	80069b8 <_Balloc>
 8006dfa:	4605      	mov	r5, r0
 8006dfc:	b948      	cbnz	r0, 8006e12 <__lshift+0x3e>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b28      	ldr	r3, [pc, #160]	@ (8006ea4 <__lshift+0xd0>)
 8006e02:	4829      	ldr	r0, [pc, #164]	@ (8006ea8 <__lshift+0xd4>)
 8006e04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006e08:	f000 fb94 	bl	8007534 <__assert_func>
 8006e0c:	3101      	adds	r1, #1
 8006e0e:	005b      	lsls	r3, r3, #1
 8006e10:	e7ee      	b.n	8006df0 <__lshift+0x1c>
 8006e12:	2300      	movs	r3, #0
 8006e14:	f100 0114 	add.w	r1, r0, #20
 8006e18:	f100 0210 	add.w	r2, r0, #16
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	4553      	cmp	r3, sl
 8006e20:	db33      	blt.n	8006e8a <__lshift+0xb6>
 8006e22:	6920      	ldr	r0, [r4, #16]
 8006e24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e28:	f104 0314 	add.w	r3, r4, #20
 8006e2c:	f019 091f 	ands.w	r9, r9, #31
 8006e30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006e34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006e38:	d02b      	beq.n	8006e92 <__lshift+0xbe>
 8006e3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006e3e:	468a      	mov	sl, r1
 8006e40:	2200      	movs	r2, #0
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	fa00 f009 	lsl.w	r0, r0, r9
 8006e48:	4310      	orrs	r0, r2
 8006e4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006e4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e52:	459c      	cmp	ip, r3
 8006e54:	fa22 f20e 	lsr.w	r2, r2, lr
 8006e58:	d8f3      	bhi.n	8006e42 <__lshift+0x6e>
 8006e5a:	ebac 0304 	sub.w	r3, ip, r4
 8006e5e:	3b15      	subs	r3, #21
 8006e60:	f023 0303 	bic.w	r3, r3, #3
 8006e64:	3304      	adds	r3, #4
 8006e66:	f104 0015 	add.w	r0, r4, #21
 8006e6a:	4584      	cmp	ip, r0
 8006e6c:	bf38      	it	cc
 8006e6e:	2304      	movcc	r3, #4
 8006e70:	50ca      	str	r2, [r1, r3]
 8006e72:	b10a      	cbz	r2, 8006e78 <__lshift+0xa4>
 8006e74:	f108 0602 	add.w	r6, r8, #2
 8006e78:	3e01      	subs	r6, #1
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	612e      	str	r6, [r5, #16]
 8006e7e:	4621      	mov	r1, r4
 8006e80:	f7ff fdda 	bl	8006a38 <_Bfree>
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006e8e:	3301      	adds	r3, #1
 8006e90:	e7c5      	b.n	8006e1e <__lshift+0x4a>
 8006e92:	3904      	subs	r1, #4
 8006e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e98:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e9c:	459c      	cmp	ip, r3
 8006e9e:	d8f9      	bhi.n	8006e94 <__lshift+0xc0>
 8006ea0:	e7ea      	b.n	8006e78 <__lshift+0xa4>
 8006ea2:	bf00      	nop
 8006ea4:	08007cd8 	.word	0x08007cd8
 8006ea8:	08007ce9 	.word	0x08007ce9

08006eac <__mcmp>:
 8006eac:	690a      	ldr	r2, [r1, #16]
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6900      	ldr	r0, [r0, #16]
 8006eb2:	1a80      	subs	r0, r0, r2
 8006eb4:	b530      	push	{r4, r5, lr}
 8006eb6:	d10e      	bne.n	8006ed6 <__mcmp+0x2a>
 8006eb8:	3314      	adds	r3, #20
 8006eba:	3114      	adds	r1, #20
 8006ebc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006ec0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006ec4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006ec8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ecc:	4295      	cmp	r5, r2
 8006ece:	d003      	beq.n	8006ed8 <__mcmp+0x2c>
 8006ed0:	d205      	bcs.n	8006ede <__mcmp+0x32>
 8006ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed6:	bd30      	pop	{r4, r5, pc}
 8006ed8:	42a3      	cmp	r3, r4
 8006eda:	d3f3      	bcc.n	8006ec4 <__mcmp+0x18>
 8006edc:	e7fb      	b.n	8006ed6 <__mcmp+0x2a>
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7f9      	b.n	8006ed6 <__mcmp+0x2a>
	...

08006ee4 <__mdiff>:
 8006ee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	4689      	mov	r9, r1
 8006eea:	4606      	mov	r6, r0
 8006eec:	4611      	mov	r1, r2
 8006eee:	4648      	mov	r0, r9
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	f7ff ffdb 	bl	8006eac <__mcmp>
 8006ef6:	1e05      	subs	r5, r0, #0
 8006ef8:	d112      	bne.n	8006f20 <__mdiff+0x3c>
 8006efa:	4629      	mov	r1, r5
 8006efc:	4630      	mov	r0, r6
 8006efe:	f7ff fd5b 	bl	80069b8 <_Balloc>
 8006f02:	4602      	mov	r2, r0
 8006f04:	b928      	cbnz	r0, 8006f12 <__mdiff+0x2e>
 8006f06:	4b3f      	ldr	r3, [pc, #252]	@ (8007004 <__mdiff+0x120>)
 8006f08:	f240 2137 	movw	r1, #567	@ 0x237
 8006f0c:	483e      	ldr	r0, [pc, #248]	@ (8007008 <__mdiff+0x124>)
 8006f0e:	f000 fb11 	bl	8007534 <__assert_func>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006f18:	4610      	mov	r0, r2
 8006f1a:	b003      	add	sp, #12
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	bfbc      	itt	lt
 8006f22:	464b      	movlt	r3, r9
 8006f24:	46a1      	movlt	r9, r4
 8006f26:	4630      	mov	r0, r6
 8006f28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006f2c:	bfba      	itte	lt
 8006f2e:	461c      	movlt	r4, r3
 8006f30:	2501      	movlt	r5, #1
 8006f32:	2500      	movge	r5, #0
 8006f34:	f7ff fd40 	bl	80069b8 <_Balloc>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	b918      	cbnz	r0, 8006f44 <__mdiff+0x60>
 8006f3c:	4b31      	ldr	r3, [pc, #196]	@ (8007004 <__mdiff+0x120>)
 8006f3e:	f240 2145 	movw	r1, #581	@ 0x245
 8006f42:	e7e3      	b.n	8006f0c <__mdiff+0x28>
 8006f44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006f48:	6926      	ldr	r6, [r4, #16]
 8006f4a:	60c5      	str	r5, [r0, #12]
 8006f4c:	f109 0310 	add.w	r3, r9, #16
 8006f50:	f109 0514 	add.w	r5, r9, #20
 8006f54:	f104 0e14 	add.w	lr, r4, #20
 8006f58:	f100 0b14 	add.w	fp, r0, #20
 8006f5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006f60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006f64:	9301      	str	r3, [sp, #4]
 8006f66:	46d9      	mov	r9, fp
 8006f68:	f04f 0c00 	mov.w	ip, #0
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006f72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	fa1f f38a 	uxth.w	r3, sl
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	b283      	uxth	r3, r0
 8006f80:	1acb      	subs	r3, r1, r3
 8006f82:	0c00      	lsrs	r0, r0, #16
 8006f84:	4463      	add	r3, ip
 8006f86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006f8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006f94:	4576      	cmp	r6, lr
 8006f96:	f849 3b04 	str.w	r3, [r9], #4
 8006f9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006f9e:	d8e5      	bhi.n	8006f6c <__mdiff+0x88>
 8006fa0:	1b33      	subs	r3, r6, r4
 8006fa2:	3b15      	subs	r3, #21
 8006fa4:	f023 0303 	bic.w	r3, r3, #3
 8006fa8:	3415      	adds	r4, #21
 8006faa:	3304      	adds	r3, #4
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	bf38      	it	cc
 8006fb0:	2304      	movcc	r3, #4
 8006fb2:	441d      	add	r5, r3
 8006fb4:	445b      	add	r3, fp
 8006fb6:	461e      	mov	r6, r3
 8006fb8:	462c      	mov	r4, r5
 8006fba:	4544      	cmp	r4, r8
 8006fbc:	d30e      	bcc.n	8006fdc <__mdiff+0xf8>
 8006fbe:	f108 0103 	add.w	r1, r8, #3
 8006fc2:	1b49      	subs	r1, r1, r5
 8006fc4:	f021 0103 	bic.w	r1, r1, #3
 8006fc8:	3d03      	subs	r5, #3
 8006fca:	45a8      	cmp	r8, r5
 8006fcc:	bf38      	it	cc
 8006fce:	2100      	movcc	r1, #0
 8006fd0:	440b      	add	r3, r1
 8006fd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fd6:	b191      	cbz	r1, 8006ffe <__mdiff+0x11a>
 8006fd8:	6117      	str	r7, [r2, #16]
 8006fda:	e79d      	b.n	8006f18 <__mdiff+0x34>
 8006fdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006fe0:	46e6      	mov	lr, ip
 8006fe2:	0c08      	lsrs	r0, r1, #16
 8006fe4:	fa1c fc81 	uxtah	ip, ip, r1
 8006fe8:	4471      	add	r1, lr
 8006fea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006fee:	b289      	uxth	r1, r1
 8006ff0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ff4:	f846 1b04 	str.w	r1, [r6], #4
 8006ff8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ffc:	e7dd      	b.n	8006fba <__mdiff+0xd6>
 8006ffe:	3f01      	subs	r7, #1
 8007000:	e7e7      	b.n	8006fd2 <__mdiff+0xee>
 8007002:	bf00      	nop
 8007004:	08007cd8 	.word	0x08007cd8
 8007008:	08007ce9 	.word	0x08007ce9

0800700c <__d2b>:
 800700c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007010:	460f      	mov	r7, r1
 8007012:	2101      	movs	r1, #1
 8007014:	ec59 8b10 	vmov	r8, r9, d0
 8007018:	4616      	mov	r6, r2
 800701a:	f7ff fccd 	bl	80069b8 <_Balloc>
 800701e:	4604      	mov	r4, r0
 8007020:	b930      	cbnz	r0, 8007030 <__d2b+0x24>
 8007022:	4602      	mov	r2, r0
 8007024:	4b23      	ldr	r3, [pc, #140]	@ (80070b4 <__d2b+0xa8>)
 8007026:	4824      	ldr	r0, [pc, #144]	@ (80070b8 <__d2b+0xac>)
 8007028:	f240 310f 	movw	r1, #783	@ 0x30f
 800702c:	f000 fa82 	bl	8007534 <__assert_func>
 8007030:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007034:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007038:	b10d      	cbz	r5, 800703e <__d2b+0x32>
 800703a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800703e:	9301      	str	r3, [sp, #4]
 8007040:	f1b8 0300 	subs.w	r3, r8, #0
 8007044:	d023      	beq.n	800708e <__d2b+0x82>
 8007046:	4668      	mov	r0, sp
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	f7ff fd7c 	bl	8006b46 <__lo0bits>
 800704e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007052:	b1d0      	cbz	r0, 800708a <__d2b+0x7e>
 8007054:	f1c0 0320 	rsb	r3, r0, #32
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	430b      	orrs	r3, r1
 800705e:	40c2      	lsrs	r2, r0
 8007060:	6163      	str	r3, [r4, #20]
 8007062:	9201      	str	r2, [sp, #4]
 8007064:	9b01      	ldr	r3, [sp, #4]
 8007066:	61a3      	str	r3, [r4, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	bf0c      	ite	eq
 800706c:	2201      	moveq	r2, #1
 800706e:	2202      	movne	r2, #2
 8007070:	6122      	str	r2, [r4, #16]
 8007072:	b1a5      	cbz	r5, 800709e <__d2b+0x92>
 8007074:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007078:	4405      	add	r5, r0
 800707a:	603d      	str	r5, [r7, #0]
 800707c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007080:	6030      	str	r0, [r6, #0]
 8007082:	4620      	mov	r0, r4
 8007084:	b003      	add	sp, #12
 8007086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800708a:	6161      	str	r1, [r4, #20]
 800708c:	e7ea      	b.n	8007064 <__d2b+0x58>
 800708e:	a801      	add	r0, sp, #4
 8007090:	f7ff fd59 	bl	8006b46 <__lo0bits>
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	6163      	str	r3, [r4, #20]
 8007098:	3020      	adds	r0, #32
 800709a:	2201      	movs	r2, #1
 800709c:	e7e8      	b.n	8007070 <__d2b+0x64>
 800709e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80070a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80070a6:	6038      	str	r0, [r7, #0]
 80070a8:	6918      	ldr	r0, [r3, #16]
 80070aa:	f7ff fd2d 	bl	8006b08 <__hi0bits>
 80070ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80070b2:	e7e5      	b.n	8007080 <__d2b+0x74>
 80070b4:	08007cd8 	.word	0x08007cd8
 80070b8:	08007ce9 	.word	0x08007ce9

080070bc <__ssputs_r>:
 80070bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c0:	688e      	ldr	r6, [r1, #8]
 80070c2:	461f      	mov	r7, r3
 80070c4:	42be      	cmp	r6, r7
 80070c6:	680b      	ldr	r3, [r1, #0]
 80070c8:	4682      	mov	sl, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	4690      	mov	r8, r2
 80070ce:	d82d      	bhi.n	800712c <__ssputs_r+0x70>
 80070d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80070d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80070d8:	d026      	beq.n	8007128 <__ssputs_r+0x6c>
 80070da:	6965      	ldr	r5, [r4, #20]
 80070dc:	6909      	ldr	r1, [r1, #16]
 80070de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070e2:	eba3 0901 	sub.w	r9, r3, r1
 80070e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070ea:	1c7b      	adds	r3, r7, #1
 80070ec:	444b      	add	r3, r9
 80070ee:	106d      	asrs	r5, r5, #1
 80070f0:	429d      	cmp	r5, r3
 80070f2:	bf38      	it	cc
 80070f4:	461d      	movcc	r5, r3
 80070f6:	0553      	lsls	r3, r2, #21
 80070f8:	d527      	bpl.n	800714a <__ssputs_r+0x8e>
 80070fa:	4629      	mov	r1, r5
 80070fc:	f7ff fbd0 	bl	80068a0 <_malloc_r>
 8007100:	4606      	mov	r6, r0
 8007102:	b360      	cbz	r0, 800715e <__ssputs_r+0xa2>
 8007104:	6921      	ldr	r1, [r4, #16]
 8007106:	464a      	mov	r2, r9
 8007108:	f000 fa06 	bl	8007518 <memcpy>
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007116:	81a3      	strh	r3, [r4, #12]
 8007118:	6126      	str	r6, [r4, #16]
 800711a:	6165      	str	r5, [r4, #20]
 800711c:	444e      	add	r6, r9
 800711e:	eba5 0509 	sub.w	r5, r5, r9
 8007122:	6026      	str	r6, [r4, #0]
 8007124:	60a5      	str	r5, [r4, #8]
 8007126:	463e      	mov	r6, r7
 8007128:	42be      	cmp	r6, r7
 800712a:	d900      	bls.n	800712e <__ssputs_r+0x72>
 800712c:	463e      	mov	r6, r7
 800712e:	6820      	ldr	r0, [r4, #0]
 8007130:	4632      	mov	r2, r6
 8007132:	4641      	mov	r1, r8
 8007134:	f000 f9c6 	bl	80074c4 <memmove>
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	1b9b      	subs	r3, r3, r6
 800713c:	60a3      	str	r3, [r4, #8]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	4433      	add	r3, r6
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	2000      	movs	r0, #0
 8007146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800714a:	462a      	mov	r2, r5
 800714c:	f000 fa36 	bl	80075bc <_realloc_r>
 8007150:	4606      	mov	r6, r0
 8007152:	2800      	cmp	r0, #0
 8007154:	d1e0      	bne.n	8007118 <__ssputs_r+0x5c>
 8007156:	6921      	ldr	r1, [r4, #16]
 8007158:	4650      	mov	r0, sl
 800715a:	f7ff fb2d 	bl	80067b8 <_free_r>
 800715e:	230c      	movs	r3, #12
 8007160:	f8ca 3000 	str.w	r3, [sl]
 8007164:	89a3      	ldrh	r3, [r4, #12]
 8007166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	f04f 30ff 	mov.w	r0, #4294967295
 8007170:	e7e9      	b.n	8007146 <__ssputs_r+0x8a>
	...

08007174 <_svfiprintf_r>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	4698      	mov	r8, r3
 800717a:	898b      	ldrh	r3, [r1, #12]
 800717c:	061b      	lsls	r3, r3, #24
 800717e:	b09d      	sub	sp, #116	@ 0x74
 8007180:	4607      	mov	r7, r0
 8007182:	460d      	mov	r5, r1
 8007184:	4614      	mov	r4, r2
 8007186:	d510      	bpl.n	80071aa <_svfiprintf_r+0x36>
 8007188:	690b      	ldr	r3, [r1, #16]
 800718a:	b973      	cbnz	r3, 80071aa <_svfiprintf_r+0x36>
 800718c:	2140      	movs	r1, #64	@ 0x40
 800718e:	f7ff fb87 	bl	80068a0 <_malloc_r>
 8007192:	6028      	str	r0, [r5, #0]
 8007194:	6128      	str	r0, [r5, #16]
 8007196:	b930      	cbnz	r0, 80071a6 <_svfiprintf_r+0x32>
 8007198:	230c      	movs	r3, #12
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	b01d      	add	sp, #116	@ 0x74
 80071a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a6:	2340      	movs	r3, #64	@ 0x40
 80071a8:	616b      	str	r3, [r5, #20]
 80071aa:	2300      	movs	r3, #0
 80071ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ae:	2320      	movs	r3, #32
 80071b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80071b8:	2330      	movs	r3, #48	@ 0x30
 80071ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007358 <_svfiprintf_r+0x1e4>
 80071be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071c2:	f04f 0901 	mov.w	r9, #1
 80071c6:	4623      	mov	r3, r4
 80071c8:	469a      	mov	sl, r3
 80071ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071ce:	b10a      	cbz	r2, 80071d4 <_svfiprintf_r+0x60>
 80071d0:	2a25      	cmp	r2, #37	@ 0x25
 80071d2:	d1f9      	bne.n	80071c8 <_svfiprintf_r+0x54>
 80071d4:	ebba 0b04 	subs.w	fp, sl, r4
 80071d8:	d00b      	beq.n	80071f2 <_svfiprintf_r+0x7e>
 80071da:	465b      	mov	r3, fp
 80071dc:	4622      	mov	r2, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	4638      	mov	r0, r7
 80071e2:	f7ff ff6b 	bl	80070bc <__ssputs_r>
 80071e6:	3001      	adds	r0, #1
 80071e8:	f000 80a7 	beq.w	800733a <_svfiprintf_r+0x1c6>
 80071ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ee:	445a      	add	r2, fp
 80071f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80071f2:	f89a 3000 	ldrb.w	r3, [sl]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 809f 	beq.w	800733a <_svfiprintf_r+0x1c6>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007206:	f10a 0a01 	add.w	sl, sl, #1
 800720a:	9304      	str	r3, [sp, #16]
 800720c:	9307      	str	r3, [sp, #28]
 800720e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007212:	931a      	str	r3, [sp, #104]	@ 0x68
 8007214:	4654      	mov	r4, sl
 8007216:	2205      	movs	r2, #5
 8007218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721c:	484e      	ldr	r0, [pc, #312]	@ (8007358 <_svfiprintf_r+0x1e4>)
 800721e:	f7f8 ffd7 	bl	80001d0 <memchr>
 8007222:	9a04      	ldr	r2, [sp, #16]
 8007224:	b9d8      	cbnz	r0, 800725e <_svfiprintf_r+0xea>
 8007226:	06d0      	lsls	r0, r2, #27
 8007228:	bf44      	itt	mi
 800722a:	2320      	movmi	r3, #32
 800722c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007230:	0711      	lsls	r1, r2, #28
 8007232:	bf44      	itt	mi
 8007234:	232b      	movmi	r3, #43	@ 0x2b
 8007236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800723a:	f89a 3000 	ldrb.w	r3, [sl]
 800723e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007240:	d015      	beq.n	800726e <_svfiprintf_r+0xfa>
 8007242:	9a07      	ldr	r2, [sp, #28]
 8007244:	4654      	mov	r4, sl
 8007246:	2000      	movs	r0, #0
 8007248:	f04f 0c0a 	mov.w	ip, #10
 800724c:	4621      	mov	r1, r4
 800724e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007252:	3b30      	subs	r3, #48	@ 0x30
 8007254:	2b09      	cmp	r3, #9
 8007256:	d94b      	bls.n	80072f0 <_svfiprintf_r+0x17c>
 8007258:	b1b0      	cbz	r0, 8007288 <_svfiprintf_r+0x114>
 800725a:	9207      	str	r2, [sp, #28]
 800725c:	e014      	b.n	8007288 <_svfiprintf_r+0x114>
 800725e:	eba0 0308 	sub.w	r3, r0, r8
 8007262:	fa09 f303 	lsl.w	r3, r9, r3
 8007266:	4313      	orrs	r3, r2
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	46a2      	mov	sl, r4
 800726c:	e7d2      	b.n	8007214 <_svfiprintf_r+0xa0>
 800726e:	9b03      	ldr	r3, [sp, #12]
 8007270:	1d19      	adds	r1, r3, #4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	9103      	str	r1, [sp, #12]
 8007276:	2b00      	cmp	r3, #0
 8007278:	bfbb      	ittet	lt
 800727a:	425b      	neglt	r3, r3
 800727c:	f042 0202 	orrlt.w	r2, r2, #2
 8007280:	9307      	strge	r3, [sp, #28]
 8007282:	9307      	strlt	r3, [sp, #28]
 8007284:	bfb8      	it	lt
 8007286:	9204      	strlt	r2, [sp, #16]
 8007288:	7823      	ldrb	r3, [r4, #0]
 800728a:	2b2e      	cmp	r3, #46	@ 0x2e
 800728c:	d10a      	bne.n	80072a4 <_svfiprintf_r+0x130>
 800728e:	7863      	ldrb	r3, [r4, #1]
 8007290:	2b2a      	cmp	r3, #42	@ 0x2a
 8007292:	d132      	bne.n	80072fa <_svfiprintf_r+0x186>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	1d1a      	adds	r2, r3, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	9203      	str	r2, [sp, #12]
 800729c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072a0:	3402      	adds	r4, #2
 80072a2:	9305      	str	r3, [sp, #20]
 80072a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007368 <_svfiprintf_r+0x1f4>
 80072a8:	7821      	ldrb	r1, [r4, #0]
 80072aa:	2203      	movs	r2, #3
 80072ac:	4650      	mov	r0, sl
 80072ae:	f7f8 ff8f 	bl	80001d0 <memchr>
 80072b2:	b138      	cbz	r0, 80072c4 <_svfiprintf_r+0x150>
 80072b4:	9b04      	ldr	r3, [sp, #16]
 80072b6:	eba0 000a 	sub.w	r0, r0, sl
 80072ba:	2240      	movs	r2, #64	@ 0x40
 80072bc:	4082      	lsls	r2, r0
 80072be:	4313      	orrs	r3, r2
 80072c0:	3401      	adds	r4, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c8:	4824      	ldr	r0, [pc, #144]	@ (800735c <_svfiprintf_r+0x1e8>)
 80072ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072ce:	2206      	movs	r2, #6
 80072d0:	f7f8 ff7e 	bl	80001d0 <memchr>
 80072d4:	2800      	cmp	r0, #0
 80072d6:	d036      	beq.n	8007346 <_svfiprintf_r+0x1d2>
 80072d8:	4b21      	ldr	r3, [pc, #132]	@ (8007360 <_svfiprintf_r+0x1ec>)
 80072da:	bb1b      	cbnz	r3, 8007324 <_svfiprintf_r+0x1b0>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	3307      	adds	r3, #7
 80072e0:	f023 0307 	bic.w	r3, r3, #7
 80072e4:	3308      	adds	r3, #8
 80072e6:	9303      	str	r3, [sp, #12]
 80072e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072ea:	4433      	add	r3, r6
 80072ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ee:	e76a      	b.n	80071c6 <_svfiprintf_r+0x52>
 80072f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80072f4:	460c      	mov	r4, r1
 80072f6:	2001      	movs	r0, #1
 80072f8:	e7a8      	b.n	800724c <_svfiprintf_r+0xd8>
 80072fa:	2300      	movs	r3, #0
 80072fc:	3401      	adds	r4, #1
 80072fe:	9305      	str	r3, [sp, #20]
 8007300:	4619      	mov	r1, r3
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	4620      	mov	r0, r4
 8007308:	f810 2b01 	ldrb.w	r2, [r0], #1
 800730c:	3a30      	subs	r2, #48	@ 0x30
 800730e:	2a09      	cmp	r2, #9
 8007310:	d903      	bls.n	800731a <_svfiprintf_r+0x1a6>
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0c6      	beq.n	80072a4 <_svfiprintf_r+0x130>
 8007316:	9105      	str	r1, [sp, #20]
 8007318:	e7c4      	b.n	80072a4 <_svfiprintf_r+0x130>
 800731a:	fb0c 2101 	mla	r1, ip, r1, r2
 800731e:	4604      	mov	r4, r0
 8007320:	2301      	movs	r3, #1
 8007322:	e7f0      	b.n	8007306 <_svfiprintf_r+0x192>
 8007324:	ab03      	add	r3, sp, #12
 8007326:	9300      	str	r3, [sp, #0]
 8007328:	462a      	mov	r2, r5
 800732a:	4b0e      	ldr	r3, [pc, #56]	@ (8007364 <_svfiprintf_r+0x1f0>)
 800732c:	a904      	add	r1, sp, #16
 800732e:	4638      	mov	r0, r7
 8007330:	f7fd fe98 	bl	8005064 <_printf_float>
 8007334:	1c42      	adds	r2, r0, #1
 8007336:	4606      	mov	r6, r0
 8007338:	d1d6      	bne.n	80072e8 <_svfiprintf_r+0x174>
 800733a:	89ab      	ldrh	r3, [r5, #12]
 800733c:	065b      	lsls	r3, r3, #25
 800733e:	f53f af2d 	bmi.w	800719c <_svfiprintf_r+0x28>
 8007342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007344:	e72c      	b.n	80071a0 <_svfiprintf_r+0x2c>
 8007346:	ab03      	add	r3, sp, #12
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	462a      	mov	r2, r5
 800734c:	4b05      	ldr	r3, [pc, #20]	@ (8007364 <_svfiprintf_r+0x1f0>)
 800734e:	a904      	add	r1, sp, #16
 8007350:	4638      	mov	r0, r7
 8007352:	f7fe f91f 	bl	8005594 <_printf_i>
 8007356:	e7ed      	b.n	8007334 <_svfiprintf_r+0x1c0>
 8007358:	08007e40 	.word	0x08007e40
 800735c:	08007e4a 	.word	0x08007e4a
 8007360:	08005065 	.word	0x08005065
 8007364:	080070bd 	.word	0x080070bd
 8007368:	08007e46 	.word	0x08007e46

0800736c <__sflush_r>:
 800736c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007374:	0716      	lsls	r6, r2, #28
 8007376:	4605      	mov	r5, r0
 8007378:	460c      	mov	r4, r1
 800737a:	d454      	bmi.n	8007426 <__sflush_r+0xba>
 800737c:	684b      	ldr	r3, [r1, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	dc02      	bgt.n	8007388 <__sflush_r+0x1c>
 8007382:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007384:	2b00      	cmp	r3, #0
 8007386:	dd48      	ble.n	800741a <__sflush_r+0xae>
 8007388:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800738a:	2e00      	cmp	r6, #0
 800738c:	d045      	beq.n	800741a <__sflush_r+0xae>
 800738e:	2300      	movs	r3, #0
 8007390:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007394:	682f      	ldr	r7, [r5, #0]
 8007396:	6a21      	ldr	r1, [r4, #32]
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	d030      	beq.n	80073fe <__sflush_r+0x92>
 800739c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800739e:	89a3      	ldrh	r3, [r4, #12]
 80073a0:	0759      	lsls	r1, r3, #29
 80073a2:	d505      	bpl.n	80073b0 <__sflush_r+0x44>
 80073a4:	6863      	ldr	r3, [r4, #4]
 80073a6:	1ad2      	subs	r2, r2, r3
 80073a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80073aa:	b10b      	cbz	r3, 80073b0 <__sflush_r+0x44>
 80073ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80073ae:	1ad2      	subs	r2, r2, r3
 80073b0:	2300      	movs	r3, #0
 80073b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80073b4:	6a21      	ldr	r1, [r4, #32]
 80073b6:	4628      	mov	r0, r5
 80073b8:	47b0      	blx	r6
 80073ba:	1c43      	adds	r3, r0, #1
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	d106      	bne.n	80073ce <__sflush_r+0x62>
 80073c0:	6829      	ldr	r1, [r5, #0]
 80073c2:	291d      	cmp	r1, #29
 80073c4:	d82b      	bhi.n	800741e <__sflush_r+0xb2>
 80073c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007470 <__sflush_r+0x104>)
 80073c8:	410a      	asrs	r2, r1
 80073ca:	07d6      	lsls	r6, r2, #31
 80073cc:	d427      	bmi.n	800741e <__sflush_r+0xb2>
 80073ce:	2200      	movs	r2, #0
 80073d0:	6062      	str	r2, [r4, #4]
 80073d2:	04d9      	lsls	r1, r3, #19
 80073d4:	6922      	ldr	r2, [r4, #16]
 80073d6:	6022      	str	r2, [r4, #0]
 80073d8:	d504      	bpl.n	80073e4 <__sflush_r+0x78>
 80073da:	1c42      	adds	r2, r0, #1
 80073dc:	d101      	bne.n	80073e2 <__sflush_r+0x76>
 80073de:	682b      	ldr	r3, [r5, #0]
 80073e0:	b903      	cbnz	r3, 80073e4 <__sflush_r+0x78>
 80073e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80073e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073e6:	602f      	str	r7, [r5, #0]
 80073e8:	b1b9      	cbz	r1, 800741a <__sflush_r+0xae>
 80073ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073ee:	4299      	cmp	r1, r3
 80073f0:	d002      	beq.n	80073f8 <__sflush_r+0x8c>
 80073f2:	4628      	mov	r0, r5
 80073f4:	f7ff f9e0 	bl	80067b8 <_free_r>
 80073f8:	2300      	movs	r3, #0
 80073fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80073fc:	e00d      	b.n	800741a <__sflush_r+0xae>
 80073fe:	2301      	movs	r3, #1
 8007400:	4628      	mov	r0, r5
 8007402:	47b0      	blx	r6
 8007404:	4602      	mov	r2, r0
 8007406:	1c50      	adds	r0, r2, #1
 8007408:	d1c9      	bne.n	800739e <__sflush_r+0x32>
 800740a:	682b      	ldr	r3, [r5, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0c6      	beq.n	800739e <__sflush_r+0x32>
 8007410:	2b1d      	cmp	r3, #29
 8007412:	d001      	beq.n	8007418 <__sflush_r+0xac>
 8007414:	2b16      	cmp	r3, #22
 8007416:	d11e      	bne.n	8007456 <__sflush_r+0xea>
 8007418:	602f      	str	r7, [r5, #0]
 800741a:	2000      	movs	r0, #0
 800741c:	e022      	b.n	8007464 <__sflush_r+0xf8>
 800741e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007422:	b21b      	sxth	r3, r3
 8007424:	e01b      	b.n	800745e <__sflush_r+0xf2>
 8007426:	690f      	ldr	r7, [r1, #16]
 8007428:	2f00      	cmp	r7, #0
 800742a:	d0f6      	beq.n	800741a <__sflush_r+0xae>
 800742c:	0793      	lsls	r3, r2, #30
 800742e:	680e      	ldr	r6, [r1, #0]
 8007430:	bf08      	it	eq
 8007432:	694b      	ldreq	r3, [r1, #20]
 8007434:	600f      	str	r7, [r1, #0]
 8007436:	bf18      	it	ne
 8007438:	2300      	movne	r3, #0
 800743a:	eba6 0807 	sub.w	r8, r6, r7
 800743e:	608b      	str	r3, [r1, #8]
 8007440:	f1b8 0f00 	cmp.w	r8, #0
 8007444:	dde9      	ble.n	800741a <__sflush_r+0xae>
 8007446:	6a21      	ldr	r1, [r4, #32]
 8007448:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800744a:	4643      	mov	r3, r8
 800744c:	463a      	mov	r2, r7
 800744e:	4628      	mov	r0, r5
 8007450:	47b0      	blx	r6
 8007452:	2800      	cmp	r0, #0
 8007454:	dc08      	bgt.n	8007468 <__sflush_r+0xfc>
 8007456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800745e:	81a3      	strh	r3, [r4, #12]
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007468:	4407      	add	r7, r0
 800746a:	eba8 0800 	sub.w	r8, r8, r0
 800746e:	e7e7      	b.n	8007440 <__sflush_r+0xd4>
 8007470:	dfbffffe 	.word	0xdfbffffe

08007474 <_fflush_r>:
 8007474:	b538      	push	{r3, r4, r5, lr}
 8007476:	690b      	ldr	r3, [r1, #16]
 8007478:	4605      	mov	r5, r0
 800747a:	460c      	mov	r4, r1
 800747c:	b913      	cbnz	r3, 8007484 <_fflush_r+0x10>
 800747e:	2500      	movs	r5, #0
 8007480:	4628      	mov	r0, r5
 8007482:	bd38      	pop	{r3, r4, r5, pc}
 8007484:	b118      	cbz	r0, 800748e <_fflush_r+0x1a>
 8007486:	6a03      	ldr	r3, [r0, #32]
 8007488:	b90b      	cbnz	r3, 800748e <_fflush_r+0x1a>
 800748a:	f7fe fa2f 	bl	80058ec <__sinit>
 800748e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d0f3      	beq.n	800747e <_fflush_r+0xa>
 8007496:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007498:	07d0      	lsls	r0, r2, #31
 800749a:	d404      	bmi.n	80074a6 <_fflush_r+0x32>
 800749c:	0599      	lsls	r1, r3, #22
 800749e:	d402      	bmi.n	80074a6 <_fflush_r+0x32>
 80074a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074a2:	f7fe fb3a 	bl	8005b1a <__retarget_lock_acquire_recursive>
 80074a6:	4628      	mov	r0, r5
 80074a8:	4621      	mov	r1, r4
 80074aa:	f7ff ff5f 	bl	800736c <__sflush_r>
 80074ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074b0:	07da      	lsls	r2, r3, #31
 80074b2:	4605      	mov	r5, r0
 80074b4:	d4e4      	bmi.n	8007480 <_fflush_r+0xc>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	059b      	lsls	r3, r3, #22
 80074ba:	d4e1      	bmi.n	8007480 <_fflush_r+0xc>
 80074bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80074be:	f7fe fb2d 	bl	8005b1c <__retarget_lock_release_recursive>
 80074c2:	e7dd      	b.n	8007480 <_fflush_r+0xc>

080074c4 <memmove>:
 80074c4:	4288      	cmp	r0, r1
 80074c6:	b510      	push	{r4, lr}
 80074c8:	eb01 0402 	add.w	r4, r1, r2
 80074cc:	d902      	bls.n	80074d4 <memmove+0x10>
 80074ce:	4284      	cmp	r4, r0
 80074d0:	4623      	mov	r3, r4
 80074d2:	d807      	bhi.n	80074e4 <memmove+0x20>
 80074d4:	1e43      	subs	r3, r0, #1
 80074d6:	42a1      	cmp	r1, r4
 80074d8:	d008      	beq.n	80074ec <memmove+0x28>
 80074da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80074e2:	e7f8      	b.n	80074d6 <memmove+0x12>
 80074e4:	4402      	add	r2, r0
 80074e6:	4601      	mov	r1, r0
 80074e8:	428a      	cmp	r2, r1
 80074ea:	d100      	bne.n	80074ee <memmove+0x2a>
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80074f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80074f6:	e7f7      	b.n	80074e8 <memmove+0x24>

080074f8 <_sbrk_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d06      	ldr	r5, [pc, #24]	@ (8007514 <_sbrk_r+0x1c>)
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	f7fa f854 	bl	80015b0 <_sbrk>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_sbrk_r+0x1a>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_sbrk_r+0x1a>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	200004c4 	.word	0x200004c4

08007518 <memcpy>:
 8007518:	440a      	add	r2, r1
 800751a:	4291      	cmp	r1, r2
 800751c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007520:	d100      	bne.n	8007524 <memcpy+0xc>
 8007522:	4770      	bx	lr
 8007524:	b510      	push	{r4, lr}
 8007526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800752a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800752e:	4291      	cmp	r1, r2
 8007530:	d1f9      	bne.n	8007526 <memcpy+0xe>
 8007532:	bd10      	pop	{r4, pc}

08007534 <__assert_func>:
 8007534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007536:	4614      	mov	r4, r2
 8007538:	461a      	mov	r2, r3
 800753a:	4b09      	ldr	r3, [pc, #36]	@ (8007560 <__assert_func+0x2c>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4605      	mov	r5, r0
 8007540:	68d8      	ldr	r0, [r3, #12]
 8007542:	b954      	cbnz	r4, 800755a <__assert_func+0x26>
 8007544:	4b07      	ldr	r3, [pc, #28]	@ (8007564 <__assert_func+0x30>)
 8007546:	461c      	mov	r4, r3
 8007548:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800754c:	9100      	str	r1, [sp, #0]
 800754e:	462b      	mov	r3, r5
 8007550:	4905      	ldr	r1, [pc, #20]	@ (8007568 <__assert_func+0x34>)
 8007552:	f000 f86f 	bl	8007634 <fiprintf>
 8007556:	f000 f87f 	bl	8007658 <abort>
 800755a:	4b04      	ldr	r3, [pc, #16]	@ (800756c <__assert_func+0x38>)
 800755c:	e7f4      	b.n	8007548 <__assert_func+0x14>
 800755e:	bf00      	nop
 8007560:	20000018 	.word	0x20000018
 8007564:	08007e96 	.word	0x08007e96
 8007568:	08007e68 	.word	0x08007e68
 800756c:	08007e5b 	.word	0x08007e5b

08007570 <_calloc_r>:
 8007570:	b570      	push	{r4, r5, r6, lr}
 8007572:	fba1 5402 	umull	r5, r4, r1, r2
 8007576:	b93c      	cbnz	r4, 8007588 <_calloc_r+0x18>
 8007578:	4629      	mov	r1, r5
 800757a:	f7ff f991 	bl	80068a0 <_malloc_r>
 800757e:	4606      	mov	r6, r0
 8007580:	b928      	cbnz	r0, 800758e <_calloc_r+0x1e>
 8007582:	2600      	movs	r6, #0
 8007584:	4630      	mov	r0, r6
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	220c      	movs	r2, #12
 800758a:	6002      	str	r2, [r0, #0]
 800758c:	e7f9      	b.n	8007582 <_calloc_r+0x12>
 800758e:	462a      	mov	r2, r5
 8007590:	4621      	mov	r1, r4
 8007592:	f7fe fa44 	bl	8005a1e <memset>
 8007596:	e7f5      	b.n	8007584 <_calloc_r+0x14>

08007598 <__ascii_mbtowc>:
 8007598:	b082      	sub	sp, #8
 800759a:	b901      	cbnz	r1, 800759e <__ascii_mbtowc+0x6>
 800759c:	a901      	add	r1, sp, #4
 800759e:	b142      	cbz	r2, 80075b2 <__ascii_mbtowc+0x1a>
 80075a0:	b14b      	cbz	r3, 80075b6 <__ascii_mbtowc+0x1e>
 80075a2:	7813      	ldrb	r3, [r2, #0]
 80075a4:	600b      	str	r3, [r1, #0]
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	1e10      	subs	r0, r2, #0
 80075aa:	bf18      	it	ne
 80075ac:	2001      	movne	r0, #1
 80075ae:	b002      	add	sp, #8
 80075b0:	4770      	bx	lr
 80075b2:	4610      	mov	r0, r2
 80075b4:	e7fb      	b.n	80075ae <__ascii_mbtowc+0x16>
 80075b6:	f06f 0001 	mvn.w	r0, #1
 80075ba:	e7f8      	b.n	80075ae <__ascii_mbtowc+0x16>

080075bc <_realloc_r>:
 80075bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c0:	4680      	mov	r8, r0
 80075c2:	4615      	mov	r5, r2
 80075c4:	460c      	mov	r4, r1
 80075c6:	b921      	cbnz	r1, 80075d2 <_realloc_r+0x16>
 80075c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075cc:	4611      	mov	r1, r2
 80075ce:	f7ff b967 	b.w	80068a0 <_malloc_r>
 80075d2:	b92a      	cbnz	r2, 80075e0 <_realloc_r+0x24>
 80075d4:	f7ff f8f0 	bl	80067b8 <_free_r>
 80075d8:	2400      	movs	r4, #0
 80075da:	4620      	mov	r0, r4
 80075dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075e0:	f000 f841 	bl	8007666 <_malloc_usable_size_r>
 80075e4:	4285      	cmp	r5, r0
 80075e6:	4606      	mov	r6, r0
 80075e8:	d802      	bhi.n	80075f0 <_realloc_r+0x34>
 80075ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80075ee:	d8f4      	bhi.n	80075da <_realloc_r+0x1e>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4640      	mov	r0, r8
 80075f4:	f7ff f954 	bl	80068a0 <_malloc_r>
 80075f8:	4607      	mov	r7, r0
 80075fa:	2800      	cmp	r0, #0
 80075fc:	d0ec      	beq.n	80075d8 <_realloc_r+0x1c>
 80075fe:	42b5      	cmp	r5, r6
 8007600:	462a      	mov	r2, r5
 8007602:	4621      	mov	r1, r4
 8007604:	bf28      	it	cs
 8007606:	4632      	movcs	r2, r6
 8007608:	f7ff ff86 	bl	8007518 <memcpy>
 800760c:	4621      	mov	r1, r4
 800760e:	4640      	mov	r0, r8
 8007610:	f7ff f8d2 	bl	80067b8 <_free_r>
 8007614:	463c      	mov	r4, r7
 8007616:	e7e0      	b.n	80075da <_realloc_r+0x1e>

08007618 <__ascii_wctomb>:
 8007618:	4603      	mov	r3, r0
 800761a:	4608      	mov	r0, r1
 800761c:	b141      	cbz	r1, 8007630 <__ascii_wctomb+0x18>
 800761e:	2aff      	cmp	r2, #255	@ 0xff
 8007620:	d904      	bls.n	800762c <__ascii_wctomb+0x14>
 8007622:	228a      	movs	r2, #138	@ 0x8a
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
 800762a:	4770      	bx	lr
 800762c:	700a      	strb	r2, [r1, #0]
 800762e:	2001      	movs	r0, #1
 8007630:	4770      	bx	lr
	...

08007634 <fiprintf>:
 8007634:	b40e      	push	{r1, r2, r3}
 8007636:	b503      	push	{r0, r1, lr}
 8007638:	4601      	mov	r1, r0
 800763a:	ab03      	add	r3, sp, #12
 800763c:	4805      	ldr	r0, [pc, #20]	@ (8007654 <fiprintf+0x20>)
 800763e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007642:	6800      	ldr	r0, [r0, #0]
 8007644:	9301      	str	r3, [sp, #4]
 8007646:	f000 f83f 	bl	80076c8 <_vfiprintf_r>
 800764a:	b002      	add	sp, #8
 800764c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007650:	b003      	add	sp, #12
 8007652:	4770      	bx	lr
 8007654:	20000018 	.word	0x20000018

08007658 <abort>:
 8007658:	b508      	push	{r3, lr}
 800765a:	2006      	movs	r0, #6
 800765c:	f000 fa08 	bl	8007a70 <raise>
 8007660:	2001      	movs	r0, #1
 8007662:	f7f9 ff2d 	bl	80014c0 <_exit>

08007666 <_malloc_usable_size_r>:
 8007666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800766a:	1f18      	subs	r0, r3, #4
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfbc      	itt	lt
 8007670:	580b      	ldrlt	r3, [r1, r0]
 8007672:	18c0      	addlt	r0, r0, r3
 8007674:	4770      	bx	lr

08007676 <__sfputc_r>:
 8007676:	6893      	ldr	r3, [r2, #8]
 8007678:	3b01      	subs	r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	b410      	push	{r4}
 800767e:	6093      	str	r3, [r2, #8]
 8007680:	da08      	bge.n	8007694 <__sfputc_r+0x1e>
 8007682:	6994      	ldr	r4, [r2, #24]
 8007684:	42a3      	cmp	r3, r4
 8007686:	db01      	blt.n	800768c <__sfputc_r+0x16>
 8007688:	290a      	cmp	r1, #10
 800768a:	d103      	bne.n	8007694 <__sfputc_r+0x1e>
 800768c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007690:	f000 b932 	b.w	80078f8 <__swbuf_r>
 8007694:	6813      	ldr	r3, [r2, #0]
 8007696:	1c58      	adds	r0, r3, #1
 8007698:	6010      	str	r0, [r2, #0]
 800769a:	7019      	strb	r1, [r3, #0]
 800769c:	4608      	mov	r0, r1
 800769e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <__sfputs_r>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	4606      	mov	r6, r0
 80076a8:	460f      	mov	r7, r1
 80076aa:	4614      	mov	r4, r2
 80076ac:	18d5      	adds	r5, r2, r3
 80076ae:	42ac      	cmp	r4, r5
 80076b0:	d101      	bne.n	80076b6 <__sfputs_r+0x12>
 80076b2:	2000      	movs	r0, #0
 80076b4:	e007      	b.n	80076c6 <__sfputs_r+0x22>
 80076b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ba:	463a      	mov	r2, r7
 80076bc:	4630      	mov	r0, r6
 80076be:	f7ff ffda 	bl	8007676 <__sfputc_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	d1f3      	bne.n	80076ae <__sfputs_r+0xa>
 80076c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076c8 <_vfiprintf_r>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	460d      	mov	r5, r1
 80076ce:	b09d      	sub	sp, #116	@ 0x74
 80076d0:	4614      	mov	r4, r2
 80076d2:	4698      	mov	r8, r3
 80076d4:	4606      	mov	r6, r0
 80076d6:	b118      	cbz	r0, 80076e0 <_vfiprintf_r+0x18>
 80076d8:	6a03      	ldr	r3, [r0, #32]
 80076da:	b90b      	cbnz	r3, 80076e0 <_vfiprintf_r+0x18>
 80076dc:	f7fe f906 	bl	80058ec <__sinit>
 80076e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076e2:	07d9      	lsls	r1, r3, #31
 80076e4:	d405      	bmi.n	80076f2 <_vfiprintf_r+0x2a>
 80076e6:	89ab      	ldrh	r3, [r5, #12]
 80076e8:	059a      	lsls	r2, r3, #22
 80076ea:	d402      	bmi.n	80076f2 <_vfiprintf_r+0x2a>
 80076ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076ee:	f7fe fa14 	bl	8005b1a <__retarget_lock_acquire_recursive>
 80076f2:	89ab      	ldrh	r3, [r5, #12]
 80076f4:	071b      	lsls	r3, r3, #28
 80076f6:	d501      	bpl.n	80076fc <_vfiprintf_r+0x34>
 80076f8:	692b      	ldr	r3, [r5, #16]
 80076fa:	b99b      	cbnz	r3, 8007724 <_vfiprintf_r+0x5c>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4630      	mov	r0, r6
 8007700:	f000 f938 	bl	8007974 <__swsetup_r>
 8007704:	b170      	cbz	r0, 8007724 <_vfiprintf_r+0x5c>
 8007706:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007708:	07dc      	lsls	r4, r3, #31
 800770a:	d504      	bpl.n	8007716 <_vfiprintf_r+0x4e>
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	b01d      	add	sp, #116	@ 0x74
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	89ab      	ldrh	r3, [r5, #12]
 8007718:	0598      	lsls	r0, r3, #22
 800771a:	d4f7      	bmi.n	800770c <_vfiprintf_r+0x44>
 800771c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800771e:	f7fe f9fd 	bl	8005b1c <__retarget_lock_release_recursive>
 8007722:	e7f3      	b.n	800770c <_vfiprintf_r+0x44>
 8007724:	2300      	movs	r3, #0
 8007726:	9309      	str	r3, [sp, #36]	@ 0x24
 8007728:	2320      	movs	r3, #32
 800772a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800772e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007732:	2330      	movs	r3, #48	@ 0x30
 8007734:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80078e4 <_vfiprintf_r+0x21c>
 8007738:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800773c:	f04f 0901 	mov.w	r9, #1
 8007740:	4623      	mov	r3, r4
 8007742:	469a      	mov	sl, r3
 8007744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007748:	b10a      	cbz	r2, 800774e <_vfiprintf_r+0x86>
 800774a:	2a25      	cmp	r2, #37	@ 0x25
 800774c:	d1f9      	bne.n	8007742 <_vfiprintf_r+0x7a>
 800774e:	ebba 0b04 	subs.w	fp, sl, r4
 8007752:	d00b      	beq.n	800776c <_vfiprintf_r+0xa4>
 8007754:	465b      	mov	r3, fp
 8007756:	4622      	mov	r2, r4
 8007758:	4629      	mov	r1, r5
 800775a:	4630      	mov	r0, r6
 800775c:	f7ff ffa2 	bl	80076a4 <__sfputs_r>
 8007760:	3001      	adds	r0, #1
 8007762:	f000 80a7 	beq.w	80078b4 <_vfiprintf_r+0x1ec>
 8007766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007768:	445a      	add	r2, fp
 800776a:	9209      	str	r2, [sp, #36]	@ 0x24
 800776c:	f89a 3000 	ldrb.w	r3, [sl]
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 809f 	beq.w	80078b4 <_vfiprintf_r+0x1ec>
 8007776:	2300      	movs	r3, #0
 8007778:	f04f 32ff 	mov.w	r2, #4294967295
 800777c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007780:	f10a 0a01 	add.w	sl, sl, #1
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	9307      	str	r3, [sp, #28]
 8007788:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800778c:	931a      	str	r3, [sp, #104]	@ 0x68
 800778e:	4654      	mov	r4, sl
 8007790:	2205      	movs	r2, #5
 8007792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007796:	4853      	ldr	r0, [pc, #332]	@ (80078e4 <_vfiprintf_r+0x21c>)
 8007798:	f7f8 fd1a 	bl	80001d0 <memchr>
 800779c:	9a04      	ldr	r2, [sp, #16]
 800779e:	b9d8      	cbnz	r0, 80077d8 <_vfiprintf_r+0x110>
 80077a0:	06d1      	lsls	r1, r2, #27
 80077a2:	bf44      	itt	mi
 80077a4:	2320      	movmi	r3, #32
 80077a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077aa:	0713      	lsls	r3, r2, #28
 80077ac:	bf44      	itt	mi
 80077ae:	232b      	movmi	r3, #43	@ 0x2b
 80077b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077b4:	f89a 3000 	ldrb.w	r3, [sl]
 80077b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80077ba:	d015      	beq.n	80077e8 <_vfiprintf_r+0x120>
 80077bc:	9a07      	ldr	r2, [sp, #28]
 80077be:	4654      	mov	r4, sl
 80077c0:	2000      	movs	r0, #0
 80077c2:	f04f 0c0a 	mov.w	ip, #10
 80077c6:	4621      	mov	r1, r4
 80077c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077cc:	3b30      	subs	r3, #48	@ 0x30
 80077ce:	2b09      	cmp	r3, #9
 80077d0:	d94b      	bls.n	800786a <_vfiprintf_r+0x1a2>
 80077d2:	b1b0      	cbz	r0, 8007802 <_vfiprintf_r+0x13a>
 80077d4:	9207      	str	r2, [sp, #28]
 80077d6:	e014      	b.n	8007802 <_vfiprintf_r+0x13a>
 80077d8:	eba0 0308 	sub.w	r3, r0, r8
 80077dc:	fa09 f303 	lsl.w	r3, r9, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	9304      	str	r3, [sp, #16]
 80077e4:	46a2      	mov	sl, r4
 80077e6:	e7d2      	b.n	800778e <_vfiprintf_r+0xc6>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	1d19      	adds	r1, r3, #4
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	9103      	str	r1, [sp, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bfbb      	ittet	lt
 80077f4:	425b      	neglt	r3, r3
 80077f6:	f042 0202 	orrlt.w	r2, r2, #2
 80077fa:	9307      	strge	r3, [sp, #28]
 80077fc:	9307      	strlt	r3, [sp, #28]
 80077fe:	bfb8      	it	lt
 8007800:	9204      	strlt	r2, [sp, #16]
 8007802:	7823      	ldrb	r3, [r4, #0]
 8007804:	2b2e      	cmp	r3, #46	@ 0x2e
 8007806:	d10a      	bne.n	800781e <_vfiprintf_r+0x156>
 8007808:	7863      	ldrb	r3, [r4, #1]
 800780a:	2b2a      	cmp	r3, #42	@ 0x2a
 800780c:	d132      	bne.n	8007874 <_vfiprintf_r+0x1ac>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	1d1a      	adds	r2, r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	9203      	str	r2, [sp, #12]
 8007816:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800781a:	3402      	adds	r4, #2
 800781c:	9305      	str	r3, [sp, #20]
 800781e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80078f4 <_vfiprintf_r+0x22c>
 8007822:	7821      	ldrb	r1, [r4, #0]
 8007824:	2203      	movs	r2, #3
 8007826:	4650      	mov	r0, sl
 8007828:	f7f8 fcd2 	bl	80001d0 <memchr>
 800782c:	b138      	cbz	r0, 800783e <_vfiprintf_r+0x176>
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	eba0 000a 	sub.w	r0, r0, sl
 8007834:	2240      	movs	r2, #64	@ 0x40
 8007836:	4082      	lsls	r2, r0
 8007838:	4313      	orrs	r3, r2
 800783a:	3401      	adds	r4, #1
 800783c:	9304      	str	r3, [sp, #16]
 800783e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007842:	4829      	ldr	r0, [pc, #164]	@ (80078e8 <_vfiprintf_r+0x220>)
 8007844:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007848:	2206      	movs	r2, #6
 800784a:	f7f8 fcc1 	bl	80001d0 <memchr>
 800784e:	2800      	cmp	r0, #0
 8007850:	d03f      	beq.n	80078d2 <_vfiprintf_r+0x20a>
 8007852:	4b26      	ldr	r3, [pc, #152]	@ (80078ec <_vfiprintf_r+0x224>)
 8007854:	bb1b      	cbnz	r3, 800789e <_vfiprintf_r+0x1d6>
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	3307      	adds	r3, #7
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	3308      	adds	r3, #8
 8007860:	9303      	str	r3, [sp, #12]
 8007862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007864:	443b      	add	r3, r7
 8007866:	9309      	str	r3, [sp, #36]	@ 0x24
 8007868:	e76a      	b.n	8007740 <_vfiprintf_r+0x78>
 800786a:	fb0c 3202 	mla	r2, ip, r2, r3
 800786e:	460c      	mov	r4, r1
 8007870:	2001      	movs	r0, #1
 8007872:	e7a8      	b.n	80077c6 <_vfiprintf_r+0xfe>
 8007874:	2300      	movs	r3, #0
 8007876:	3401      	adds	r4, #1
 8007878:	9305      	str	r3, [sp, #20]
 800787a:	4619      	mov	r1, r3
 800787c:	f04f 0c0a 	mov.w	ip, #10
 8007880:	4620      	mov	r0, r4
 8007882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007886:	3a30      	subs	r2, #48	@ 0x30
 8007888:	2a09      	cmp	r2, #9
 800788a:	d903      	bls.n	8007894 <_vfiprintf_r+0x1cc>
 800788c:	2b00      	cmp	r3, #0
 800788e:	d0c6      	beq.n	800781e <_vfiprintf_r+0x156>
 8007890:	9105      	str	r1, [sp, #20]
 8007892:	e7c4      	b.n	800781e <_vfiprintf_r+0x156>
 8007894:	fb0c 2101 	mla	r1, ip, r1, r2
 8007898:	4604      	mov	r4, r0
 800789a:	2301      	movs	r3, #1
 800789c:	e7f0      	b.n	8007880 <_vfiprintf_r+0x1b8>
 800789e:	ab03      	add	r3, sp, #12
 80078a0:	9300      	str	r3, [sp, #0]
 80078a2:	462a      	mov	r2, r5
 80078a4:	4b12      	ldr	r3, [pc, #72]	@ (80078f0 <_vfiprintf_r+0x228>)
 80078a6:	a904      	add	r1, sp, #16
 80078a8:	4630      	mov	r0, r6
 80078aa:	f7fd fbdb 	bl	8005064 <_printf_float>
 80078ae:	4607      	mov	r7, r0
 80078b0:	1c78      	adds	r0, r7, #1
 80078b2:	d1d6      	bne.n	8007862 <_vfiprintf_r+0x19a>
 80078b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078b6:	07d9      	lsls	r1, r3, #31
 80078b8:	d405      	bmi.n	80078c6 <_vfiprintf_r+0x1fe>
 80078ba:	89ab      	ldrh	r3, [r5, #12]
 80078bc:	059a      	lsls	r2, r3, #22
 80078be:	d402      	bmi.n	80078c6 <_vfiprintf_r+0x1fe>
 80078c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078c2:	f7fe f92b 	bl	8005b1c <__retarget_lock_release_recursive>
 80078c6:	89ab      	ldrh	r3, [r5, #12]
 80078c8:	065b      	lsls	r3, r3, #25
 80078ca:	f53f af1f 	bmi.w	800770c <_vfiprintf_r+0x44>
 80078ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078d0:	e71e      	b.n	8007710 <_vfiprintf_r+0x48>
 80078d2:	ab03      	add	r3, sp, #12
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	462a      	mov	r2, r5
 80078d8:	4b05      	ldr	r3, [pc, #20]	@ (80078f0 <_vfiprintf_r+0x228>)
 80078da:	a904      	add	r1, sp, #16
 80078dc:	4630      	mov	r0, r6
 80078de:	f7fd fe59 	bl	8005594 <_printf_i>
 80078e2:	e7e4      	b.n	80078ae <_vfiprintf_r+0x1e6>
 80078e4:	08007e40 	.word	0x08007e40
 80078e8:	08007e4a 	.word	0x08007e4a
 80078ec:	08005065 	.word	0x08005065
 80078f0:	080076a5 	.word	0x080076a5
 80078f4:	08007e46 	.word	0x08007e46

080078f8 <__swbuf_r>:
 80078f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078fa:	460e      	mov	r6, r1
 80078fc:	4614      	mov	r4, r2
 80078fe:	4605      	mov	r5, r0
 8007900:	b118      	cbz	r0, 800790a <__swbuf_r+0x12>
 8007902:	6a03      	ldr	r3, [r0, #32]
 8007904:	b90b      	cbnz	r3, 800790a <__swbuf_r+0x12>
 8007906:	f7fd fff1 	bl	80058ec <__sinit>
 800790a:	69a3      	ldr	r3, [r4, #24]
 800790c:	60a3      	str	r3, [r4, #8]
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	071a      	lsls	r2, r3, #28
 8007912:	d501      	bpl.n	8007918 <__swbuf_r+0x20>
 8007914:	6923      	ldr	r3, [r4, #16]
 8007916:	b943      	cbnz	r3, 800792a <__swbuf_r+0x32>
 8007918:	4621      	mov	r1, r4
 800791a:	4628      	mov	r0, r5
 800791c:	f000 f82a 	bl	8007974 <__swsetup_r>
 8007920:	b118      	cbz	r0, 800792a <__swbuf_r+0x32>
 8007922:	f04f 37ff 	mov.w	r7, #4294967295
 8007926:	4638      	mov	r0, r7
 8007928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800792a:	6823      	ldr	r3, [r4, #0]
 800792c:	6922      	ldr	r2, [r4, #16]
 800792e:	1a98      	subs	r0, r3, r2
 8007930:	6963      	ldr	r3, [r4, #20]
 8007932:	b2f6      	uxtb	r6, r6
 8007934:	4283      	cmp	r3, r0
 8007936:	4637      	mov	r7, r6
 8007938:	dc05      	bgt.n	8007946 <__swbuf_r+0x4e>
 800793a:	4621      	mov	r1, r4
 800793c:	4628      	mov	r0, r5
 800793e:	f7ff fd99 	bl	8007474 <_fflush_r>
 8007942:	2800      	cmp	r0, #0
 8007944:	d1ed      	bne.n	8007922 <__swbuf_r+0x2a>
 8007946:	68a3      	ldr	r3, [r4, #8]
 8007948:	3b01      	subs	r3, #1
 800794a:	60a3      	str	r3, [r4, #8]
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	1c5a      	adds	r2, r3, #1
 8007950:	6022      	str	r2, [r4, #0]
 8007952:	701e      	strb	r6, [r3, #0]
 8007954:	6962      	ldr	r2, [r4, #20]
 8007956:	1c43      	adds	r3, r0, #1
 8007958:	429a      	cmp	r2, r3
 800795a:	d004      	beq.n	8007966 <__swbuf_r+0x6e>
 800795c:	89a3      	ldrh	r3, [r4, #12]
 800795e:	07db      	lsls	r3, r3, #31
 8007960:	d5e1      	bpl.n	8007926 <__swbuf_r+0x2e>
 8007962:	2e0a      	cmp	r6, #10
 8007964:	d1df      	bne.n	8007926 <__swbuf_r+0x2e>
 8007966:	4621      	mov	r1, r4
 8007968:	4628      	mov	r0, r5
 800796a:	f7ff fd83 	bl	8007474 <_fflush_r>
 800796e:	2800      	cmp	r0, #0
 8007970:	d0d9      	beq.n	8007926 <__swbuf_r+0x2e>
 8007972:	e7d6      	b.n	8007922 <__swbuf_r+0x2a>

08007974 <__swsetup_r>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4b29      	ldr	r3, [pc, #164]	@ (8007a1c <__swsetup_r+0xa8>)
 8007978:	4605      	mov	r5, r0
 800797a:	6818      	ldr	r0, [r3, #0]
 800797c:	460c      	mov	r4, r1
 800797e:	b118      	cbz	r0, 8007988 <__swsetup_r+0x14>
 8007980:	6a03      	ldr	r3, [r0, #32]
 8007982:	b90b      	cbnz	r3, 8007988 <__swsetup_r+0x14>
 8007984:	f7fd ffb2 	bl	80058ec <__sinit>
 8007988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800798c:	0719      	lsls	r1, r3, #28
 800798e:	d422      	bmi.n	80079d6 <__swsetup_r+0x62>
 8007990:	06da      	lsls	r2, r3, #27
 8007992:	d407      	bmi.n	80079a4 <__swsetup_r+0x30>
 8007994:	2209      	movs	r2, #9
 8007996:	602a      	str	r2, [r5, #0]
 8007998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	f04f 30ff 	mov.w	r0, #4294967295
 80079a2:	e033      	b.n	8007a0c <__swsetup_r+0x98>
 80079a4:	0758      	lsls	r0, r3, #29
 80079a6:	d512      	bpl.n	80079ce <__swsetup_r+0x5a>
 80079a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079aa:	b141      	cbz	r1, 80079be <__swsetup_r+0x4a>
 80079ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079b0:	4299      	cmp	r1, r3
 80079b2:	d002      	beq.n	80079ba <__swsetup_r+0x46>
 80079b4:	4628      	mov	r0, r5
 80079b6:	f7fe feff 	bl	80067b8 <_free_r>
 80079ba:	2300      	movs	r3, #0
 80079bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	2300      	movs	r3, #0
 80079c8:	6063      	str	r3, [r4, #4]
 80079ca:	6923      	ldr	r3, [r4, #16]
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	89a3      	ldrh	r3, [r4, #12]
 80079d0:	f043 0308 	orr.w	r3, r3, #8
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	6923      	ldr	r3, [r4, #16]
 80079d8:	b94b      	cbnz	r3, 80079ee <__swsetup_r+0x7a>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e4:	d003      	beq.n	80079ee <__swsetup_r+0x7a>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f000 f883 	bl	8007af4 <__smakebuf_r>
 80079ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f2:	f013 0201 	ands.w	r2, r3, #1
 80079f6:	d00a      	beq.n	8007a0e <__swsetup_r+0x9a>
 80079f8:	2200      	movs	r2, #0
 80079fa:	60a2      	str	r2, [r4, #8]
 80079fc:	6962      	ldr	r2, [r4, #20]
 80079fe:	4252      	negs	r2, r2
 8007a00:	61a2      	str	r2, [r4, #24]
 8007a02:	6922      	ldr	r2, [r4, #16]
 8007a04:	b942      	cbnz	r2, 8007a18 <__swsetup_r+0xa4>
 8007a06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a0a:	d1c5      	bne.n	8007998 <__swsetup_r+0x24>
 8007a0c:	bd38      	pop	{r3, r4, r5, pc}
 8007a0e:	0799      	lsls	r1, r3, #30
 8007a10:	bf58      	it	pl
 8007a12:	6962      	ldrpl	r2, [r4, #20]
 8007a14:	60a2      	str	r2, [r4, #8]
 8007a16:	e7f4      	b.n	8007a02 <__swsetup_r+0x8e>
 8007a18:	2000      	movs	r0, #0
 8007a1a:	e7f7      	b.n	8007a0c <__swsetup_r+0x98>
 8007a1c:	20000018 	.word	0x20000018

08007a20 <_raise_r>:
 8007a20:	291f      	cmp	r1, #31
 8007a22:	b538      	push	{r3, r4, r5, lr}
 8007a24:	4605      	mov	r5, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	d904      	bls.n	8007a34 <_raise_r+0x14>
 8007a2a:	2316      	movs	r3, #22
 8007a2c:	6003      	str	r3, [r0, #0]
 8007a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007a36:	b112      	cbz	r2, 8007a3e <_raise_r+0x1e>
 8007a38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a3c:	b94b      	cbnz	r3, 8007a52 <_raise_r+0x32>
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 f830 	bl	8007aa4 <_getpid_r>
 8007a44:	4622      	mov	r2, r4
 8007a46:	4601      	mov	r1, r0
 8007a48:	4628      	mov	r0, r5
 8007a4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a4e:	f000 b817 	b.w	8007a80 <_kill_r>
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d00a      	beq.n	8007a6c <_raise_r+0x4c>
 8007a56:	1c59      	adds	r1, r3, #1
 8007a58:	d103      	bne.n	8007a62 <_raise_r+0x42>
 8007a5a:	2316      	movs	r3, #22
 8007a5c:	6003      	str	r3, [r0, #0]
 8007a5e:	2001      	movs	r0, #1
 8007a60:	e7e7      	b.n	8007a32 <_raise_r+0x12>
 8007a62:	2100      	movs	r1, #0
 8007a64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007a68:	4620      	mov	r0, r4
 8007a6a:	4798      	blx	r3
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	e7e0      	b.n	8007a32 <_raise_r+0x12>

08007a70 <raise>:
 8007a70:	4b02      	ldr	r3, [pc, #8]	@ (8007a7c <raise+0xc>)
 8007a72:	4601      	mov	r1, r0
 8007a74:	6818      	ldr	r0, [r3, #0]
 8007a76:	f7ff bfd3 	b.w	8007a20 <_raise_r>
 8007a7a:	bf00      	nop
 8007a7c:	20000018 	.word	0x20000018

08007a80 <_kill_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d07      	ldr	r5, [pc, #28]	@ (8007aa0 <_kill_r+0x20>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4604      	mov	r4, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	602b      	str	r3, [r5, #0]
 8007a8e:	f7f9 fd07 	bl	80014a0 <_kill>
 8007a92:	1c43      	adds	r3, r0, #1
 8007a94:	d102      	bne.n	8007a9c <_kill_r+0x1c>
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	b103      	cbz	r3, 8007a9c <_kill_r+0x1c>
 8007a9a:	6023      	str	r3, [r4, #0]
 8007a9c:	bd38      	pop	{r3, r4, r5, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200004c4 	.word	0x200004c4

08007aa4 <_getpid_r>:
 8007aa4:	f7f9 bcf4 	b.w	8001490 <_getpid>

08007aa8 <__swhatbuf_r>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	460c      	mov	r4, r1
 8007aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ab0:	2900      	cmp	r1, #0
 8007ab2:	b096      	sub	sp, #88	@ 0x58
 8007ab4:	4615      	mov	r5, r2
 8007ab6:	461e      	mov	r6, r3
 8007ab8:	da0d      	bge.n	8007ad6 <__swhatbuf_r+0x2e>
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ac0:	f04f 0100 	mov.w	r1, #0
 8007ac4:	bf14      	ite	ne
 8007ac6:	2340      	movne	r3, #64	@ 0x40
 8007ac8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007acc:	2000      	movs	r0, #0
 8007ace:	6031      	str	r1, [r6, #0]
 8007ad0:	602b      	str	r3, [r5, #0]
 8007ad2:	b016      	add	sp, #88	@ 0x58
 8007ad4:	bd70      	pop	{r4, r5, r6, pc}
 8007ad6:	466a      	mov	r2, sp
 8007ad8:	f000 f848 	bl	8007b6c <_fstat_r>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	dbec      	blt.n	8007aba <__swhatbuf_r+0x12>
 8007ae0:	9901      	ldr	r1, [sp, #4]
 8007ae2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ae6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007aea:	4259      	negs	r1, r3
 8007aec:	4159      	adcs	r1, r3
 8007aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007af2:	e7eb      	b.n	8007acc <__swhatbuf_r+0x24>

08007af4 <__smakebuf_r>:
 8007af4:	898b      	ldrh	r3, [r1, #12]
 8007af6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007af8:	079d      	lsls	r5, r3, #30
 8007afa:	4606      	mov	r6, r0
 8007afc:	460c      	mov	r4, r1
 8007afe:	d507      	bpl.n	8007b10 <__smakebuf_r+0x1c>
 8007b00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b04:	6023      	str	r3, [r4, #0]
 8007b06:	6123      	str	r3, [r4, #16]
 8007b08:	2301      	movs	r3, #1
 8007b0a:	6163      	str	r3, [r4, #20]
 8007b0c:	b003      	add	sp, #12
 8007b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b10:	ab01      	add	r3, sp, #4
 8007b12:	466a      	mov	r2, sp
 8007b14:	f7ff ffc8 	bl	8007aa8 <__swhatbuf_r>
 8007b18:	9f00      	ldr	r7, [sp, #0]
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	4639      	mov	r1, r7
 8007b1e:	4630      	mov	r0, r6
 8007b20:	f7fe febe 	bl	80068a0 <_malloc_r>
 8007b24:	b948      	cbnz	r0, 8007b3a <__smakebuf_r+0x46>
 8007b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b2a:	059a      	lsls	r2, r3, #22
 8007b2c:	d4ee      	bmi.n	8007b0c <__smakebuf_r+0x18>
 8007b2e:	f023 0303 	bic.w	r3, r3, #3
 8007b32:	f043 0302 	orr.w	r3, r3, #2
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	e7e2      	b.n	8007b00 <__smakebuf_r+0xc>
 8007b3a:	89a3      	ldrh	r3, [r4, #12]
 8007b3c:	6020      	str	r0, [r4, #0]
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	9b01      	ldr	r3, [sp, #4]
 8007b46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007b4a:	b15b      	cbz	r3, 8007b64 <__smakebuf_r+0x70>
 8007b4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b50:	4630      	mov	r0, r6
 8007b52:	f000 f81d 	bl	8007b90 <_isatty_r>
 8007b56:	b128      	cbz	r0, 8007b64 <__smakebuf_r+0x70>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	f023 0303 	bic.w	r3, r3, #3
 8007b5e:	f043 0301 	orr.w	r3, r3, #1
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	89a3      	ldrh	r3, [r4, #12]
 8007b66:	431d      	orrs	r5, r3
 8007b68:	81a5      	strh	r5, [r4, #12]
 8007b6a:	e7cf      	b.n	8007b0c <__smakebuf_r+0x18>

08007b6c <_fstat_r>:
 8007b6c:	b538      	push	{r3, r4, r5, lr}
 8007b6e:	4d07      	ldr	r5, [pc, #28]	@ (8007b8c <_fstat_r+0x20>)
 8007b70:	2300      	movs	r3, #0
 8007b72:	4604      	mov	r4, r0
 8007b74:	4608      	mov	r0, r1
 8007b76:	4611      	mov	r1, r2
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	f7f9 fcf1 	bl	8001560 <_fstat>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	d102      	bne.n	8007b88 <_fstat_r+0x1c>
 8007b82:	682b      	ldr	r3, [r5, #0]
 8007b84:	b103      	cbz	r3, 8007b88 <_fstat_r+0x1c>
 8007b86:	6023      	str	r3, [r4, #0]
 8007b88:	bd38      	pop	{r3, r4, r5, pc}
 8007b8a:	bf00      	nop
 8007b8c:	200004c4 	.word	0x200004c4

08007b90 <_isatty_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d06      	ldr	r5, [pc, #24]	@ (8007bac <_isatty_r+0x1c>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	602b      	str	r3, [r5, #0]
 8007b9c:	f7f9 fcf0 	bl	8001580 <_isatty>
 8007ba0:	1c43      	adds	r3, r0, #1
 8007ba2:	d102      	bne.n	8007baa <_isatty_r+0x1a>
 8007ba4:	682b      	ldr	r3, [r5, #0]
 8007ba6:	b103      	cbz	r3, 8007baa <_isatty_r+0x1a>
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	bd38      	pop	{r3, r4, r5, pc}
 8007bac:	200004c4 	.word	0x200004c4

08007bb0 <_init>:
 8007bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb2:	bf00      	nop
 8007bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb6:	bc08      	pop	{r3}
 8007bb8:	469e      	mov	lr, r3
 8007bba:	4770      	bx	lr

08007bbc <_fini>:
 8007bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bbe:	bf00      	nop
 8007bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bc2:	bc08      	pop	{r3}
 8007bc4:	469e      	mov	lr, r3
 8007bc6:	4770      	bx	lr
